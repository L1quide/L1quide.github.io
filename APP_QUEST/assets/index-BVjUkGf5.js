(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const o of i)if(o.type==="childList")for(const l of o.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&r(l)}).observe(document,{childList:!0,subtree:!0});function n(i){const o={};return i.integrity&&(o.integrity=i.integrity),i.referrerPolicy&&(o.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?o.credentials="include":i.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(i){if(i.ep)return;i.ep=!0;const o=n(i);fetch(i.href,o)}})();function Sc(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var nu={exports:{}},li={},ru={exports:{}},O={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yn=Symbol.for("react.element"),mc=Symbol.for("react.portal"),hc=Symbol.for("react.fragment"),_c=Symbol.for("react.strict_mode"),Rc=Symbol.for("react.profiler"),wc=Symbol.for("react.provider"),kc=Symbol.for("react.context"),qc=Symbol.for("react.forward_ref"),Jc=Symbol.for("react.suspense"),Cc=Symbol.for("react.memo"),Ec=Symbol.for("react.lazy"),$a=Symbol.iterator;function Mc(e){return e===null||typeof e!="object"?null:(e=$a&&e[$a]||e["@@iterator"],typeof e=="function"?e:null)}var iu={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},ou=Object.assign,au={};function un(e,t,n){this.props=e,this.context=t,this.refs=au,this.updater=n||iu}un.prototype.isReactComponent={};un.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};un.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function lu(){}lu.prototype=un.prototype;function Xo(e,t,n){this.props=e,this.context=t,this.refs=au,this.updater=n||iu}var Ko=Xo.prototype=new lu;Ko.constructor=Xo;ou(Ko,un.prototype);Ko.isPureReactComponent=!0;var Ba=Array.isArray,uu=Object.prototype.hasOwnProperty,Go={current:null},su={key:!0,ref:!0,__self:!0,__source:!0};function cu(e,t,n){var r,i={},o=null,l=null;if(t!=null)for(r in t.ref!==void 0&&(l=t.ref),t.key!==void 0&&(o=""+t.key),t)uu.call(t,r)&&!su.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(u===1)i.children=n;else if(1<u){for(var s=Array(u),d=0;d<u;d++)s[d]=arguments[d+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps,u)i[r]===void 0&&(i[r]=u[r]);return{$$typeof:Yn,type:e,key:o,ref:l,props:i,_owner:Go.current}}function xc(e,t){return{$$typeof:Yn,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Yo(e){return typeof e=="object"&&e!==null&&e.$$typeof===Yn}function Oc(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var Va=/\/+/g;function Ci(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Oc(""+e.key):t.toString(36)}function kr(e,t,n,r,i){var o=typeof e;(o==="undefined"||o==="boolean")&&(e=null);var l=!1;if(e===null)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case Yn:case mc:l=!0}}if(l)return l=e,i=i(l),e=r===""?"."+Ci(l,0):r,Ba(i)?(n="",e!=null&&(n=e.replace(Va,"$&/")+"/"),kr(i,t,n,"",function(d){return d})):i!=null&&(Yo(i)&&(i=xc(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(Va,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=r===""?".":r+":",Ba(e))for(var u=0;u<e.length;u++){o=e[u];var s=r+Ci(o,u);l+=kr(o,t,n,s,i)}else if(s=Mc(e),typeof s=="function")for(e=s.call(e),u=0;!(o=e.next()).done;)o=o.value,s=r+Ci(o,u++),l+=kr(o,t,n,s,i);else if(o==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function ir(e,t,n){if(e==null)return e;var r=[],i=0;return kr(e,r,"","",function(o){return t.call(n,o,i++)}),r}function Tc(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var se={current:null},qr={transition:null},Pc={ReactCurrentDispatcher:se,ReactCurrentBatchConfig:qr,ReactCurrentOwner:Go};function du(){throw Error("act(...) is not supported in production builds of React.")}O.Children={map:ir,forEach:function(e,t,n){ir(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return ir(e,function(){t++}),t},toArray:function(e){return ir(e,function(t){return t})||[]},only:function(e){if(!Yo(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};O.Component=un;O.Fragment=hc;O.Profiler=Rc;O.PureComponent=Xo;O.StrictMode=_c;O.Suspense=Jc;O.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Pc;O.act=du;O.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=ou({},e.props),i=e.key,o=e.ref,l=e._owner;if(t!=null){if(t.ref!==void 0&&(o=t.ref,l=Go.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)uu.call(t,s)&&!su.hasOwnProperty(s)&&(r[s]=t[s]===void 0&&u!==void 0?u[s]:t[s])}var s=arguments.length-2;if(s===1)r.children=n;else if(1<s){u=Array(s);for(var d=0;d<s;d++)u[d]=arguments[d+2];r.children=u}return{$$typeof:Yn,type:e.type,key:i,ref:o,props:r,_owner:l}};O.createContext=function(e){return e={$$typeof:kc,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:wc,_context:e},e.Consumer=e};O.createElement=cu;O.createFactory=function(e){var t=cu.bind(null,e);return t.type=e,t};O.createRef=function(){return{current:null}};O.forwardRef=function(e){return{$$typeof:qc,render:e}};O.isValidElement=Yo;O.lazy=function(e){return{$$typeof:Ec,_payload:{_status:-1,_result:e},_init:Tc}};O.memo=function(e,t){return{$$typeof:Cc,type:e,compare:t===void 0?null:t}};O.startTransition=function(e){var t=qr.transition;qr.transition={};try{e()}finally{qr.transition=t}};O.unstable_act=du;O.useCallback=function(e,t){return se.current.useCallback(e,t)};O.useContext=function(e){return se.current.useContext(e)};O.useDebugValue=function(){};O.useDeferredValue=function(e){return se.current.useDeferredValue(e)};O.useEffect=function(e,t){return se.current.useEffect(e,t)};O.useId=function(){return se.current.useId()};O.useImperativeHandle=function(e,t,n){return se.current.useImperativeHandle(e,t,n)};O.useInsertionEffect=function(e,t){return se.current.useInsertionEffect(e,t)};O.useLayoutEffect=function(e,t){return se.current.useLayoutEffect(e,t)};O.useMemo=function(e,t){return se.current.useMemo(e,t)};O.useReducer=function(e,t,n){return se.current.useReducer(e,t,n)};O.useRef=function(e){return se.current.useRef(e)};O.useState=function(e){return se.current.useState(e)};O.useSyncExternalStore=function(e,t,n){return se.current.useSyncExternalStore(e,t,n)};O.useTransition=function(){return se.current.useTransition()};O.version="18.3.1";ru.exports=O;var Qt=ru.exports;const qt=Sc(Qt);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Dc=Qt,Nc=Symbol.for("react.element"),Lc=Symbol.for("react.fragment"),jc=Object.prototype.hasOwnProperty,zc=Dc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Ic={key:!0,ref:!0,__self:!0,__source:!0};function fu(e,t,n){var r,i={},o=null,l=null;n!==void 0&&(o=""+n),t.key!==void 0&&(o=""+t.key),t.ref!==void 0&&(l=t.ref);for(r in t)jc.call(t,r)&&!Ic.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)i[r]===void 0&&(i[r]=t[r]);return{$$typeof:Nc,type:e,key:o,ref:l,props:i,_owner:zc.current}}li.Fragment=Lc;li.jsx=fu;li.jsxs=fu;nu.exports=li;var ie=nu.exports,bi={},pu={exports:{}},_e={},vu={exports:{}},yu={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(q,M){var x=q.length;q.push(M);e:for(;0<x;){var $=x-1>>>1,K=q[$];if(0<i(K,M))q[$]=M,q[x]=K,x=$;else break e}}function n(q){return q.length===0?null:q[0]}function r(q){if(q.length===0)return null;var M=q[0],x=q.pop();if(x!==M){q[0]=x;e:for(var $=0,K=q.length,nr=K>>>1;$<nr;){var St=2*($+1)-1,Ji=q[St],mt=St+1,rr=q[mt];if(0>i(Ji,x))mt<K&&0>i(rr,Ji)?(q[$]=rr,q[mt]=x,$=mt):(q[$]=Ji,q[St]=x,$=St);else if(mt<K&&0>i(rr,x))q[$]=rr,q[mt]=x,$=mt;else break e}}return M}function i(q,M){var x=q.sortIndex-M.sortIndex;return x!==0?x:q.id-M.id}if(typeof performance=="object"&&typeof performance.now=="function"){var o=performance;e.unstable_now=function(){return o.now()}}else{var l=Date,u=l.now();e.unstable_now=function(){return l.now()-u}}var s=[],d=[],g=1,y=null,v=3,h=!1,_=!1,R=!1,z=typeof setTimeout=="function"?setTimeout:null,f=typeof clearTimeout=="function"?clearTimeout:null,c=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function p(q){for(var M=n(d);M!==null;){if(M.callback===null)r(d);else if(M.startTime<=q)r(d),M.sortIndex=M.expirationTime,t(s,M);else break;M=n(d)}}function S(q){if(R=!1,p(q),!_)if(n(s)!==null)_=!0,ki(k);else{var M=n(d);M!==null&&qi(S,M.startTime-q)}}function k(q,M){_=!1,R&&(R=!1,f(E),E=-1),h=!0;var x=v;try{for(p(M),y=n(s);y!==null&&(!(y.expirationTime>M)||q&&!Me());){var $=y.callback;if(typeof $=="function"){y.callback=null,v=y.priorityLevel;var K=$(y.expirationTime<=M);M=e.unstable_now(),typeof K=="function"?y.callback=K:y===n(s)&&r(s),p(M)}else r(s);y=n(s)}if(y!==null)var nr=!0;else{var St=n(d);St!==null&&qi(S,St.startTime-M),nr=!1}return nr}finally{y=null,v=x,h=!1}}var J=!1,C=null,E=-1,W=5,T=-1;function Me(){return!(e.unstable_now()-T<W)}function dn(){if(C!==null){var q=e.unstable_now();T=q;var M=!0;try{M=C(!0,q)}finally{M?fn():(J=!1,C=null)}}else J=!1}var fn;if(typeof c=="function")fn=function(){c(dn)};else if(typeof MessageChannel<"u"){var Wa=new MessageChannel,gc=Wa.port2;Wa.port1.onmessage=dn,fn=function(){gc.postMessage(null)}}else fn=function(){z(dn,0)};function ki(q){C=q,J||(J=!0,fn())}function qi(q,M){E=z(function(){q(e.unstable_now())},M)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(q){q.callback=null},e.unstable_continueExecution=function(){_||h||(_=!0,ki(k))},e.unstable_forceFrameRate=function(q){0>q||125<q?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):W=0<q?Math.floor(1e3/q):5},e.unstable_getCurrentPriorityLevel=function(){return v},e.unstable_getFirstCallbackNode=function(){return n(s)},e.unstable_next=function(q){switch(v){case 1:case 2:case 3:var M=3;break;default:M=v}var x=v;v=M;try{return q()}finally{v=x}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(q,M){switch(q){case 1:case 2:case 3:case 4:case 5:break;default:q=3}var x=v;v=q;try{return M()}finally{v=x}},e.unstable_scheduleCallback=function(q,M,x){var $=e.unstable_now();switch(typeof x=="object"&&x!==null?(x=x.delay,x=typeof x=="number"&&0<x?$+x:$):x=$,q){case 1:var K=-1;break;case 2:K=250;break;case 5:K=1073741823;break;case 4:K=1e4;break;default:K=5e3}return K=x+K,q={id:g++,callback:M,priorityLevel:q,startTime:x,expirationTime:K,sortIndex:-1},x>$?(q.sortIndex=x,t(d,q),n(s)===null&&q===n(d)&&(R?(f(E),E=-1):R=!0,qi(S,x-$))):(q.sortIndex=K,t(s,q),_||h||(_=!0,ki(k))),q},e.unstable_shouldYield=Me,e.unstable_wrapCallback=function(q){var M=v;return function(){var x=v;v=M;try{return q.apply(this,arguments)}finally{v=x}}}})(yu);vu.exports=yu;var Fc=vu.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Hc=Qt,he=Fc;function m(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var gu=new Set,Nn={};function Pt(e,t){en(e,t),en(e+"Capture",t)}function en(e,t){for(Nn[e]=t,e=0;e<t.length;e++)gu.add(t[e])}var Ve=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),eo=Object.prototype.hasOwnProperty,Uc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Qa={},Xa={};function Ac(e){return eo.call(Xa,e)?!0:eo.call(Qa,e)?!1:Uc.test(e)?Xa[e]=!0:(Qa[e]=!0,!1)}function Wc(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function $c(e,t,n,r){if(t===null||typeof t>"u"||Wc(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ce(e,t,n,r,i,o,l){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=l}var te={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){te[e]=new ce(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];te[t]=new ce(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){te[e]=new ce(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){te[e]=new ce(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){te[e]=new ce(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){te[e]=new ce(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){te[e]=new ce(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){te[e]=new ce(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){te[e]=new ce(e,5,!1,e.toLowerCase(),null,!1,!1)});var Zo=/[\-:]([a-z])/g;function bo(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Zo,bo);te[t]=new ce(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Zo,bo);te[t]=new ce(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Zo,bo);te[t]=new ce(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){te[e]=new ce(e,1,!1,e.toLowerCase(),null,!1,!1)});te.xlinkHref=new ce("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){te[e]=new ce(e,1,!1,e.toLowerCase(),null,!0,!0)});function ea(e,t,n,r){var i=te.hasOwnProperty(t)?te[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&($c(t,n,i,r)&&(n=null),r||i===null?Ac(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:"":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Ge=Hc.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,or=Symbol.for("react.element"),Lt=Symbol.for("react.portal"),jt=Symbol.for("react.fragment"),ta=Symbol.for("react.strict_mode"),to=Symbol.for("react.profiler"),Su=Symbol.for("react.provider"),mu=Symbol.for("react.context"),na=Symbol.for("react.forward_ref"),no=Symbol.for("react.suspense"),ro=Symbol.for("react.suspense_list"),ra=Symbol.for("react.memo"),Ze=Symbol.for("react.lazy"),hu=Symbol.for("react.offscreen"),Ka=Symbol.iterator;function pn(e){return e===null||typeof e!="object"?null:(e=Ka&&e[Ka]||e["@@iterator"],typeof e=="function"?e:null)}var U=Object.assign,Ei;function Rn(e){if(Ei===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Ei=t&&t[1]||""}return`
`+Ei+e}var Mi=!1;function xi(e,t){if(!e||Mi)return"";Mi=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(d){var r=d}Reflect.construct(e,[],t)}else{try{t.call()}catch(d){r=d}e.call(t.prototype)}else{try{throw Error()}catch(d){r=d}e()}}catch(d){if(d&&r&&typeof d.stack=="string"){for(var i=d.stack.split(`
`),o=r.stack.split(`
`),l=i.length-1,u=o.length-1;1<=l&&0<=u&&i[l]!==o[u];)u--;for(;1<=l&&0<=u;l--,u--)if(i[l]!==o[u]){if(l!==1||u!==1)do if(l--,u--,0>u||i[l]!==o[u]){var s=`
`+i[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}while(1<=l&&0<=u);break}}}finally{Mi=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Rn(e):""}function Bc(e){switch(e.tag){case 5:return Rn(e.type);case 16:return Rn("Lazy");case 13:return Rn("Suspense");case 19:return Rn("SuspenseList");case 0:case 2:case 15:return e=xi(e.type,!1),e;case 11:return e=xi(e.type.render,!1),e;case 1:return e=xi(e.type,!0),e;default:return""}}function io(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case jt:return"Fragment";case Lt:return"Portal";case to:return"Profiler";case ta:return"StrictMode";case no:return"Suspense";case ro:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case mu:return(e.displayName||"Context")+".Consumer";case Su:return(e._context.displayName||"Context")+".Provider";case na:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case ra:return t=e.displayName||null,t!==null?t:io(e.type)||"Memo";case Ze:t=e._payload,e=e._init;try{return io(e(t))}catch{}}return null}function Vc(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return io(t);case 8:return t===ta?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function ft(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function _u(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Qc(e){var t=_u(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(l){r=""+l,o.call(this,l)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(l){r=""+l},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function ar(e){e._valueTracker||(e._valueTracker=Qc(e))}function Ru(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=_u(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Lr(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function oo(e,t){var n=t.checked;return U({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function Ga(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=ft(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function wu(e,t){t=t.checked,t!=null&&ea(e,"checked",t,!1)}function ao(e,t){wu(e,t);var n=ft(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?lo(e,t.type,n):t.hasOwnProperty("defaultValue")&&lo(e,t.type,ft(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Ya(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function lo(e,t,n){(t!=="number"||Lr(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var wn=Array.isArray;function Xt(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ft(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function uo(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(m(91));return U({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Za(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(m(92));if(wn(n)){if(1<n.length)throw Error(m(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:ft(n)}}function ku(e,t){var n=ft(t.value),r=ft(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function ba(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function qu(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function so(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?qu(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var lr,Ju=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(lr=lr||document.createElement("div"),lr.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=lr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Ln(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Jn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Xc=["Webkit","ms","Moz","O"];Object.keys(Jn).forEach(function(e){Xc.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jn[t]=Jn[e]})});function Cu(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Jn.hasOwnProperty(e)&&Jn[e]?(""+t).trim():t+"px"}function Eu(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,i=Cu(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}var Kc=U({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function co(e,t){if(t){if(Kc[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(m(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(m(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(m(61))}if(t.style!=null&&typeof t.style!="object")throw Error(m(62))}}function fo(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var po=null;function ia(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var vo=null,Kt=null,Gt=null;function el(e){if(e=er(e)){if(typeof vo!="function")throw Error(m(280));var t=e.stateNode;t&&(t=fi(t),vo(e.stateNode,e.type,t))}}function Mu(e){Kt?Gt?Gt.push(e):Gt=[e]:Kt=e}function xu(){if(Kt){var e=Kt,t=Gt;if(Gt=Kt=null,el(e),t)for(e=0;e<t.length;e++)el(t[e])}}function Ou(e,t){return e(t)}function Tu(){}var Oi=!1;function Pu(e,t,n){if(Oi)return e(t,n);Oi=!0;try{return Ou(e,t,n)}finally{Oi=!1,(Kt!==null||Gt!==null)&&(Tu(),xu())}}function jn(e,t){var n=e.stateNode;if(n===null)return null;var r=fi(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(m(231,t,typeof n));return n}var yo=!1;if(Ve)try{var vn={};Object.defineProperty(vn,"passive",{get:function(){yo=!0}}),window.addEventListener("test",vn,vn),window.removeEventListener("test",vn,vn)}catch{yo=!1}function Gc(e,t,n,r,i,o,l,u,s){var d=Array.prototype.slice.call(arguments,3);try{t.apply(n,d)}catch(g){this.onError(g)}}var Cn=!1,jr=null,zr=!1,go=null,Yc={onError:function(e){Cn=!0,jr=e}};function Zc(e,t,n,r,i,o,l,u,s){Cn=!1,jr=null,Gc.apply(Yc,arguments)}function bc(e,t,n,r,i,o,l,u,s){if(Zc.apply(this,arguments),Cn){if(Cn){var d=jr;Cn=!1,jr=null}else throw Error(m(198));zr||(zr=!0,go=d)}}function Dt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Du(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function tl(e){if(Dt(e)!==e)throw Error(m(188))}function ed(e){var t=e.alternate;if(!t){if(t=Dt(e),t===null)throw Error(m(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var o=i.alternate;if(o===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tl(i),e;if(o===r)return tl(i),t;o=o.sibling}throw Error(m(188))}if(n.return!==r.return)n=i,r=o;else{for(var l=!1,u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l)throw Error(m(189))}}if(n.alternate!==r)throw Error(m(190))}if(n.tag!==3)throw Error(m(188));return n.stateNode.current===n?e:t}function Nu(e){return e=ed(e),e!==null?Lu(e):null}function Lu(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Lu(e);if(t!==null)return t;e=e.sibling}return null}var ju=he.unstable_scheduleCallback,nl=he.unstable_cancelCallback,td=he.unstable_shouldYield,nd=he.unstable_requestPaint,B=he.unstable_now,rd=he.unstable_getCurrentPriorityLevel,oa=he.unstable_ImmediatePriority,zu=he.unstable_UserBlockingPriority,Ir=he.unstable_NormalPriority,id=he.unstable_LowPriority,Iu=he.unstable_IdlePriority,ui=null,Fe=null;function od(e){if(Fe&&typeof Fe.onCommitFiberRoot=="function")try{Fe.onCommitFiberRoot(ui,e,void 0,(e.current.flags&128)===128)}catch{}}var De=Math.clz32?Math.clz32:ud,ad=Math.log,ld=Math.LN2;function ud(e){return e>>>=0,e===0?32:31-(ad(e)/ld|0)|0}var ur=64,sr=4194304;function kn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Fr(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,l=n&268435455;if(l!==0){var u=l&~i;u!==0?r=kn(u):(o&=l,o!==0&&(r=kn(o)))}else l=n&~i,l!==0?r=kn(l):o!==0&&(r=kn(o));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,o=t&-t,i>=o||i===16&&(o&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-De(t),i=1<<n,r|=e[n],t&=~i;return r}function sd(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function cd(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var l=31-De(o),u=1<<l,s=i[l];s===-1?(!(u&n)||u&r)&&(i[l]=sd(u,t)):s<=t&&(e.expiredLanes|=u),o&=~u}}function So(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Fu(){var e=ur;return ur<<=1,!(ur&4194240)&&(ur=64),e}function Ti(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Zn(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-De(t),e[t]=n}function dd(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-De(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}function aa(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-De(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var D=0;function Hu(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var Uu,la,Au,Wu,$u,mo=!1,cr=[],it=null,ot=null,at=null,zn=new Map,In=new Map,et=[],fd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function rl(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ot=null;break;case"mouseover":case"mouseout":at=null;break;case"pointerover":case"pointerout":zn.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":In.delete(t.pointerId)}}function yn(e,t,n,r,i,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},t!==null&&(t=er(t),t!==null&&la(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function pd(e,t,n,r,i){switch(t){case"focusin":return it=yn(it,e,t,n,r,i),!0;case"dragenter":return ot=yn(ot,e,t,n,r,i),!0;case"mouseover":return at=yn(at,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return zn.set(o,yn(zn.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,In.set(o,yn(In.get(o)||null,e,t,n,r,i)),!0}return!1}function Bu(e){var t=Rt(e.target);if(t!==null){var n=Dt(t);if(n!==null){if(t=n.tag,t===13){if(t=Du(n),t!==null){e.blockedOn=t,$u(e.priority,function(){Au(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Jr(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=ho(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);po=r,n.target.dispatchEvent(r),po=null}else return t=er(n),t!==null&&la(t),e.blockedOn=n,!1;t.shift()}return!0}function il(e,t,n){Jr(e)&&n.delete(t)}function vd(){mo=!1,it!==null&&Jr(it)&&(it=null),ot!==null&&Jr(ot)&&(ot=null),at!==null&&Jr(at)&&(at=null),zn.forEach(il),In.forEach(il)}function gn(e,t){e.blockedOn===t&&(e.blockedOn=null,mo||(mo=!0,he.unstable_scheduleCallback(he.unstable_NormalPriority,vd)))}function Fn(e){function t(i){return gn(i,e)}if(0<cr.length){gn(cr[0],e);for(var n=1;n<cr.length;n++){var r=cr[n];r.blockedOn===e&&(r.blockedOn=null)}}for(it!==null&&gn(it,e),ot!==null&&gn(ot,e),at!==null&&gn(at,e),zn.forEach(t),In.forEach(t),n=0;n<et.length;n++)r=et[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<et.length&&(n=et[0],n.blockedOn===null);)Bu(n),n.blockedOn===null&&et.shift()}var Yt=Ge.ReactCurrentBatchConfig,Hr=!0;function yd(e,t,n,r){var i=D,o=Yt.transition;Yt.transition=null;try{D=1,ua(e,t,n,r)}finally{D=i,Yt.transition=o}}function gd(e,t,n,r){var i=D,o=Yt.transition;Yt.transition=null;try{D=4,ua(e,t,n,r)}finally{D=i,Yt.transition=o}}function ua(e,t,n,r){if(Hr){var i=ho(e,t,n,r);if(i===null)Ui(e,t,r,Ur,n),rl(e,r);else if(pd(i,e,t,n,r))r.stopPropagation();else if(rl(e,r),t&4&&-1<fd.indexOf(e)){for(;i!==null;){var o=er(i);if(o!==null&&Uu(o),o=ho(e,t,n,r),o===null&&Ui(e,t,r,Ur,n),o===i)break;i=o}i!==null&&r.stopPropagation()}else Ui(e,t,r,null,n)}}var Ur=null;function ho(e,t,n,r){if(Ur=null,e=ia(r),e=Rt(e),e!==null)if(t=Dt(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Du(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ur=e,null}function Vu(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(rd()){case oa:return 1;case zu:return 4;case Ir:case id:return 16;case Iu:return 536870912;default:return 16}default:return 16}}var nt=null,sa=null,Cr=null;function Qu(){if(Cr)return Cr;var e,t=sa,n=t.length,r,i="value"in nt?nt.value:nt.textContent,o=i.length;for(e=0;e<n&&t[e]===i[e];e++);var l=n-e;for(r=1;r<=l&&t[n-r]===i[o-r];r++);return Cr=i.slice(e,1<r?1-r:void 0)}function Er(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function dr(){return!0}function ol(){return!1}function Re(e){function t(n,r,i,o,l){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=o,this.target=l,this.currentTarget=null;for(var u in e)e.hasOwnProperty(u)&&(n=e[u],this[u]=n?n(o):o[u]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?dr:ol,this.isPropagationStopped=ol,this}return U(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=dr)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=dr)},persist:function(){},isPersistent:dr}),t}var sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ca=Re(sn),bn=U({},sn,{view:0,detail:0}),Sd=Re(bn),Pi,Di,Sn,si=U({},bn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:da,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Sn&&(Sn&&e.type==="mousemove"?(Pi=e.screenX-Sn.screenX,Di=e.screenY-Sn.screenY):Di=Pi=0,Sn=e),Pi)},movementY:function(e){return"movementY"in e?e.movementY:Di}}),al=Re(si),md=U({},si,{dataTransfer:0}),hd=Re(md),_d=U({},bn,{relatedTarget:0}),Ni=Re(_d),Rd=U({},sn,{animationName:0,elapsedTime:0,pseudoElement:0}),wd=Re(Rd),kd=U({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),qd=Re(kd),Jd=U({},sn,{data:0}),ll=Re(Jd),Cd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ed={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Md={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xd(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Md[e])?!!t[e]:!1}function da(){return xd}var Od=U({},bn,{key:function(e){if(e.key){var t=Cd[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Er(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Ed[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:da,charCode:function(e){return e.type==="keypress"?Er(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Er(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Td=Re(Od),Pd=U({},si,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),ul=Re(Pd),Dd=U({},bn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:da}),Nd=Re(Dd),Ld=U({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0}),jd=Re(Ld),zd=U({},si,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Id=Re(zd),Fd=[9,13,27,32],fa=Ve&&"CompositionEvent"in window,En=null;Ve&&"documentMode"in document&&(En=document.documentMode);var Hd=Ve&&"TextEvent"in window&&!En,Xu=Ve&&(!fa||En&&8<En&&11>=En),sl=" ",cl=!1;function Ku(e,t){switch(e){case"keyup":return Fd.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gu(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var zt=!1;function Ud(e,t){switch(e){case"compositionend":return Gu(t);case"keypress":return t.which!==32?null:(cl=!0,sl);case"textInput":return e=t.data,e===sl&&cl?null:e;default:return null}}function Ad(e,t){if(zt)return e==="compositionend"||!fa&&Ku(e,t)?(e=Qu(),Cr=sa=nt=null,zt=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Xu&&t.locale!=="ko"?null:t.data;default:return null}}var Wd={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function dl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Wd[e.type]:t==="textarea"}function Yu(e,t,n,r){Mu(r),t=Ar(t,"onChange"),0<t.length&&(n=new ca("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Mn=null,Hn=null;function $d(e){us(e,0)}function ci(e){var t=Ht(e);if(Ru(t))return e}function Bd(e,t){if(e==="change")return t}var Zu=!1;if(Ve){var Li;if(Ve){var ji="oninput"in document;if(!ji){var fl=document.createElement("div");fl.setAttribute("oninput","return;"),ji=typeof fl.oninput=="function"}Li=ji}else Li=!1;Zu=Li&&(!document.documentMode||9<document.documentMode)}function pl(){Mn&&(Mn.detachEvent("onpropertychange",bu),Hn=Mn=null)}function bu(e){if(e.propertyName==="value"&&ci(Hn)){var t=[];Yu(t,Hn,e,ia(e)),Pu($d,t)}}function Vd(e,t,n){e==="focusin"?(pl(),Mn=t,Hn=n,Mn.attachEvent("onpropertychange",bu)):e==="focusout"&&pl()}function Qd(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return ci(Hn)}function Xd(e,t){if(e==="click")return ci(t)}function Kd(e,t){if(e==="input"||e==="change")return ci(t)}function Gd(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Le=typeof Object.is=="function"?Object.is:Gd;function Un(e,t){if(Le(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!eo.call(t,i)||!Le(e[i],t[i]))return!1}return!0}function vl(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function yl(e,t){var n=vl(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=vl(n)}}function es(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?es(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function ts(){for(var e=window,t=Lr();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Lr(e.document)}return t}function pa(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function Yd(e){var t=ts(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&es(n.ownerDocument.documentElement,n)){if(r!==null&&pa(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=r.end===void 0?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=yl(n,o);var l=yl(n,r);i&&l&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==l.node||e.focusOffset!==l.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(l.node,l.offset)):(t.setEnd(l.node,l.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Zd=Ve&&"documentMode"in document&&11>=document.documentMode,It=null,_o=null,xn=null,Ro=!1;function gl(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Ro||It==null||It!==Lr(r)||(r=It,"selectionStart"in r&&pa(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),xn&&Un(xn,r)||(xn=r,r=Ar(_o,"onSelect"),0<r.length&&(t=new ca("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=It)))}function fr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ft={animationend:fr("Animation","AnimationEnd"),animationiteration:fr("Animation","AnimationIteration"),animationstart:fr("Animation","AnimationStart"),transitionend:fr("Transition","TransitionEnd")},zi={},ns={};Ve&&(ns=document.createElement("div").style,"AnimationEvent"in window||(delete Ft.animationend.animation,delete Ft.animationiteration.animation,delete Ft.animationstart.animation),"TransitionEvent"in window||delete Ft.transitionend.transition);function di(e){if(zi[e])return zi[e];if(!Ft[e])return e;var t=Ft[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in ns)return zi[e]=t[n];return e}var rs=di("animationend"),is=di("animationiteration"),os=di("animationstart"),as=di("transitionend"),ls=new Map,Sl="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function vt(e,t){ls.set(e,t),Pt(t,[e])}for(var Ii=0;Ii<Sl.length;Ii++){var Fi=Sl[Ii],bd=Fi.toLowerCase(),ef=Fi[0].toUpperCase()+Fi.slice(1);vt(bd,"on"+ef)}vt(rs,"onAnimationEnd");vt(is,"onAnimationIteration");vt(os,"onAnimationStart");vt("dblclick","onDoubleClick");vt("focusin","onFocus");vt("focusout","onBlur");vt(as,"onTransitionEnd");en("onMouseEnter",["mouseout","mouseover"]);en("onMouseLeave",["mouseout","mouseover"]);en("onPointerEnter",["pointerout","pointerover"]);en("onPointerLeave",["pointerout","pointerover"]);Pt("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Pt("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Pt("onBeforeInput",["compositionend","keypress","textInput","paste"]);Pt("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Pt("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Pt("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var qn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),tf=new Set("cancel close invalid load scroll toggle".split(" ").concat(qn));function ml(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,bc(r,t,void 0,e),e.currentTarget=null}function us(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var l=r.length-1;0<=l;l--){var u=r[l],s=u.instance,d=u.currentTarget;if(u=u.listener,s!==o&&i.isPropagationStopped())break e;ml(i,u,d),o=s}else for(l=0;l<r.length;l++){if(u=r[l],s=u.instance,d=u.currentTarget,u=u.listener,s!==o&&i.isPropagationStopped())break e;ml(i,u,d),o=s}}}if(zr)throw e=go,zr=!1,go=null,e}function L(e,t){var n=t[Co];n===void 0&&(n=t[Co]=new Set);var r=e+"__bubble";n.has(r)||(ss(t,e,2,!1),n.add(r))}function Hi(e,t,n){var r=0;t&&(r|=4),ss(n,e,r,t)}var pr="_reactListening"+Math.random().toString(36).slice(2);function An(e){if(!e[pr]){e[pr]=!0,gu.forEach(function(n){n!=="selectionchange"&&(tf.has(n)||Hi(n,!1,e),Hi(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[pr]||(t[pr]=!0,Hi("selectionchange",!1,t))}}function ss(e,t,n,r){switch(Vu(t)){case 1:var i=yd;break;case 4:i=gd;break;default:i=ua}n=i.bind(null,t,n,e),i=void 0,!yo||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Ui(e,t,n,r,i){var o=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var l=r.tag;if(l===3||l===4){var u=r.stateNode.containerInfo;if(u===i||u.nodeType===8&&u.parentNode===i)break;if(l===4)for(l=r.return;l!==null;){var s=l.tag;if((s===3||s===4)&&(s=l.stateNode.containerInfo,s===i||s.nodeType===8&&s.parentNode===i))return;l=l.return}for(;u!==null;){if(l=Rt(u),l===null)return;if(s=l.tag,s===5||s===6){r=o=l;continue e}u=u.parentNode}}r=r.return}Pu(function(){var d=o,g=ia(n),y=[];e:{var v=ls.get(e);if(v!==void 0){var h=ca,_=e;switch(e){case"keypress":if(Er(n)===0)break e;case"keydown":case"keyup":h=Td;break;case"focusin":_="focus",h=Ni;break;case"focusout":_="blur",h=Ni;break;case"beforeblur":case"afterblur":h=Ni;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":h=al;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":h=hd;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":h=Nd;break;case rs:case is:case os:h=wd;break;case as:h=jd;break;case"scroll":h=Sd;break;case"wheel":h=Id;break;case"copy":case"cut":case"paste":h=qd;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":h=ul}var R=(t&4)!==0,z=!R&&e==="scroll",f=R?v!==null?v+"Capture":null:v;R=[];for(var c=d,p;c!==null;){p=c;var S=p.stateNode;if(p.tag===5&&S!==null&&(p=S,f!==null&&(S=jn(c,f),S!=null&&R.push(Wn(c,S,p)))),z)break;c=c.return}0<R.length&&(v=new h(v,_,null,n,g),y.push({event:v,listeners:R}))}}if(!(t&7)){e:{if(v=e==="mouseover"||e==="pointerover",h=e==="mouseout"||e==="pointerout",v&&n!==po&&(_=n.relatedTarget||n.fromElement)&&(Rt(_)||_[Qe]))break e;if((h||v)&&(v=g.window===g?g:(v=g.ownerDocument)?v.defaultView||v.parentWindow:window,h?(_=n.relatedTarget||n.toElement,h=d,_=_?Rt(_):null,_!==null&&(z=Dt(_),_!==z||_.tag!==5&&_.tag!==6)&&(_=null)):(h=null,_=d),h!==_)){if(R=al,S="onMouseLeave",f="onMouseEnter",c="mouse",(e==="pointerout"||e==="pointerover")&&(R=ul,S="onPointerLeave",f="onPointerEnter",c="pointer"),z=h==null?v:Ht(h),p=_==null?v:Ht(_),v=new R(S,c+"leave",h,n,g),v.target=z,v.relatedTarget=p,S=null,Rt(g)===d&&(R=new R(f,c+"enter",_,n,g),R.target=p,R.relatedTarget=z,S=R),z=S,h&&_)t:{for(R=h,f=_,c=0,p=R;p;p=Nt(p))c++;for(p=0,S=f;S;S=Nt(S))p++;for(;0<c-p;)R=Nt(R),c--;for(;0<p-c;)f=Nt(f),p--;for(;c--;){if(R===f||f!==null&&R===f.alternate)break t;R=Nt(R),f=Nt(f)}R=null}else R=null;h!==null&&hl(y,v,h,R,!1),_!==null&&z!==null&&hl(y,z,_,R,!0)}}e:{if(v=d?Ht(d):window,h=v.nodeName&&v.nodeName.toLowerCase(),h==="select"||h==="input"&&v.type==="file")var k=Bd;else if(dl(v))if(Zu)k=Kd;else{k=Qd;var J=Vd}else(h=v.nodeName)&&h.toLowerCase()==="input"&&(v.type==="checkbox"||v.type==="radio")&&(k=Xd);if(k&&(k=k(e,d))){Yu(y,k,n,g);break e}J&&J(e,v,d),e==="focusout"&&(J=v._wrapperState)&&J.controlled&&v.type==="number"&&lo(v,"number",v.value)}switch(J=d?Ht(d):window,e){case"focusin":(dl(J)||J.contentEditable==="true")&&(It=J,_o=d,xn=null);break;case"focusout":xn=_o=It=null;break;case"mousedown":Ro=!0;break;case"contextmenu":case"mouseup":case"dragend":Ro=!1,gl(y,n,g);break;case"selectionchange":if(Zd)break;case"keydown":case"keyup":gl(y,n,g)}var C;if(fa)e:{switch(e){case"compositionstart":var E="onCompositionStart";break e;case"compositionend":E="onCompositionEnd";break e;case"compositionupdate":E="onCompositionUpdate";break e}E=void 0}else zt?Ku(e,n)&&(E="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(E="onCompositionStart");E&&(Xu&&n.locale!=="ko"&&(zt||E!=="onCompositionStart"?E==="onCompositionEnd"&&zt&&(C=Qu()):(nt=g,sa="value"in nt?nt.value:nt.textContent,zt=!0)),J=Ar(d,E),0<J.length&&(E=new ll(E,e,null,n,g),y.push({event:E,listeners:J}),C?E.data=C:(C=Gu(n),C!==null&&(E.data=C)))),(C=Hd?Ud(e,n):Ad(e,n))&&(d=Ar(d,"onBeforeInput"),0<d.length&&(g=new ll("onBeforeInput","beforeinput",null,n,g),y.push({event:g,listeners:d}),g.data=C))}us(y,t)})}function Wn(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ar(e,t){for(var n=t+"Capture",r=[];e!==null;){var i=e,o=i.stateNode;i.tag===5&&o!==null&&(i=o,o=jn(e,n),o!=null&&r.unshift(Wn(e,o,i)),o=jn(e,t),o!=null&&r.push(Wn(e,o,i))),e=e.return}return r}function Nt(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function hl(e,t,n,r,i){for(var o=t._reactName,l=[];n!==null&&n!==r;){var u=n,s=u.alternate,d=u.stateNode;if(s!==null&&s===r)break;u.tag===5&&d!==null&&(u=d,i?(s=jn(n,o),s!=null&&l.unshift(Wn(n,s,u))):i||(s=jn(n,o),s!=null&&l.push(Wn(n,s,u)))),n=n.return}l.length!==0&&e.push({event:t,listeners:l})}var nf=/\r\n?/g,rf=/\u0000|\uFFFD/g;function _l(e){return(typeof e=="string"?e:""+e).replace(nf,`
`).replace(rf,"")}function vr(e,t,n){if(t=_l(t),_l(e)!==t&&n)throw Error(m(425))}function Wr(){}var wo=null,ko=null;function qo(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Jo=typeof setTimeout=="function"?setTimeout:void 0,of=typeof clearTimeout=="function"?clearTimeout:void 0,Rl=typeof Promise=="function"?Promise:void 0,af=typeof queueMicrotask=="function"?queueMicrotask:typeof Rl<"u"?function(e){return Rl.resolve(null).then(e).catch(lf)}:Jo;function lf(e){setTimeout(function(){throw e})}function Ai(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n==="/$"){if(r===0){e.removeChild(i),Fn(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=i}while(n);Fn(t)}function lt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function wl(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var cn=Math.random().toString(36).slice(2),Ie="__reactFiber$"+cn,$n="__reactProps$"+cn,Qe="__reactContainer$"+cn,Co="__reactEvents$"+cn,uf="__reactListeners$"+cn,sf="__reactHandles$"+cn;function Rt(e){var t=e[Ie];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Qe]||n[Ie]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=wl(e);e!==null;){if(n=e[Ie])return n;e=wl(e)}return t}e=n,n=e.parentNode}return null}function er(e){return e=e[Ie]||e[Qe],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Ht(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(m(33))}function fi(e){return e[$n]||null}var Eo=[],Ut=-1;function yt(e){return{current:e}}function j(e){0>Ut||(e.current=Eo[Ut],Eo[Ut]=null,Ut--)}function N(e,t){Ut++,Eo[Ut]=e.current,e.current=t}var pt={},ae=yt(pt),pe=yt(!1),Et=pt;function tn(e,t){var n=e.type.contextTypes;if(!n)return pt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},o;for(o in n)i[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ve(e){return e=e.childContextTypes,e!=null}function $r(){j(pe),j(ae)}function kl(e,t,n){if(ae.current!==pt)throw Error(m(168));N(ae,t),N(pe,n)}function cs(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(m(108,Vc(e)||"Unknown",i));return U({},n,r)}function Br(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||pt,Et=ae.current,N(ae,e),N(pe,pe.current),!0}function ql(e,t,n){var r=e.stateNode;if(!r)throw Error(m(169));n?(e=cs(e,t,Et),r.__reactInternalMemoizedMergedChildContext=e,j(pe),j(ae),N(ae,e)):j(pe),N(pe,n)}var Ae=null,pi=!1,Wi=!1;function ds(e){Ae===null?Ae=[e]:Ae.push(e)}function cf(e){pi=!0,ds(e)}function gt(){if(!Wi&&Ae!==null){Wi=!0;var e=0,t=D;try{var n=Ae;for(D=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}Ae=null,pi=!1}catch(i){throw Ae!==null&&(Ae=Ae.slice(e+1)),ju(oa,gt),i}finally{D=t,Wi=!1}}return null}var At=[],Wt=0,Vr=null,Qr=0,we=[],ke=0,Mt=null,We=1,$e="";function ht(e,t){At[Wt++]=Qr,At[Wt++]=Vr,Vr=e,Qr=t}function fs(e,t,n){we[ke++]=We,we[ke++]=$e,we[ke++]=Mt,Mt=e;var r=We;e=$e;var i=32-De(r)-1;r&=~(1<<i),n+=1;var o=32-De(t)+i;if(30<o){var l=i-i%5;o=(r&(1<<l)-1).toString(32),r>>=l,i-=l,We=1<<32-De(t)+i|n<<i|r,$e=o+e}else We=1<<o|n<<i|r,$e=e}function va(e){e.return!==null&&(ht(e,1),fs(e,1,0))}function ya(e){for(;e===Vr;)Vr=At[--Wt],At[Wt]=null,Qr=At[--Wt],At[Wt]=null;for(;e===Mt;)Mt=we[--ke],we[ke]=null,$e=we[--ke],we[ke]=null,We=we[--ke],we[ke]=null}var me=null,Se=null,I=!1,Pe=null;function ps(e,t){var n=qe(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Jl(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,me=e,Se=lt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,me=e,Se=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Mt!==null?{id:We,overflow:$e}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=qe(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,me=e,Se=null,!0):!1;default:return!1}}function Mo(e){return(e.mode&1)!==0&&(e.flags&128)===0}function xo(e){if(I){var t=Se;if(t){var n=t;if(!Jl(e,t)){if(Mo(e))throw Error(m(418));t=lt(n.nextSibling);var r=me;t&&Jl(e,t)?ps(r,n):(e.flags=e.flags&-4097|2,I=!1,me=e)}}else{if(Mo(e))throw Error(m(418));e.flags=e.flags&-4097|2,I=!1,me=e}}}function Cl(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;me=e}function yr(e){if(e!==me)return!1;if(!I)return Cl(e),I=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!qo(e.type,e.memoizedProps)),t&&(t=Se)){if(Mo(e))throw vs(),Error(m(418));for(;t;)ps(e,t),t=lt(t.nextSibling)}if(Cl(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(m(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Se=lt(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Se=null}}else Se=me?lt(e.stateNode.nextSibling):null;return!0}function vs(){for(var e=Se;e;)e=lt(e.nextSibling)}function nn(){Se=me=null,I=!1}function ga(e){Pe===null?Pe=[e]:Pe.push(e)}var df=Ge.ReactCurrentBatchConfig;function mn(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(m(309));var r=n.stateNode}if(!r)throw Error(m(147,e));var i=r,o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(l){var u=i.refs;l===null?delete u[o]:u[o]=l},t._stringRef=o,t)}if(typeof e!="string")throw Error(m(284));if(!n._owner)throw Error(m(290,e))}return e}function gr(e,t){throw e=Object.prototype.toString.call(t),Error(m(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function El(e){var t=e._init;return t(e._payload)}function ys(e){function t(f,c){if(e){var p=f.deletions;p===null?(f.deletions=[c],f.flags|=16):p.push(c)}}function n(f,c){if(!e)return null;for(;c!==null;)t(f,c),c=c.sibling;return null}function r(f,c){for(f=new Map;c!==null;)c.key!==null?f.set(c.key,c):f.set(c.index,c),c=c.sibling;return f}function i(f,c){return f=dt(f,c),f.index=0,f.sibling=null,f}function o(f,c,p){return f.index=p,e?(p=f.alternate,p!==null?(p=p.index,p<c?(f.flags|=2,c):p):(f.flags|=2,c)):(f.flags|=1048576,c)}function l(f){return e&&f.alternate===null&&(f.flags|=2),f}function u(f,c,p,S){return c===null||c.tag!==6?(c=Gi(p,f.mode,S),c.return=f,c):(c=i(c,p),c.return=f,c)}function s(f,c,p,S){var k=p.type;return k===jt?g(f,c,p.props.children,S,p.key):c!==null&&(c.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ze&&El(k)===c.type)?(S=i(c,p.props),S.ref=mn(f,c,p),S.return=f,S):(S=Nr(p.type,p.key,p.props,null,f.mode,S),S.ref=mn(f,c,p),S.return=f,S)}function d(f,c,p,S){return c===null||c.tag!==4||c.stateNode.containerInfo!==p.containerInfo||c.stateNode.implementation!==p.implementation?(c=Yi(p,f.mode,S),c.return=f,c):(c=i(c,p.children||[]),c.return=f,c)}function g(f,c,p,S,k){return c===null||c.tag!==7?(c=Ct(p,f.mode,S,k),c.return=f,c):(c=i(c,p),c.return=f,c)}function y(f,c,p){if(typeof c=="string"&&c!==""||typeof c=="number")return c=Gi(""+c,f.mode,p),c.return=f,c;if(typeof c=="object"&&c!==null){switch(c.$$typeof){case or:return p=Nr(c.type,c.key,c.props,null,f.mode,p),p.ref=mn(f,null,c),p.return=f,p;case Lt:return c=Yi(c,f.mode,p),c.return=f,c;case Ze:var S=c._init;return y(f,S(c._payload),p)}if(wn(c)||pn(c))return c=Ct(c,f.mode,p,null),c.return=f,c;gr(f,c)}return null}function v(f,c,p,S){var k=c!==null?c.key:null;if(typeof p=="string"&&p!==""||typeof p=="number")return k!==null?null:u(f,c,""+p,S);if(typeof p=="object"&&p!==null){switch(p.$$typeof){case or:return p.key===k?s(f,c,p,S):null;case Lt:return p.key===k?d(f,c,p,S):null;case Ze:return k=p._init,v(f,c,k(p._payload),S)}if(wn(p)||pn(p))return k!==null?null:g(f,c,p,S,null);gr(f,p)}return null}function h(f,c,p,S,k){if(typeof S=="string"&&S!==""||typeof S=="number")return f=f.get(p)||null,u(c,f,""+S,k);if(typeof S=="object"&&S!==null){switch(S.$$typeof){case or:return f=f.get(S.key===null?p:S.key)||null,s(c,f,S,k);case Lt:return f=f.get(S.key===null?p:S.key)||null,d(c,f,S,k);case Ze:var J=S._init;return h(f,c,p,J(S._payload),k)}if(wn(S)||pn(S))return f=f.get(p)||null,g(c,f,S,k,null);gr(c,S)}return null}function _(f,c,p,S){for(var k=null,J=null,C=c,E=c=0,W=null;C!==null&&E<p.length;E++){C.index>E?(W=C,C=null):W=C.sibling;var T=v(f,C,p[E],S);if(T===null){C===null&&(C=W);break}e&&C&&T.alternate===null&&t(f,C),c=o(T,c,E),J===null?k=T:J.sibling=T,J=T,C=W}if(E===p.length)return n(f,C),I&&ht(f,E),k;if(C===null){for(;E<p.length;E++)C=y(f,p[E],S),C!==null&&(c=o(C,c,E),J===null?k=C:J.sibling=C,J=C);return I&&ht(f,E),k}for(C=r(f,C);E<p.length;E++)W=h(C,f,E,p[E],S),W!==null&&(e&&W.alternate!==null&&C.delete(W.key===null?E:W.key),c=o(W,c,E),J===null?k=W:J.sibling=W,J=W);return e&&C.forEach(function(Me){return t(f,Me)}),I&&ht(f,E),k}function R(f,c,p,S){var k=pn(p);if(typeof k!="function")throw Error(m(150));if(p=k.call(p),p==null)throw Error(m(151));for(var J=k=null,C=c,E=c=0,W=null,T=p.next();C!==null&&!T.done;E++,T=p.next()){C.index>E?(W=C,C=null):W=C.sibling;var Me=v(f,C,T.value,S);if(Me===null){C===null&&(C=W);break}e&&C&&Me.alternate===null&&t(f,C),c=o(Me,c,E),J===null?k=Me:J.sibling=Me,J=Me,C=W}if(T.done)return n(f,C),I&&ht(f,E),k;if(C===null){for(;!T.done;E++,T=p.next())T=y(f,T.value,S),T!==null&&(c=o(T,c,E),J===null?k=T:J.sibling=T,J=T);return I&&ht(f,E),k}for(C=r(f,C);!T.done;E++,T=p.next())T=h(C,f,E,T.value,S),T!==null&&(e&&T.alternate!==null&&C.delete(T.key===null?E:T.key),c=o(T,c,E),J===null?k=T:J.sibling=T,J=T);return e&&C.forEach(function(dn){return t(f,dn)}),I&&ht(f,E),k}function z(f,c,p,S){if(typeof p=="object"&&p!==null&&p.type===jt&&p.key===null&&(p=p.props.children),typeof p=="object"&&p!==null){switch(p.$$typeof){case or:e:{for(var k=p.key,J=c;J!==null;){if(J.key===k){if(k=p.type,k===jt){if(J.tag===7){n(f,J.sibling),c=i(J,p.props.children),c.return=f,f=c;break e}}else if(J.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ze&&El(k)===J.type){n(f,J.sibling),c=i(J,p.props),c.ref=mn(f,J,p),c.return=f,f=c;break e}n(f,J);break}else t(f,J);J=J.sibling}p.type===jt?(c=Ct(p.props.children,f.mode,S,p.key),c.return=f,f=c):(S=Nr(p.type,p.key,p.props,null,f.mode,S),S.ref=mn(f,c,p),S.return=f,f=S)}return l(f);case Lt:e:{for(J=p.key;c!==null;){if(c.key===J)if(c.tag===4&&c.stateNode.containerInfo===p.containerInfo&&c.stateNode.implementation===p.implementation){n(f,c.sibling),c=i(c,p.children||[]),c.return=f,f=c;break e}else{n(f,c);break}else t(f,c);c=c.sibling}c=Yi(p,f.mode,S),c.return=f,f=c}return l(f);case Ze:return J=p._init,z(f,c,J(p._payload),S)}if(wn(p))return _(f,c,p,S);if(pn(p))return R(f,c,p,S);gr(f,p)}return typeof p=="string"&&p!==""||typeof p=="number"?(p=""+p,c!==null&&c.tag===6?(n(f,c.sibling),c=i(c,p),c.return=f,f=c):(n(f,c),c=Gi(p,f.mode,S),c.return=f,f=c),l(f)):n(f,c)}return z}var rn=ys(!0),gs=ys(!1),Xr=yt(null),Kr=null,$t=null,Sa=null;function ma(){Sa=$t=Kr=null}function ha(e){var t=Xr.current;j(Xr),e._currentValue=t}function Oo(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Zt(e,t){Kr=e,Sa=$t=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(fe=!0),e.firstContext=null)}function Ce(e){var t=e._currentValue;if(Sa!==e)if(e={context:e,memoizedValue:t,next:null},$t===null){if(Kr===null)throw Error(m(308));$t=e,Kr.dependencies={lanes:0,firstContext:e}}else $t=$t.next=e;return t}var wt=null;function _a(e){wt===null?wt=[e]:wt.push(e)}function Ss(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,_a(t)):(n.next=i.next,i.next=n),t.interleaved=n,Xe(e,r)}function Xe(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var be=!1;function Ra(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ms(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Be(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ut(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,P&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Xe(e,n)}return i=r.interleaved,i===null?(t.next=t,_a(r)):(t.next=i.next,i.next=t),r.interleaved=t,Xe(e,n)}function Mr(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,aa(e,n)}}function Ml(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,o=null;if(n=n.firstBaseUpdate,n!==null){do{var l={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};o===null?i=o=l:o=o.next=l,n=n.next}while(n!==null);o===null?i=o=t:o=o.next=t}else i=o=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Gr(e,t,n,r){var i=e.updateQueue;be=!1;var o=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(u!==null){i.shared.pending=null;var s=u,d=s.next;s.next=null,l===null?o=d:l.next=d,l=s;var g=e.alternate;g!==null&&(g=g.updateQueue,u=g.lastBaseUpdate,u!==l&&(u===null?g.firstBaseUpdate=d:u.next=d,g.lastBaseUpdate=s))}if(o!==null){var y=i.baseState;l=0,g=d=s=null,u=o;do{var v=u.lane,h=u.eventTime;if((r&v)===v){g!==null&&(g=g.next={eventTime:h,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var _=e,R=u;switch(v=t,h=n,R.tag){case 1:if(_=R.payload,typeof _=="function"){y=_.call(h,y,v);break e}y=_;break e;case 3:_.flags=_.flags&-65537|128;case 0:if(_=R.payload,v=typeof _=="function"?_.call(h,y,v):_,v==null)break e;y=U({},y,v);break e;case 2:be=!0}}u.callback!==null&&u.lane!==0&&(e.flags|=64,v=i.effects,v===null?i.effects=[u]:v.push(u))}else h={eventTime:h,lane:v,tag:u.tag,payload:u.payload,callback:u.callback,next:null},g===null?(d=g=h,s=y):g=g.next=h,l|=v;if(u=u.next,u===null){if(u=i.shared.pending,u===null)break;v=u,u=v.next,v.next=null,i.lastBaseUpdate=v,i.shared.pending=null}}while(!0);if(g===null&&(s=y),i.baseState=s,i.firstBaseUpdate=d,i.lastBaseUpdate=g,t=i.shared.interleaved,t!==null){i=t;do l|=i.lane,i=i.next;while(i!==t)}else o===null&&(i.shared.lanes=0);Ot|=l,e.lanes=l,e.memoizedState=y}}function xl(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!="function")throw Error(m(191,i));i.call(r)}}}var tr={},He=yt(tr),Bn=yt(tr),Vn=yt(tr);function kt(e){if(e===tr)throw Error(m(174));return e}function wa(e,t){switch(N(Vn,t),N(Bn,e),N(He,tr),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:so(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=so(t,e)}j(He),N(He,t)}function on(){j(He),j(Bn),j(Vn)}function hs(e){kt(Vn.current);var t=kt(He.current),n=so(t,e.type);t!==n&&(N(Bn,e),N(He,n))}function ka(e){Bn.current===e&&(j(He),j(Bn))}var F=yt(0);function Yr(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var $i=[];function qa(){for(var e=0;e<$i.length;e++)$i[e]._workInProgressVersionPrimary=null;$i.length=0}var xr=Ge.ReactCurrentDispatcher,Bi=Ge.ReactCurrentBatchConfig,xt=0,H=null,Q=null,G=null,Zr=!1,On=!1,Qn=0,ff=0;function ne(){throw Error(m(321))}function Ja(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Le(e[n],t[n]))return!1;return!0}function Ca(e,t,n,r,i,o){if(xt=o,H=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,xr.current=e===null||e.memoizedState===null?gf:Sf,e=n(r,i),On){o=0;do{if(On=!1,Qn=0,25<=o)throw Error(m(301));o+=1,G=Q=null,t.updateQueue=null,xr.current=mf,e=n(r,i)}while(On)}if(xr.current=br,t=Q!==null&&Q.next!==null,xt=0,G=Q=H=null,Zr=!1,t)throw Error(m(300));return e}function Ea(){var e=Qn!==0;return Qn=0,e}function ze(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return G===null?H.memoizedState=G=e:G=G.next=e,G}function Ee(){if(Q===null){var e=H.alternate;e=e!==null?e.memoizedState:null}else e=Q.next;var t=G===null?H.memoizedState:G.next;if(t!==null)G=t,Q=e;else{if(e===null)throw Error(m(310));Q=e,e={memoizedState:Q.memoizedState,baseState:Q.baseState,baseQueue:Q.baseQueue,queue:Q.queue,next:null},G===null?H.memoizedState=G=e:G=G.next=e}return G}function Xn(e,t){return typeof t=="function"?t(e):t}function Vi(e){var t=Ee(),n=t.queue;if(n===null)throw Error(m(311));n.lastRenderedReducer=e;var r=Q,i=r.baseQueue,o=n.pending;if(o!==null){if(i!==null){var l=i.next;i.next=o.next,o.next=l}r.baseQueue=i=o,n.pending=null}if(i!==null){o=i.next,r=r.baseState;var u=l=null,s=null,d=o;do{var g=d.lane;if((xt&g)===g)s!==null&&(s=s.next={lane:0,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null}),r=d.hasEagerState?d.eagerState:e(r,d.action);else{var y={lane:g,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null};s===null?(u=s=y,l=r):s=s.next=y,H.lanes|=g,Ot|=g}d=d.next}while(d!==null&&d!==o);s===null?l=r:s.next=u,Le(r,t.memoizedState)||(fe=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do o=i.lane,H.lanes|=o,Ot|=o,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Qi(e){var t=Ee(),n=t.queue;if(n===null)throw Error(m(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(i!==null){n.pending=null;var l=i=i.next;do o=e(o,l.action),l=l.next;while(l!==i);Le(o,t.memoizedState)||(fe=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function _s(){}function Rs(e,t){var n=H,r=Ee(),i=t(),o=!Le(r.memoizedState,i);if(o&&(r.memoizedState=i,fe=!0),r=r.queue,Ma(qs.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||G!==null&&G.memoizedState.tag&1){if(n.flags|=2048,Kn(9,ks.bind(null,n,r,i,t),void 0,null),Y===null)throw Error(m(349));xt&30||ws(n,t,i)}return i}function ws(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function ks(e,t,n,r){t.value=n,t.getSnapshot=r,Js(t)&&Cs(e)}function qs(e,t,n){return n(function(){Js(t)&&Cs(e)})}function Js(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Le(e,n)}catch{return!0}}function Cs(e){var t=Xe(e,1);t!==null&&Ne(t,e,1,-1)}function Ol(e){var t=ze();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Xn,lastRenderedState:e},t.queue=e,e=e.dispatch=yf.bind(null,H,e),[t.memoizedState,e]}function Kn(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Es(){return Ee().memoizedState}function Or(e,t,n,r){var i=ze();H.flags|=e,i.memoizedState=Kn(1|t,n,void 0,r===void 0?null:r)}function vi(e,t,n,r){var i=Ee();r=r===void 0?null:r;var o=void 0;if(Q!==null){var l=Q.memoizedState;if(o=l.destroy,r!==null&&Ja(r,l.deps)){i.memoizedState=Kn(t,n,o,r);return}}H.flags|=e,i.memoizedState=Kn(1|t,n,o,r)}function Tl(e,t){return Or(8390656,8,e,t)}function Ma(e,t){return vi(2048,8,e,t)}function Ms(e,t){return vi(4,2,e,t)}function xs(e,t){return vi(4,4,e,t)}function Os(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Ts(e,t,n){return n=n!=null?n.concat([e]):null,vi(4,4,Os.bind(null,t,e),n)}function xa(){}function Ps(e,t){var n=Ee();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Ja(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ds(e,t){var n=Ee();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Ja(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ns(e,t,n){return xt&21?(Le(n,t)||(n=Fu(),H.lanes|=n,Ot|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,fe=!0),e.memoizedState=n)}function pf(e,t){var n=D;D=n!==0&&4>n?n:4,e(!0);var r=Bi.transition;Bi.transition={};try{e(!1),t()}finally{D=n,Bi.transition=r}}function Ls(){return Ee().memoizedState}function vf(e,t,n){var r=ct(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},js(e))zs(t,n);else if(n=Ss(e,t,n,r),n!==null){var i=ue();Ne(n,e,r,i),Is(n,t,r)}}function yf(e,t,n){var r=ct(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(js(e))zs(t,i);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var l=t.lastRenderedState,u=o(l,n);if(i.hasEagerState=!0,i.eagerState=u,Le(u,l)){var s=t.interleaved;s===null?(i.next=i,_a(t)):(i.next=s.next,s.next=i),t.interleaved=i;return}}catch{}finally{}n=Ss(e,t,i,r),n!==null&&(i=ue(),Ne(n,e,r,i),Is(n,t,r))}}function js(e){var t=e.alternate;return e===H||t!==null&&t===H}function zs(e,t){On=Zr=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Is(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,aa(e,n)}}var br={readContext:Ce,useCallback:ne,useContext:ne,useEffect:ne,useImperativeHandle:ne,useInsertionEffect:ne,useLayoutEffect:ne,useMemo:ne,useReducer:ne,useRef:ne,useState:ne,useDebugValue:ne,useDeferredValue:ne,useTransition:ne,useMutableSource:ne,useSyncExternalStore:ne,useId:ne,unstable_isNewReconciler:!1},gf={readContext:Ce,useCallback:function(e,t){return ze().memoizedState=[e,t===void 0?null:t],e},useContext:Ce,useEffect:Tl,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Or(4194308,4,Os.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Or(4194308,4,e,t)},useInsertionEffect:function(e,t){return Or(4,2,e,t)},useMemo:function(e,t){var n=ze();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ze();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=vf.bind(null,H,e),[r.memoizedState,e]},useRef:function(e){var t=ze();return e={current:e},t.memoizedState=e},useState:Ol,useDebugValue:xa,useDeferredValue:function(e){return ze().memoizedState=e},useTransition:function(){var e=Ol(!1),t=e[0];return e=pf.bind(null,e[1]),ze().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=H,i=ze();if(I){if(n===void 0)throw Error(m(407));n=n()}else{if(n=t(),Y===null)throw Error(m(349));xt&30||ws(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,Tl(qs.bind(null,r,o,e),[e]),r.flags|=2048,Kn(9,ks.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=ze(),t=Y.identifierPrefix;if(I){var n=$e,r=We;n=(r&~(1<<32-De(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Qn++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=ff++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Sf={readContext:Ce,useCallback:Ps,useContext:Ce,useEffect:Ma,useImperativeHandle:Ts,useInsertionEffect:Ms,useLayoutEffect:xs,useMemo:Ds,useReducer:Vi,useRef:Es,useState:function(){return Vi(Xn)},useDebugValue:xa,useDeferredValue:function(e){var t=Ee();return Ns(t,Q.memoizedState,e)},useTransition:function(){var e=Vi(Xn)[0],t=Ee().memoizedState;return[e,t]},useMutableSource:_s,useSyncExternalStore:Rs,useId:Ls,unstable_isNewReconciler:!1},mf={readContext:Ce,useCallback:Ps,useContext:Ce,useEffect:Ma,useImperativeHandle:Ts,useInsertionEffect:Ms,useLayoutEffect:xs,useMemo:Ds,useReducer:Qi,useRef:Es,useState:function(){return Qi(Xn)},useDebugValue:xa,useDeferredValue:function(e){var t=Ee();return Q===null?t.memoizedState=e:Ns(t,Q.memoizedState,e)},useTransition:function(){var e=Qi(Xn)[0],t=Ee().memoizedState;return[e,t]},useMutableSource:_s,useSyncExternalStore:Rs,useId:Ls,unstable_isNewReconciler:!1};function Oe(e,t){if(e&&e.defaultProps){t=U({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function To(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:U({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var yi={isMounted:function(e){return(e=e._reactInternals)?Dt(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ue(),i=ct(e),o=Be(r,i);o.payload=t,n!=null&&(o.callback=n),t=ut(e,o,i),t!==null&&(Ne(t,e,i,r),Mr(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ue(),i=ct(e),o=Be(r,i);o.tag=1,o.payload=t,n!=null&&(o.callback=n),t=ut(e,o,i),t!==null&&(Ne(t,e,i,r),Mr(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ue(),r=ct(e),i=Be(n,r);i.tag=2,t!=null&&(i.callback=t),t=ut(e,i,r),t!==null&&(Ne(t,e,r,n),Mr(t,e,r))}};function Pl(e,t,n,r,i,o,l){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,o,l):t.prototype&&t.prototype.isPureReactComponent?!Un(n,r)||!Un(i,o):!0}function Fs(e,t,n){var r=!1,i=pt,o=t.contextType;return typeof o=="object"&&o!==null?o=Ce(o):(i=ve(t)?Et:ae.current,r=t.contextTypes,o=(r=r!=null)?tn(e,i):pt),t=new t(n,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=yi,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function Dl(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&yi.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},Ra(e);var o=t.contextType;typeof o=="object"&&o!==null?i.context=Ce(o):(o=ve(t)?Et:ae.current,i.context=tn(e,o)),i.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o=="function"&&(To(e,t,o,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&yi.enqueueReplaceState(i,i.state,null),Gr(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function an(e,t){try{var n="",r=t;do n+=Bc(r),r=r.return;while(r);var i=n}catch(o){i=`
Error generating stack: `+o.message+`
`+o.stack}return{value:e,source:t,stack:i,digest:null}}function Xi(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Do(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var hf=typeof WeakMap=="function"?WeakMap:Map;function Hs(e,t,n){n=Be(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ti||(ti=!0,Wo=r),Do(e,t)},n}function Us(e,t,n){n=Be(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){Do(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch=="function"&&(n.callback=function(){Do(e,t),typeof r!="function"&&(st===null?st=new Set([this]):st.add(this));var l=t.stack;this.componentDidCatch(t.value,{componentStack:l!==null?l:""})}),n}function Nl(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new hf;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Df.bind(null,e,t,n),t.then(e,e))}function Ll(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function jl(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=Be(-1,1),t.tag=2,ut(n,t,1))),n.lanes|=1),e)}var _f=Ge.ReactCurrentOwner,fe=!1;function le(e,t,n,r){t.child=e===null?gs(t,null,n,r):rn(t,e.child,n,r)}function zl(e,t,n,r,i){n=n.render;var o=t.ref;return Zt(t,i),r=Ca(e,t,n,r,o,i),n=Ea(),e!==null&&!fe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ke(e,t,i)):(I&&n&&va(t),t.flags|=1,le(e,t,r,i),t.child)}function Il(e,t,n,r,i){if(e===null){var o=n.type;return typeof o=="function"&&!za(o)&&o.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=o,As(e,t,o,r,i)):(e=Nr(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,!(e.lanes&i)){var l=o.memoizedProps;if(n=n.compare,n=n!==null?n:Un,n(l,r)&&e.ref===t.ref)return Ke(e,t,i)}return t.flags|=1,e=dt(o,r),e.ref=t.ref,e.return=t,t.child=e}function As(e,t,n,r,i){if(e!==null){var o=e.memoizedProps;if(Un(o,r)&&e.ref===t.ref)if(fe=!1,t.pendingProps=r=o,(e.lanes&i)!==0)e.flags&131072&&(fe=!0);else return t.lanes=e.lanes,Ke(e,t,i)}return No(e,t,n,r,i)}function Ws(e,t,n){var r=t.pendingProps,i=r.children,o=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},N(Vt,ge),ge|=n;else{if(!(n&1073741824))return e=o!==null?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,N(Vt,ge),ge|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=o!==null?o.baseLanes:n,N(Vt,ge),ge|=r}else o!==null?(r=o.baseLanes|n,t.memoizedState=null):r=n,N(Vt,ge),ge|=r;return le(e,t,i,n),t.child}function $s(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function No(e,t,n,r,i){var o=ve(n)?Et:ae.current;return o=tn(t,o),Zt(t,i),n=Ca(e,t,n,r,o,i),r=Ea(),e!==null&&!fe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Ke(e,t,i)):(I&&r&&va(t),t.flags|=1,le(e,t,n,i),t.child)}function Fl(e,t,n,r,i){if(ve(n)){var o=!0;Br(t)}else o=!1;if(Zt(t,i),t.stateNode===null)Tr(e,t),Fs(t,n,r),Po(t,n,r,i),r=!0;else if(e===null){var l=t.stateNode,u=t.memoizedProps;l.props=u;var s=l.context,d=n.contextType;typeof d=="object"&&d!==null?d=Ce(d):(d=ve(n)?Et:ae.current,d=tn(t,d));var g=n.getDerivedStateFromProps,y=typeof g=="function"||typeof l.getSnapshotBeforeUpdate=="function";y||typeof l.UNSAFE_componentWillReceiveProps!="function"&&typeof l.componentWillReceiveProps!="function"||(u!==r||s!==d)&&Dl(t,l,r,d),be=!1;var v=t.memoizedState;l.state=v,Gr(t,r,l,i),s=t.memoizedState,u!==r||v!==s||pe.current||be?(typeof g=="function"&&(To(t,n,g,r),s=t.memoizedState),(u=be||Pl(t,n,u,r,v,s,d))?(y||typeof l.UNSAFE_componentWillMount!="function"&&typeof l.componentWillMount!="function"||(typeof l.componentWillMount=="function"&&l.componentWillMount(),typeof l.UNSAFE_componentWillMount=="function"&&l.UNSAFE_componentWillMount()),typeof l.componentDidMount=="function"&&(t.flags|=4194308)):(typeof l.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=d,r=u):(typeof l.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,ms(e,t),u=t.memoizedProps,d=t.type===t.elementType?u:Oe(t.type,u),l.props=d,y=t.pendingProps,v=l.context,s=n.contextType,typeof s=="object"&&s!==null?s=Ce(s):(s=ve(n)?Et:ae.current,s=tn(t,s));var h=n.getDerivedStateFromProps;(g=typeof h=="function"||typeof l.getSnapshotBeforeUpdate=="function")||typeof l.UNSAFE_componentWillReceiveProps!="function"&&typeof l.componentWillReceiveProps!="function"||(u!==y||v!==s)&&Dl(t,l,r,s),be=!1,v=t.memoizedState,l.state=v,Gr(t,r,l,i);var _=t.memoizedState;u!==y||v!==_||pe.current||be?(typeof h=="function"&&(To(t,n,h,r),_=t.memoizedState),(d=be||Pl(t,n,d,r,v,_,s)||!1)?(g||typeof l.UNSAFE_componentWillUpdate!="function"&&typeof l.componentWillUpdate!="function"||(typeof l.componentWillUpdate=="function"&&l.componentWillUpdate(r,_,s),typeof l.UNSAFE_componentWillUpdate=="function"&&l.UNSAFE_componentWillUpdate(r,_,s)),typeof l.componentDidUpdate=="function"&&(t.flags|=4),typeof l.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof l.componentDidUpdate!="function"||u===e.memoizedProps&&v===e.memoizedState||(t.flags|=4),typeof l.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&v===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=_),l.props=r,l.state=_,l.context=s,r=d):(typeof l.componentDidUpdate!="function"||u===e.memoizedProps&&v===e.memoizedState||(t.flags|=4),typeof l.getSnapshotBeforeUpdate!="function"||u===e.memoizedProps&&v===e.memoizedState||(t.flags|=1024),r=!1)}return Lo(e,t,n,r,o,i)}function Lo(e,t,n,r,i,o){$s(e,t);var l=(t.flags&128)!==0;if(!r&&!l)return i&&ql(t,n,!1),Ke(e,t,o);r=t.stateNode,_f.current=t;var u=l&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&l?(t.child=rn(t,e.child,null,o),t.child=rn(t,null,u,o)):le(e,t,u,o),t.memoizedState=r.state,i&&ql(t,n,!0),t.child}function Bs(e){var t=e.stateNode;t.pendingContext?kl(e,t.pendingContext,t.pendingContext!==t.context):t.context&&kl(e,t.context,!1),wa(e,t.containerInfo)}function Hl(e,t,n,r,i){return nn(),ga(i),t.flags|=256,le(e,t,n,r),t.child}var jo={dehydrated:null,treeContext:null,retryLane:0};function zo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Vs(e,t,n){var r=t.pendingProps,i=F.current,o=!1,l=(t.flags&128)!==0,u;if((u=l)||(u=e!==null&&e.memoizedState===null?!1:(i&2)!==0),u?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),N(F,i&1),e===null)return xo(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=r.children,e=r.fallback,o?(r=t.mode,o=t.child,l={mode:"hidden",children:l},!(r&1)&&o!==null?(o.childLanes=0,o.pendingProps=l):o=mi(l,r,0,null),e=Ct(e,r,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=zo(n),t.memoizedState=jo,e):Oa(t,l));if(i=e.memoizedState,i!==null&&(u=i.dehydrated,u!==null))return Rf(e,t,l,r,u,i,n);if(o){o=r.fallback,l=t.mode,i=e.child,u=i.sibling;var s={mode:"hidden",children:r.children};return!(l&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=s,t.deletions=null):(r=dt(i,s),r.subtreeFlags=i.subtreeFlags&14680064),u!==null?o=dt(u,o):(o=Ct(o,l,n,null),o.flags|=2),o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,l=e.child.memoizedState,l=l===null?zo(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=e.childLanes&~n,t.memoizedState=jo,r}return o=e.child,e=o.sibling,r=dt(o,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Oa(e,t){return t=mi({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Sr(e,t,n,r){return r!==null&&ga(r),rn(t,e.child,null,n),e=Oa(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Rf(e,t,n,r,i,o,l){if(n)return t.flags&256?(t.flags&=-257,r=Xi(Error(m(422))),Sr(e,t,l,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=mi({mode:"visible",children:r.children},i,0,null),o=Ct(o,i,l,null),o.flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,t.mode&1&&rn(t,e.child,null,l),t.child.memoizedState=zo(l),t.memoizedState=jo,o);if(!(t.mode&1))return Sr(e,t,l,null);if(i.data==="$!"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var u=r.dgst;return r=u,o=Error(m(419)),r=Xi(o,r,void 0),Sr(e,t,l,r)}if(u=(l&e.childLanes)!==0,fe||u){if(r=Y,r!==null){switch(l&-l){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|l)?0:i,i!==0&&i!==o.retryLane&&(o.retryLane=i,Xe(e,i),Ne(r,e,i,-1))}return ja(),r=Xi(Error(m(421))),Sr(e,t,l,r)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=Nf.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,Se=lt(i.nextSibling),me=t,I=!0,Pe=null,e!==null&&(we[ke++]=We,we[ke++]=$e,we[ke++]=Mt,We=e.id,$e=e.overflow,Mt=t),t=Oa(t,r.children),t.flags|=4096,t)}function Ul(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Oo(e.return,t,n)}function Ki(e,t,n,r,i){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function Qs(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(le(e,t,r.children,n),r=F.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Ul(e,n,t);else if(e.tag===19)Ul(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(N(F,r),!(t.mode&1))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&Yr(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ki(t,!1,i,n,o);break;case"backwards":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&Yr(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ki(t,!0,n,null,o);break;case"together":Ki(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Tr(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Ke(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Ot|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(m(153));if(t.child!==null){for(e=t.child,n=dt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=dt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function wf(e,t,n){switch(t.tag){case 3:Bs(t),nn();break;case 5:hs(t);break;case 1:ve(t.type)&&Br(t);break;case 4:wa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;N(Xr,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(N(F,F.current&1),t.flags|=128,null):n&t.child.childLanes?Vs(e,t,n):(N(F,F.current&1),e=Ke(e,t,n),e!==null?e.sibling:null);N(F,F.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return Qs(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),N(F,F.current),r)break;return null;case 22:case 23:return t.lanes=0,Ws(e,t,n)}return Ke(e,t,n)}var Xs,Io,Ks,Gs;Xs=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Io=function(){};Ks=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,kt(He.current);var o=null;switch(n){case"input":i=oo(e,i),r=oo(e,r),o=[];break;case"select":i=U({},i,{value:void 0}),r=U({},r,{value:void 0}),o=[];break;case"textarea":i=uo(e,i),r=uo(e,r),o=[];break;default:typeof i.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Wr)}co(n,r);var l;n=null;for(d in i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&i[d]!=null)if(d==="style"){var u=i[d];for(l in u)u.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else d!=="dangerouslySetInnerHTML"&&d!=="children"&&d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&d!=="autoFocus"&&(Nn.hasOwnProperty(d)?o||(o=[]):(o=o||[]).push(d,null));for(d in r){var s=r[d];if(u=i!=null?i[d]:void 0,r.hasOwnProperty(d)&&s!==u&&(s!=null||u!=null))if(d==="style")if(u){for(l in u)!u.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&u[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(o||(o=[]),o.push(d,n)),n=s;else d==="dangerouslySetInnerHTML"?(s=s?s.__html:void 0,u=u?u.__html:void 0,s!=null&&u!==s&&(o=o||[]).push(d,s)):d==="children"?typeof s!="string"&&typeof s!="number"||(o=o||[]).push(d,""+s):d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&(Nn.hasOwnProperty(d)?(s!=null&&d==="onScroll"&&L("scroll",e),o||u===s||(o=[])):(o=o||[]).push(d,s))}n&&(o=o||[]).push("style",n);var d=o;(t.updateQueue=d)&&(t.flags|=4)}};Gs=function(e,t,n,r){n!==r&&(t.flags|=4)};function hn(e,t){if(!I)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function re(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function kf(e,t,n){var r=t.pendingProps;switch(ya(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return re(t),null;case 1:return ve(t.type)&&$r(),re(t),null;case 3:return r=t.stateNode,on(),j(pe),j(ae),qa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(yr(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Pe!==null&&(Vo(Pe),Pe=null))),Io(e,t),re(t),null;case 5:ka(t);var i=kt(Vn.current);if(n=t.type,e!==null&&t.stateNode!=null)Ks(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(m(166));return re(t),null}if(e=kt(He.current),yr(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[Ie]=t,r[$n]=o,e=(t.mode&1)!==0,n){case"dialog":L("cancel",r),L("close",r);break;case"iframe":case"object":case"embed":L("load",r);break;case"video":case"audio":for(i=0;i<qn.length;i++)L(qn[i],r);break;case"source":L("error",r);break;case"img":case"image":case"link":L("error",r),L("load",r);break;case"details":L("toggle",r);break;case"input":Ga(r,o),L("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},L("invalid",r);break;case"textarea":Za(r,o),L("invalid",r)}co(n,o),i=null;for(var l in o)if(o.hasOwnProperty(l)){var u=o[l];l==="children"?typeof u=="string"?r.textContent!==u&&(o.suppressHydrationWarning!==!0&&vr(r.textContent,u,e),i=["children",u]):typeof u=="number"&&r.textContent!==""+u&&(o.suppressHydrationWarning!==!0&&vr(r.textContent,u,e),i=["children",""+u]):Nn.hasOwnProperty(l)&&u!=null&&l==="onScroll"&&L("scroll",r)}switch(n){case"input":ar(r),Ya(r,o,!0);break;case"textarea":ar(r),ba(r);break;case"select":case"option":break;default:typeof o.onClick=="function"&&(r.onclick=Wr)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{l=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=qu(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=l.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),n==="select"&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Ie]=t,e[$n]=r,Xs(e,t,!1,!1),t.stateNode=e;e:{switch(l=fo(n,r),n){case"dialog":L("cancel",e),L("close",e),i=r;break;case"iframe":case"object":case"embed":L("load",e),i=r;break;case"video":case"audio":for(i=0;i<qn.length;i++)L(qn[i],e);i=r;break;case"source":L("error",e),i=r;break;case"img":case"image":case"link":L("error",e),L("load",e),i=r;break;case"details":L("toggle",e),i=r;break;case"input":Ga(e,r),i=oo(e,r),L("invalid",e);break;case"option":i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=U({},r,{value:void 0}),L("invalid",e);break;case"textarea":Za(e,r),i=uo(e,r),L("invalid",e);break;default:i=r}co(n,i),u=i;for(o in u)if(u.hasOwnProperty(o)){var s=u[o];o==="style"?Eu(e,s):o==="dangerouslySetInnerHTML"?(s=s?s.__html:void 0,s!=null&&Ju(e,s)):o==="children"?typeof s=="string"?(n!=="textarea"||s!=="")&&Ln(e,s):typeof s=="number"&&Ln(e,""+s):o!=="suppressContentEditableWarning"&&o!=="suppressHydrationWarning"&&o!=="autoFocus"&&(Nn.hasOwnProperty(o)?s!=null&&o==="onScroll"&&L("scroll",e):s!=null&&ea(e,o,s,l))}switch(n){case"input":ar(e),Ya(e,r,!1);break;case"textarea":ar(e),ba(e);break;case"option":r.value!=null&&e.setAttribute("value",""+ft(r.value));break;case"select":e.multiple=!!r.multiple,o=r.value,o!=null?Xt(e,!!r.multiple,o,!1):r.defaultValue!=null&&Xt(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=Wr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return re(t),null;case 6:if(e&&t.stateNode!=null)Gs(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(m(166));if(n=kt(Vn.current),kt(He.current),yr(t)){if(r=t.stateNode,n=t.memoizedProps,r[Ie]=t,(o=r.nodeValue!==n)&&(e=me,e!==null))switch(e.tag){case 3:vr(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&vr(r.nodeValue,n,(e.mode&1)!==0)}o&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Ie]=t,t.stateNode=r}return re(t),null;case 13:if(j(F),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(I&&Se!==null&&t.mode&1&&!(t.flags&128))vs(),nn(),t.flags|=98560,o=!1;else if(o=yr(t),r!==null&&r.dehydrated!==null){if(e===null){if(!o)throw Error(m(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(m(317));o[Ie]=t}else nn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;re(t),o=!1}else Pe!==null&&(Vo(Pe),Pe=null),o=!0;if(!o)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||F.current&1?X===0&&(X=3):ja())),t.updateQueue!==null&&(t.flags|=4),re(t),null);case 4:return on(),Io(e,t),e===null&&An(t.stateNode.containerInfo),re(t),null;case 10:return ha(t.type._context),re(t),null;case 17:return ve(t.type)&&$r(),re(t),null;case 19:if(j(F),o=t.memoizedState,o===null)return re(t),null;if(r=(t.flags&128)!==0,l=o.rendering,l===null)if(r)hn(o,!1);else{if(X!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(l=Yr(e),l!==null){for(t.flags|=128,hn(o,!1),r=l.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)o=n,e=r,o.flags&=14680066,l=o.alternate,l===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return N(F,F.current&1|2),t.child}e=e.sibling}o.tail!==null&&B()>ln&&(t.flags|=128,r=!0,hn(o,!1),t.lanes=4194304)}else{if(!r)if(e=Yr(l),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),hn(o,!0),o.tail===null&&o.tailMode==="hidden"&&!l.alternate&&!I)return re(t),null}else 2*B()-o.renderingStartTime>ln&&n!==1073741824&&(t.flags|=128,r=!0,hn(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(n=o.last,n!==null?n.sibling=l:t.child=l,o.last=l)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=B(),t.sibling=null,n=F.current,N(F,r?n&1|2:n&1),t):(re(t),null);case 22:case 23:return La(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?ge&1073741824&&(re(t),t.subtreeFlags&6&&(t.flags|=8192)):re(t),null;case 24:return null;case 25:return null}throw Error(m(156,t.tag))}function qf(e,t){switch(ya(t),t.tag){case 1:return ve(t.type)&&$r(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return on(),j(pe),j(ae),qa(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return ka(t),null;case 13:if(j(F),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(m(340));nn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return j(F),null;case 4:return on(),null;case 10:return ha(t.type._context),null;case 22:case 23:return La(),null;case 24:return null;default:return null}}var mr=!1,oe=!1,Jf=typeof WeakSet=="function"?WeakSet:Set,w=null;function Bt(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){A(e,t,r)}else n.current=null}function Fo(e,t,n){try{n()}catch(r){A(e,t,r)}}var Al=!1;function Cf(e,t){if(wo=Hr,e=ts(),pa(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch{n=null;break e}var l=0,u=-1,s=-1,d=0,g=0,y=e,v=null;t:for(;;){for(var h;y!==n||i!==0&&y.nodeType!==3||(u=l+i),y!==o||r!==0&&y.nodeType!==3||(s=l+r),y.nodeType===3&&(l+=y.nodeValue.length),(h=y.firstChild)!==null;)v=y,y=h;for(;;){if(y===e)break t;if(v===n&&++d===i&&(u=l),v===o&&++g===r&&(s=l),(h=y.nextSibling)!==null)break;y=v,v=y.parentNode}y=h}n=u===-1||s===-1?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ko={focusedElem:e,selectionRange:n},Hr=!1,w=t;w!==null;)if(t=w,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,w=e;else for(;w!==null;){t=w;try{var _=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(_!==null){var R=_.memoizedProps,z=_.memoizedState,f=t.stateNode,c=f.getSnapshotBeforeUpdate(t.elementType===t.type?R:Oe(t.type,R),z);f.__reactInternalSnapshotBeforeUpdate=c}break;case 3:var p=t.stateNode.containerInfo;p.nodeType===1?p.textContent="":p.nodeType===9&&p.documentElement&&p.removeChild(p.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(m(163))}}catch(S){A(t,t.return,S)}if(e=t.sibling,e!==null){e.return=t.return,w=e;break}w=t.return}return _=Al,Al=!1,_}function Tn(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,o!==void 0&&Fo(t,n,o)}i=i.next}while(i!==r)}}function gi(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ho(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function Ys(e){var t=e.alternate;t!==null&&(e.alternate=null,Ys(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Ie],delete t[$n],delete t[Co],delete t[uf],delete t[sf])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Zs(e){return e.tag===5||e.tag===3||e.tag===4}function Wl(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Zs(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Uo(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Wr));else if(r!==4&&(e=e.child,e!==null))for(Uo(e,t,n),e=e.sibling;e!==null;)Uo(e,t,n),e=e.sibling}function Ao(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Ao(e,t,n),e=e.sibling;e!==null;)Ao(e,t,n),e=e.sibling}var b=null,Te=!1;function Ye(e,t,n){for(n=n.child;n!==null;)bs(e,t,n),n=n.sibling}function bs(e,t,n){if(Fe&&typeof Fe.onCommitFiberUnmount=="function")try{Fe.onCommitFiberUnmount(ui,n)}catch{}switch(n.tag){case 5:oe||Bt(n,t);case 6:var r=b,i=Te;b=null,Ye(e,t,n),b=r,Te=i,b!==null&&(Te?(e=b,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):b.removeChild(n.stateNode));break;case 18:b!==null&&(Te?(e=b,n=n.stateNode,e.nodeType===8?Ai(e.parentNode,n):e.nodeType===1&&Ai(e,n),Fn(e)):Ai(b,n.stateNode));break;case 4:r=b,i=Te,b=n.stateNode.containerInfo,Te=!0,Ye(e,t,n),b=r,Te=i;break;case 0:case 11:case 14:case 15:if(!oe&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var o=i,l=o.destroy;o=o.tag,l!==void 0&&(o&2||o&4)&&Fo(n,t,l),i=i.next}while(i!==r)}Ye(e,t,n);break;case 1:if(!oe&&(Bt(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(u){A(n,t,u)}Ye(e,t,n);break;case 21:Ye(e,t,n);break;case 22:n.mode&1?(oe=(r=oe)||n.memoizedState!==null,Ye(e,t,n),oe=r):Ye(e,t,n);break;default:Ye(e,t,n)}}function $l(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new Jf),t.forEach(function(r){var i=Lf.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function xe(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,l=t,u=l;e:for(;u!==null;){switch(u.tag){case 5:b=u.stateNode,Te=!1;break e;case 3:b=u.stateNode.containerInfo,Te=!0;break e;case 4:b=u.stateNode.containerInfo,Te=!0;break e}u=u.return}if(b===null)throw Error(m(160));bs(o,l,i),b=null,Te=!1;var s=i.alternate;s!==null&&(s.return=null),i.return=null}catch(d){A(i,t,d)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)ec(t,e),t=t.sibling}function ec(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(xe(t,e),je(e),r&4){try{Tn(3,e,e.return),gi(3,e)}catch(R){A(e,e.return,R)}try{Tn(5,e,e.return)}catch(R){A(e,e.return,R)}}break;case 1:xe(t,e),je(e),r&512&&n!==null&&Bt(n,n.return);break;case 5:if(xe(t,e),je(e),r&512&&n!==null&&Bt(n,n.return),e.flags&32){var i=e.stateNode;try{Ln(i,"")}catch(R){A(e,e.return,R)}}if(r&4&&(i=e.stateNode,i!=null)){var o=e.memoizedProps,l=n!==null?n.memoizedProps:o,u=e.type,s=e.updateQueue;if(e.updateQueue=null,s!==null)try{u==="input"&&o.type==="radio"&&o.name!=null&&wu(i,o),fo(u,l);var d=fo(u,o);for(l=0;l<s.length;l+=2){var g=s[l],y=s[l+1];g==="style"?Eu(i,y):g==="dangerouslySetInnerHTML"?Ju(i,y):g==="children"?Ln(i,y):ea(i,g,y,d)}switch(u){case"input":ao(i,o);break;case"textarea":ku(i,o);break;case"select":var v=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var h=o.value;h!=null?Xt(i,!!o.multiple,h,!1):v!==!!o.multiple&&(o.defaultValue!=null?Xt(i,!!o.multiple,o.defaultValue,!0):Xt(i,!!o.multiple,o.multiple?[]:"",!1))}i[$n]=o}catch(R){A(e,e.return,R)}}break;case 6:if(xe(t,e),je(e),r&4){if(e.stateNode===null)throw Error(m(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(R){A(e,e.return,R)}}break;case 3:if(xe(t,e),je(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Fn(t.containerInfo)}catch(R){A(e,e.return,R)}break;case 4:xe(t,e),je(e);break;case 13:xe(t,e),je(e),i=e.child,i.flags&8192&&(o=i.memoizedState!==null,i.stateNode.isHidden=o,!o||i.alternate!==null&&i.alternate.memoizedState!==null||(Da=B())),r&4&&$l(e);break;case 22:if(g=n!==null&&n.memoizedState!==null,e.mode&1?(oe=(d=oe)||g,xe(t,e),oe=d):xe(t,e),je(e),r&8192){if(d=e.memoizedState!==null,(e.stateNode.isHidden=d)&&!g&&e.mode&1)for(w=e,g=e.child;g!==null;){for(y=w=g;w!==null;){switch(v=w,h=v.child,v.tag){case 0:case 11:case 14:case 15:Tn(4,v,v.return);break;case 1:Bt(v,v.return);var _=v.stateNode;if(typeof _.componentWillUnmount=="function"){r=v,n=v.return;try{t=r,_.props=t.memoizedProps,_.state=t.memoizedState,_.componentWillUnmount()}catch(R){A(r,n,R)}}break;case 5:Bt(v,v.return);break;case 22:if(v.memoizedState!==null){Vl(y);continue}}h!==null?(h.return=v,w=h):Vl(y)}g=g.sibling}e:for(g=null,y=e;;){if(y.tag===5){if(g===null){g=y;try{i=y.stateNode,d?(o=i.style,typeof o.setProperty=="function"?o.setProperty("display","none","important"):o.display="none"):(u=y.stateNode,s=y.memoizedProps.style,l=s!=null&&s.hasOwnProperty("display")?s.display:null,u.style.display=Cu("display",l))}catch(R){A(e,e.return,R)}}}else if(y.tag===6){if(g===null)try{y.stateNode.nodeValue=d?"":y.memoizedProps}catch(R){A(e,e.return,R)}}else if((y.tag!==22&&y.tag!==23||y.memoizedState===null||y===e)&&y.child!==null){y.child.return=y,y=y.child;continue}if(y===e)break e;for(;y.sibling===null;){if(y.return===null||y.return===e)break e;g===y&&(g=null),y=y.return}g===y&&(g=null),y.sibling.return=y.return,y=y.sibling}}break;case 19:xe(t,e),je(e),r&4&&$l(e);break;case 21:break;default:xe(t,e),je(e)}}function je(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Zs(n)){var r=n;break e}n=n.return}throw Error(m(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(Ln(i,""),r.flags&=-33);var o=Wl(e);Ao(e,o,i);break;case 3:case 4:var l=r.stateNode.containerInfo,u=Wl(e);Uo(e,u,l);break;default:throw Error(m(161))}}catch(s){A(e,e.return,s)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Ef(e,t,n){w=e,tc(e)}function tc(e,t,n){for(var r=(e.mode&1)!==0;w!==null;){var i=w,o=i.child;if(i.tag===22&&r){var l=i.memoizedState!==null||mr;if(!l){var u=i.alternate,s=u!==null&&u.memoizedState!==null||oe;u=mr;var d=oe;if(mr=l,(oe=s)&&!d)for(w=i;w!==null;)l=w,s=l.child,l.tag===22&&l.memoizedState!==null?Ql(i):s!==null?(s.return=l,w=s):Ql(i);for(;o!==null;)w=o,tc(o),o=o.sibling;w=i,mr=u,oe=d}Bl(e)}else i.subtreeFlags&8772&&o!==null?(o.return=i,w=o):Bl(e)}}function Bl(e){for(;w!==null;){var t=w;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:oe||gi(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!oe)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:Oe(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&xl(t,o,r);break;case 3:var l=t.updateQueue;if(l!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}xl(t,l,n)}break;case 5:var u=t.stateNode;if(n===null&&t.flags&4){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var d=t.alternate;if(d!==null){var g=d.memoizedState;if(g!==null){var y=g.dehydrated;y!==null&&Fn(y)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(m(163))}oe||t.flags&512&&Ho(t)}catch(v){A(t,t.return,v)}}if(t===e){w=null;break}if(n=t.sibling,n!==null){n.return=t.return,w=n;break}w=t.return}}function Vl(e){for(;w!==null;){var t=w;if(t===e){w=null;break}var n=t.sibling;if(n!==null){n.return=t.return,w=n;break}w=t.return}}function Ql(e){for(;w!==null;){var t=w;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{gi(4,t)}catch(s){A(t,n,s)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var i=t.return;try{r.componentDidMount()}catch(s){A(t,i,s)}}var o=t.return;try{Ho(t)}catch(s){A(t,o,s)}break;case 5:var l=t.return;try{Ho(t)}catch(s){A(t,l,s)}}}catch(s){A(t,t.return,s)}if(t===e){w=null;break}var u=t.sibling;if(u!==null){u.return=t.return,w=u;break}w=t.return}}var Mf=Math.ceil,ei=Ge.ReactCurrentDispatcher,Ta=Ge.ReactCurrentOwner,Je=Ge.ReactCurrentBatchConfig,P=0,Y=null,V=null,ee=0,ge=0,Vt=yt(0),X=0,Gn=null,Ot=0,Si=0,Pa=0,Pn=null,de=null,Da=0,ln=1/0,Ue=null,ti=!1,Wo=null,st=null,hr=!1,rt=null,ni=0,Dn=0,$o=null,Pr=-1,Dr=0;function ue(){return P&6?B():Pr!==-1?Pr:Pr=B()}function ct(e){return e.mode&1?P&2&&ee!==0?ee&-ee:df.transition!==null?(Dr===0&&(Dr=Fu()),Dr):(e=D,e!==0||(e=window.event,e=e===void 0?16:Vu(e.type)),e):1}function Ne(e,t,n,r){if(50<Dn)throw Dn=0,$o=null,Error(m(185));Zn(e,n,r),(!(P&2)||e!==Y)&&(e===Y&&(!(P&2)&&(Si|=n),X===4&&tt(e,ee)),ye(e,r),n===1&&P===0&&!(t.mode&1)&&(ln=B()+500,pi&&gt()))}function ye(e,t){var n=e.callbackNode;cd(e,t);var r=Fr(e,e===Y?ee:0);if(r===0)n!==null&&nl(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&nl(n),t===1)e.tag===0?cf(Xl.bind(null,e)):ds(Xl.bind(null,e)),af(function(){!(P&6)&&gt()}),n=null;else{switch(Hu(r)){case 1:n=oa;break;case 4:n=zu;break;case 16:n=Ir;break;case 536870912:n=Iu;break;default:n=Ir}n=sc(n,nc.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function nc(e,t){if(Pr=-1,Dr=0,P&6)throw Error(m(327));var n=e.callbackNode;if(bt()&&e.callbackNode!==n)return null;var r=Fr(e,e===Y?ee:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=ri(e,r);else{t=r;var i=P;P|=2;var o=ic();(Y!==e||ee!==t)&&(Ue=null,ln=B()+500,Jt(e,t));do try{Tf();break}catch(u){rc(e,u)}while(!0);ma(),ei.current=o,P=i,V!==null?t=0:(Y=null,ee=0,t=X)}if(t!==0){if(t===2&&(i=So(e),i!==0&&(r=i,t=Bo(e,i))),t===1)throw n=Gn,Jt(e,0),tt(e,r),ye(e,B()),n;if(t===6)tt(e,r);else{if(i=e.current.alternate,!(r&30)&&!xf(i)&&(t=ri(e,r),t===2&&(o=So(e),o!==0&&(r=o,t=Bo(e,o))),t===1))throw n=Gn,Jt(e,0),tt(e,r),ye(e,B()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(m(345));case 2:_t(e,de,Ue);break;case 3:if(tt(e,r),(r&130023424)===r&&(t=Da+500-B(),10<t)){if(Fr(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){ue(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Jo(_t.bind(null,e,de,Ue),t);break}_t(e,de,Ue);break;case 4:if(tt(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var l=31-De(r);o=1<<l,l=t[l],l>i&&(i=l),r&=~o}if(r=i,r=B()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Mf(r/1960))-r,10<r){e.timeoutHandle=Jo(_t.bind(null,e,de,Ue),r);break}_t(e,de,Ue);break;case 5:_t(e,de,Ue);break;default:throw Error(m(329))}}}return ye(e,B()),e.callbackNode===n?nc.bind(null,e):null}function Bo(e,t){var n=Pn;return e.current.memoizedState.isDehydrated&&(Jt(e,t).flags|=256),e=ri(e,t),e!==2&&(t=de,de=n,t!==null&&Vo(t)),e}function Vo(e){de===null?de=e:de.push.apply(de,e)}function xf(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!Le(o(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function tt(e,t){for(t&=~Pa,t&=~Si,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-De(t),r=1<<n;e[n]=-1,t&=~r}}function Xl(e){if(P&6)throw Error(m(327));bt();var t=Fr(e,0);if(!(t&1))return ye(e,B()),null;var n=ri(e,t);if(e.tag!==0&&n===2){var r=So(e);r!==0&&(t=r,n=Bo(e,r))}if(n===1)throw n=Gn,Jt(e,0),tt(e,t),ye(e,B()),n;if(n===6)throw Error(m(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,_t(e,de,Ue),ye(e,B()),null}function Na(e,t){var n=P;P|=1;try{return e(t)}finally{P=n,P===0&&(ln=B()+500,pi&&gt())}}function Tt(e){rt!==null&&rt.tag===0&&!(P&6)&&bt();var t=P;P|=1;var n=Je.transition,r=D;try{if(Je.transition=null,D=1,e)return e()}finally{D=r,Je.transition=n,P=t,!(P&6)&&gt()}}function La(){ge=Vt.current,j(Vt)}function Jt(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,of(n)),V!==null)for(n=V.return;n!==null;){var r=n;switch(ya(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&$r();break;case 3:on(),j(pe),j(ae),qa();break;case 5:ka(r);break;case 4:on();break;case 13:j(F);break;case 19:j(F);break;case 10:ha(r.type._context);break;case 22:case 23:La()}n=n.return}if(Y=e,V=e=dt(e.current,null),ee=ge=t,X=0,Gn=null,Pa=Si=Ot=0,de=Pn=null,wt!==null){for(t=0;t<wt.length;t++)if(n=wt[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,o=n.pending;if(o!==null){var l=o.next;o.next=i,r.next=l}n.pending=r}wt=null}return e}function rc(e,t){do{var n=V;try{if(ma(),xr.current=br,Zr){for(var r=H.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}Zr=!1}if(xt=0,G=Q=H=null,On=!1,Qn=0,Ta.current=null,n===null||n.return===null){X=1,Gn=t,V=null;break}e:{var o=e,l=n.return,u=n,s=t;if(t=ee,u.flags|=32768,s!==null&&typeof s=="object"&&typeof s.then=="function"){var d=s,g=u,y=g.tag;if(!(g.mode&1)&&(y===0||y===11||y===15)){var v=g.alternate;v?(g.updateQueue=v.updateQueue,g.memoizedState=v.memoizedState,g.lanes=v.lanes):(g.updateQueue=null,g.memoizedState=null)}var h=Ll(l);if(h!==null){h.flags&=-257,jl(h,l,u,o,t),h.mode&1&&Nl(o,d,t),t=h,s=d;var _=t.updateQueue;if(_===null){var R=new Set;R.add(s),t.updateQueue=R}else _.add(s);break e}else{if(!(t&1)){Nl(o,d,t),ja();break e}s=Error(m(426))}}else if(I&&u.mode&1){var z=Ll(l);if(z!==null){!(z.flags&65536)&&(z.flags|=256),jl(z,l,u,o,t),ga(an(s,u));break e}}o=s=an(s,u),X!==4&&(X=2),Pn===null?Pn=[o]:Pn.push(o),o=l;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var f=Hs(o,s,t);Ml(o,f);break e;case 1:u=s;var c=o.type,p=o.stateNode;if(!(o.flags&128)&&(typeof c.getDerivedStateFromError=="function"||p!==null&&typeof p.componentDidCatch=="function"&&(st===null||!st.has(p)))){o.flags|=65536,t&=-t,o.lanes|=t;var S=Us(o,u,t);Ml(o,S);break e}}o=o.return}while(o!==null)}ac(n)}catch(k){t=k,V===n&&n!==null&&(V=n=n.return);continue}break}while(!0)}function ic(){var e=ei.current;return ei.current=br,e===null?br:e}function ja(){(X===0||X===3||X===2)&&(X=4),Y===null||!(Ot&268435455)&&!(Si&268435455)||tt(Y,ee)}function ri(e,t){var n=P;P|=2;var r=ic();(Y!==e||ee!==t)&&(Ue=null,Jt(e,t));do try{Of();break}catch(i){rc(e,i)}while(!0);if(ma(),P=n,ei.current=r,V!==null)throw Error(m(261));return Y=null,ee=0,X}function Of(){for(;V!==null;)oc(V)}function Tf(){for(;V!==null&&!td();)oc(V)}function oc(e){var t=uc(e.alternate,e,ge);e.memoizedProps=e.pendingProps,t===null?ac(e):V=t,Ta.current=null}function ac(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=qf(n,t),n!==null){n.flags&=32767,V=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{X=6,V=null;return}}else if(n=kf(n,t,ge),n!==null){V=n;return}if(t=t.sibling,t!==null){V=t;return}V=t=e}while(t!==null);X===0&&(X=5)}function _t(e,t,n){var r=D,i=Je.transition;try{Je.transition=null,D=1,Pf(e,t,n,r)}finally{Je.transition=i,D=r}return null}function Pf(e,t,n,r){do bt();while(rt!==null);if(P&6)throw Error(m(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(m(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(dd(e,o),e===Y&&(V=Y=null,ee=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||hr||(hr=!0,sc(Ir,function(){return bt(),null})),o=(n.flags&15990)!==0,n.subtreeFlags&15990||o){o=Je.transition,Je.transition=null;var l=D;D=1;var u=P;P|=4,Ta.current=null,Cf(e,n),ec(n,e),Yd(ko),Hr=!!wo,ko=wo=null,e.current=n,Ef(n),nd(),P=u,D=l,Je.transition=o}else e.current=n;if(hr&&(hr=!1,rt=e,ni=i),o=e.pendingLanes,o===0&&(st=null),od(n.stateNode),ye(e,B()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(ti)throw ti=!1,e=Wo,Wo=null,e;return ni&1&&e.tag!==0&&bt(),o=e.pendingLanes,o&1?e===$o?Dn++:(Dn=0,$o=e):Dn=0,gt(),null}function bt(){if(rt!==null){var e=Hu(ni),t=Je.transition,n=D;try{if(Je.transition=null,D=16>e?16:e,rt===null)var r=!1;else{if(e=rt,rt=null,ni=0,P&6)throw Error(m(331));var i=P;for(P|=4,w=e.current;w!==null;){var o=w,l=o.child;if(w.flags&16){var u=o.deletions;if(u!==null){for(var s=0;s<u.length;s++){var d=u[s];for(w=d;w!==null;){var g=w;switch(g.tag){case 0:case 11:case 15:Tn(8,g,o)}var y=g.child;if(y!==null)y.return=g,w=y;else for(;w!==null;){g=w;var v=g.sibling,h=g.return;if(Ys(g),g===d){w=null;break}if(v!==null){v.return=h,w=v;break}w=h}}}var _=o.alternate;if(_!==null){var R=_.child;if(R!==null){_.child=null;do{var z=R.sibling;R.sibling=null,R=z}while(R!==null)}}w=o}}if(o.subtreeFlags&2064&&l!==null)l.return=o,w=l;else e:for(;w!==null;){if(o=w,o.flags&2048)switch(o.tag){case 0:case 11:case 15:Tn(9,o,o.return)}var f=o.sibling;if(f!==null){f.return=o.return,w=f;break e}w=o.return}}var c=e.current;for(w=c;w!==null;){l=w;var p=l.child;if(l.subtreeFlags&2064&&p!==null)p.return=l,w=p;else e:for(l=c;w!==null;){if(u=w,u.flags&2048)try{switch(u.tag){case 0:case 11:case 15:gi(9,u)}}catch(k){A(u,u.return,k)}if(u===l){w=null;break e}var S=u.sibling;if(S!==null){S.return=u.return,w=S;break e}w=u.return}}if(P=i,gt(),Fe&&typeof Fe.onPostCommitFiberRoot=="function")try{Fe.onPostCommitFiberRoot(ui,e)}catch{}r=!0}return r}finally{D=n,Je.transition=t}}return!1}function Kl(e,t,n){t=an(n,t),t=Hs(e,t,1),e=ut(e,t,1),t=ue(),e!==null&&(Zn(e,1,t),ye(e,t))}function A(e,t,n){if(e.tag===3)Kl(e,e,n);else for(;t!==null;){if(t.tag===3){Kl(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(st===null||!st.has(r))){e=an(n,e),e=Us(t,e,1),t=ut(t,e,1),e=ue(),t!==null&&(Zn(t,1,e),ye(t,e));break}}t=t.return}}function Df(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ue(),e.pingedLanes|=e.suspendedLanes&n,Y===e&&(ee&n)===n&&(X===4||X===3&&(ee&130023424)===ee&&500>B()-Da?Jt(e,0):Pa|=n),ye(e,t)}function lc(e,t){t===0&&(e.mode&1?(t=sr,sr<<=1,!(sr&130023424)&&(sr=4194304)):t=1);var n=ue();e=Xe(e,t),e!==null&&(Zn(e,t,n),ye(e,n))}function Nf(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),lc(e,n)}function Lf(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(m(314))}r!==null&&r.delete(t),lc(e,n)}var uc;uc=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||pe.current)fe=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return fe=!1,wf(e,t,n);fe=!!(e.flags&131072)}else fe=!1,I&&t.flags&1048576&&fs(t,Qr,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Tr(e,t),e=t.pendingProps;var i=tn(t,ae.current);Zt(t,n),i=Ca(null,t,r,e,i,n);var o=Ea();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ve(r)?(o=!0,Br(t)):o=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,Ra(t),i.updater=yi,t.stateNode=i,i._reactInternals=t,Po(t,r,e,n),t=Lo(null,t,r,!0,o,n)):(t.tag=0,I&&o&&va(t),le(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Tr(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=zf(r),e=Oe(r,e),i){case 0:t=No(null,t,r,e,n);break e;case 1:t=Fl(null,t,r,e,n);break e;case 11:t=zl(null,t,r,e,n);break e;case 14:t=Il(null,t,r,Oe(r.type,e),n);break e}throw Error(m(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Oe(r,i),No(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Oe(r,i),Fl(e,t,r,i,n);case 3:e:{if(Bs(t),e===null)throw Error(m(387));r=t.pendingProps,o=t.memoizedState,i=o.element,ms(e,t),Gr(t,r,null,n);var l=t.memoizedState;if(r=l.element,o.isDehydrated)if(o={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){i=an(Error(m(423)),t),t=Hl(e,t,r,n,i);break e}else if(r!==i){i=an(Error(m(424)),t),t=Hl(e,t,r,n,i);break e}else for(Se=lt(t.stateNode.containerInfo.firstChild),me=t,I=!0,Pe=null,n=gs(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(nn(),r===i){t=Ke(e,t,n);break e}le(e,t,r,n)}t=t.child}return t;case 5:return hs(t),e===null&&xo(t),r=t.type,i=t.pendingProps,o=e!==null?e.memoizedProps:null,l=i.children,qo(r,i)?l=null:o!==null&&qo(r,o)&&(t.flags|=32),$s(e,t),le(e,t,l,n),t.child;case 6:return e===null&&xo(t),null;case 13:return Vs(e,t,n);case 4:return wa(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=rn(t,null,r,n):le(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Oe(r,i),zl(e,t,r,i,n);case 7:return le(e,t,t.pendingProps,n),t.child;case 8:return le(e,t,t.pendingProps.children,n),t.child;case 12:return le(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,l=i.value,N(Xr,r._currentValue),r._currentValue=l,o!==null)if(Le(o.value,l)){if(o.children===i.children&&!pe.current){t=Ke(e,t,n);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var u=o.dependencies;if(u!==null){l=o.child;for(var s=u.firstContext;s!==null;){if(s.context===r){if(o.tag===1){s=Be(-1,n&-n),s.tag=2;var d=o.updateQueue;if(d!==null){d=d.shared;var g=d.pending;g===null?s.next=s:(s.next=g.next,g.next=s),d.pending=s}}o.lanes|=n,s=o.alternate,s!==null&&(s.lanes|=n),Oo(o.return,n,t),u.lanes|=n;break}s=s.next}}else if(o.tag===10)l=o.type===t.type?null:o.child;else if(o.tag===18){if(l=o.return,l===null)throw Error(m(341));l.lanes|=n,u=l.alternate,u!==null&&(u.lanes|=n),Oo(l,n,t),l=o.sibling}else l=o.child;if(l!==null)l.return=o;else for(l=o;l!==null;){if(l===t){l=null;break}if(o=l.sibling,o!==null){o.return=l.return,l=o;break}l=l.return}o=l}le(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Zt(t,n),i=Ce(i),r=r(i),t.flags|=1,le(e,t,r,n),t.child;case 14:return r=t.type,i=Oe(r,t.pendingProps),i=Oe(r.type,i),Il(e,t,r,i,n);case 15:return As(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Oe(r,i),Tr(e,t),t.tag=1,ve(r)?(e=!0,Br(t)):e=!1,Zt(t,n),Fs(t,r,i),Po(t,r,i,n),Lo(null,t,r,!0,e,n);case 19:return Qs(e,t,n);case 22:return Ws(e,t,n)}throw Error(m(156,t.tag))};function sc(e,t){return ju(e,t)}function jf(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function qe(e,t,n,r){return new jf(e,t,n,r)}function za(e){return e=e.prototype,!(!e||!e.isReactComponent)}function zf(e){if(typeof e=="function")return za(e)?1:0;if(e!=null){if(e=e.$$typeof,e===na)return 11;if(e===ra)return 14}return 2}function dt(e,t){var n=e.alternate;return n===null?(n=qe(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Nr(e,t,n,r,i,o){var l=2;if(r=e,typeof e=="function")za(e)&&(l=1);else if(typeof e=="string")l=5;else e:switch(e){case jt:return Ct(n.children,i,o,t);case ta:l=8,i|=8;break;case to:return e=qe(12,n,t,i|2),e.elementType=to,e.lanes=o,e;case no:return e=qe(13,n,t,i),e.elementType=no,e.lanes=o,e;case ro:return e=qe(19,n,t,i),e.elementType=ro,e.lanes=o,e;case hu:return mi(n,i,o,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Su:l=10;break e;case mu:l=9;break e;case na:l=11;break e;case ra:l=14;break e;case Ze:l=16,r=null;break e}throw Error(m(130,e==null?e:typeof e,""))}return t=qe(l,n,t,i),t.elementType=e,t.type=r,t.lanes=o,t}function Ct(e,t,n,r){return e=qe(7,e,r,t),e.lanes=n,e}function mi(e,t,n,r){return e=qe(22,e,r,t),e.elementType=hu,e.lanes=n,e.stateNode={isHidden:!1},e}function Gi(e,t,n){return e=qe(6,e,null,t),e.lanes=n,e}function Yi(e,t,n){return t=qe(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function If(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Ti(0),this.expirationTimes=Ti(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ti(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Ia(e,t,n,r,i,o,l,u,s){return e=new If(e,t,n,u,s),t===1?(t=1,o===!0&&(t|=8)):t=0,o=qe(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ra(o),e}function Ff(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Lt,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function cc(e){if(!e)return pt;e=e._reactInternals;e:{if(Dt(e)!==e||e.tag!==1)throw Error(m(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ve(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(m(171))}if(e.tag===1){var n=e.type;if(ve(n))return cs(e,n,t)}return t}function dc(e,t,n,r,i,o,l,u,s){return e=Ia(n,r,!0,e,i,o,l,u,s),e.context=cc(null),n=e.current,r=ue(),i=ct(n),o=Be(r,i),o.callback=t??null,ut(n,o,i),e.current.lanes=i,Zn(e,i,r),ye(e,r),e}function hi(e,t,n,r){var i=t.current,o=ue(),l=ct(i);return n=cc(n),t.context===null?t.context=n:t.pendingContext=n,t=Be(o,l),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=ut(i,t,l),e!==null&&(Ne(e,i,l,o),Mr(e,i,l)),l}function ii(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Gl(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Fa(e,t){Gl(e,t),(e=e.alternate)&&Gl(e,t)}function Hf(){return null}var fc=typeof reportError=="function"?reportError:function(e){console.error(e)};function Ha(e){this._internalRoot=e}_i.prototype.render=Ha.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(m(409));hi(e,t,null,null)};_i.prototype.unmount=Ha.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Tt(function(){hi(null,e,null,null)}),t[Qe]=null}};function _i(e){this._internalRoot=e}_i.prototype.unstable_scheduleHydration=function(e){if(e){var t=Wu();e={blockedOn:null,target:e,priority:t};for(var n=0;n<et.length&&t!==0&&t<et[n].priority;n++);et.splice(n,0,e),n===0&&Bu(e)}};function Ua(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Ri(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Yl(){}function Uf(e,t,n,r,i){if(i){if(typeof r=="function"){var o=r;r=function(){var d=ii(l);o.call(d)}}var l=dc(t,r,e,0,null,!1,!1,"",Yl);return e._reactRootContainer=l,e[Qe]=l.current,An(e.nodeType===8?e.parentNode:e),Tt(),l}for(;i=e.lastChild;)e.removeChild(i);if(typeof r=="function"){var u=r;r=function(){var d=ii(s);u.call(d)}}var s=Ia(e,0,!1,null,null,!1,!1,"",Yl);return e._reactRootContainer=s,e[Qe]=s.current,An(e.nodeType===8?e.parentNode:e),Tt(function(){hi(t,s,n,r)}),s}function wi(e,t,n,r,i){var o=n._reactRootContainer;if(o){var l=o;if(typeof i=="function"){var u=i;i=function(){var s=ii(l);u.call(s)}}hi(t,l,e,i)}else l=Uf(n,t,e,i,r);return ii(l)}Uu=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=kn(t.pendingLanes);n!==0&&(aa(t,n|1),ye(t,B()),!(P&6)&&(ln=B()+500,gt()))}break;case 13:Tt(function(){var r=Xe(e,1);if(r!==null){var i=ue();Ne(r,e,1,i)}}),Fa(e,1)}};la=function(e){if(e.tag===13){var t=Xe(e,134217728);if(t!==null){var n=ue();Ne(t,e,134217728,n)}Fa(e,134217728)}};Au=function(e){if(e.tag===13){var t=ct(e),n=Xe(e,t);if(n!==null){var r=ue();Ne(n,e,t,r)}Fa(e,t)}};Wu=function(){return D};$u=function(e,t){var n=D;try{return D=e,t()}finally{D=n}};vo=function(e,t,n){switch(t){case"input":if(ao(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=fi(r);if(!i)throw Error(m(90));Ru(r),ao(r,i)}}}break;case"textarea":ku(e,n);break;case"select":t=n.value,t!=null&&Xt(e,!!n.multiple,t,!1)}};Ou=Na;Tu=Tt;var Af={usingClientEntryPoint:!1,Events:[er,Ht,fi,Mu,xu,Na]},_n={findFiberByHostInstance:Rt,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},Wf={bundleType:_n.bundleType,version:_n.version,rendererPackageName:_n.rendererPackageName,rendererConfig:_n.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ge.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Nu(e),e===null?null:e.stateNode},findFiberByHostInstance:_n.findFiberByHostInstance||Hf,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var _r=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!_r.isDisabled&&_r.supportsFiber)try{ui=_r.inject(Wf),Fe=_r}catch{}}_e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Af;_e.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Ua(t))throw Error(m(200));return Ff(e,t,null,n)};_e.createRoot=function(e,t){if(!Ua(e))throw Error(m(299));var n=!1,r="",i=fc;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=Ia(e,1,!1,null,null,n,!1,r,i),e[Qe]=t.current,An(e.nodeType===8?e.parentNode:e),new Ha(t)};_e.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(m(188)):(e=Object.keys(e).join(","),Error(m(268,e)));return e=Nu(t),e=e===null?null:e.stateNode,e};_e.flushSync=function(e){return Tt(e)};_e.hydrate=function(e,t,n){if(!Ri(t))throw Error(m(200));return wi(null,e,t,!0,n)};_e.hydrateRoot=function(e,t,n){if(!Ua(e))throw Error(m(405));var r=n!=null&&n.hydratedSources||null,i=!1,o="",l=fc;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(o=n.identifierPrefix),n.onRecoverableError!==void 0&&(l=n.onRecoverableError)),t=dc(t,null,e,1,n??null,i,!1,o,l),e[Qe]=t.current,An(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new _i(t)};_e.render=function(e,t,n){if(!Ri(t))throw Error(m(200));return wi(null,e,t,!1,n)};_e.unmountComponentAtNode=function(e){if(!Ri(e))throw Error(m(40));return e._reactRootContainer?(Tt(function(){wi(null,null,e,!1,function(){e._reactRootContainer=null,e[Qe]=null})}),!0):!1};_e.unstable_batchedUpdates=Na;_e.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ri(n))throw Error(m(200));if(e==null||e._reactInternals===void 0)throw Error(m(38));return wi(e,t,n,!1,r)};_e.version="18.3.1-next-f1338f8080-20240426";function pc(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(pc)}catch(e){console.error(e)}}pc(),pu.exports=_e;var $f=pu.exports,Zl=$f;bi.createRoot=Zl.createRoot,bi.hydrateRoot=Zl.hydrateRoot;var Z=[];for(var Zi=0;Zi<256;++Zi)Z.push((Zi+256).toString(16).slice(1));function Bf(e,t=0){return(Z[e[t+0]]+Z[e[t+1]]+Z[e[t+2]]+Z[e[t+3]]+"-"+Z[e[t+4]]+Z[e[t+5]]+"-"+Z[e[t+6]]+Z[e[t+7]]+"-"+Z[e[t+8]]+Z[e[t+9]]+"-"+Z[e[t+10]]+Z[e[t+11]]+Z[e[t+12]]+Z[e[t+13]]+Z[e[t+14]]+Z[e[t+15]]).toLowerCase()}var Rr,Vf=new Uint8Array(16);function Qf(){if(!Rr&&(Rr=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Rr))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Rr(Vf)}var Xf=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);const bl={randomUUID:Xf};function a(e,t,n){if(bl.randomUUID&&!t&&!e)return bl.randomUUID();e=e||{};var r=e.random||(e.rng||Qf)();return r[6]=r[6]&15|64,r[8]=r[8]&63|128,Bf(r)}const Kf=[{category_name:"React"},{category_name:"JS"},{category_name:"500"}],Qo=[{_id:a(),question:"Как работает React?",adsver:`React создает виртуальный DOM. Когда состояние компонента изменяется, он сначала запускает алгоритм «различий», который определяет, что изменилось в виртуальном DOM.

       Вторым шагом является согласование, при котором DOM обновляется результатами различий.'`,category:"React"},{_id:a(),question:"Каковы основные особенности React?",adsver:`Основные особенности React:

Использует синтаксис JSX , расширение синтаксиса JS, которое позволяет разработчикам писать HTML в своем коде JS.

Он использует Virtual DOM вместо Real DOM, поскольку манипуляции с Real DOM обходятся дорого.
Поддерживает рендеринг на стороне сервера , что полезно для поисковой оптимизации (SEO).
Соблюдает однонаправленный или односторонний поток данных или привязку данных.
Использует повторно используемые/компонуемые компоненты пользовательского интерфейса для разработки представления.`,category:"React"},{_id:a(),question:"Что такое виртуальный DOM?",adsver:`Виртуальный DOM (Document Object Model) — это концепция, используемая во фронтенд разработке.

     Основная идея заключается в том, что браузер создает в памяти виртуальное представление DOM дерева, которое является копией реального DOM дерева на странице.`,category:"React"},{_id:a(),question:"Почему виртуальный DOM обновляется быстрее, чем реальный DOM?",adsver:`Виртуальный DOM обновляется быстрее, чем реальный DOM, поскольку React использует хитрую технику, позволяющую минимизировать количество обновлений, которые необходимо внести в реальный DOM.


Когда вы обновляете виртуальный DOM, React сравнит новый виртуальный DOM со старым, определит, какие части изменились, а затем соответствующим образом обновит реальный DOM.

Это означает, что обновляются только те части DOM, которые действительно необходимо изменить, что намного быстрее, чем обновление всего DOM каждый раз при изменении.


Более того, виртуальный DOM реализован на языке JavaScript, который обычно выполняется быстрее, чем собственный код, используемый для управления реальным DOM.


Это означает, что React может быстро выполнять обновления виртуального DOM, а затем использовать полученные различия для эффективного обновления реального DOM.


В целом, использование виртуального DOM позволяет React эффективно обновлять пользовательский интерфейс.`,category:"React"},{_id:a(),question:"Какие правила распространяется на алгоритм сравнения React?",adsver:`При сравнении двух деревьев React сначала сравнивает два корневых элемента.

     Поведение различается в зависимости от типов корневых элементов. Он охватывает следующие правила во время алгоритма сверки:


Элементы разных типов. Если корневые элементы имеют разные типы, React разрушит старое дерево и построит новое с нуля.

Элементы DOM одного типа. При сравнении двух элементов DOM React одного типа React просматривает атрибуты обоих, сохраняет один и тот же базовый узел DOM и обновляет только измененные атрибуты.

Элементы компонента одного и того же типа. Когда компонент обновляется, экземпляр остается прежним, поэтому состояние сохраняется во время рендеринга. React обновляет реквизиты базового экземпляра

компонента, чтобы они соответствовали новому элементу, и вызывает компонент WillReceiveProps() и компонент WillUpdate() для базового экземпляра.

После этого вызывается метод render(), и алгоритм сравнения рекурсивно обрабатывает предыдущий результат и новый результат.

Рекурсия по дочерним элементам: при рекурсии к дочерним элементам узла DOM React просто перебирает оба списка дочерних элементов одновременно и генерирует мутацию всякий раз, когда возникает разница.

Обработка ключей: React поддерживает атрибут ключа. Когда у детей есть ключи, React использует их для сопоставления детей в исходном дереве с детьми в последующем дереве. Например, добавление ключа может повысить эффективность преобразования дерева.`,category:"React"},{_id:a(),question:"Что такое reconciliation в React?",adsver:`Reconciliation (согласование) в React — это процесс сравнения виртуального DOM с реальным DOM для определения изменений, которые необходимо внести для обновления пользовательского интерфейса.

     Когда компонент в React обновляется (например, из-за изменения состояния или пропсов), React сначала создает новое дерево виртуального DOM.

    Затем React сравнивает это новое дерево с предыдущим состоянием виртуального DOM и определяет минимальное количество операций, необходимых для обновления реального DOM.

Reconciliation позволяет React эффективно обновлять только те части интерфейса, которые изменились, минимизируя нагрузку на браузер и обеспечивая быструю отрисовку пользовательского интерфейса. React использует различные стратегии reconciliation, такие как сравнение по ключам (keyed recon`,category:"React"},{_id:a(),question:"В чем разница между Shadow DOM и Virtual DOM?",adsver:`Virtual DOM и Shadow DOM — это два разных подхода, каждый из которых решает свои задачи:

     оптимизацию процесса обновления DOM и создание изолированных компонентов со своими стилями и поведением соответственно.


Virtual DOM:


Цель: Virtual DOM используется для оптимизации процесса обновления и отображения реального DOM во фронтенд разработке.

Принцип работы: Библиотеки и фреймворки, такие как React, создают в памяти виртуальное представление DOM дерева, которое является копией реального DOM.

 При изменениях данных или состояния компонентов происходит сравнение виртуального и реального DOM, чтобы минимизировать количество манипуляций с реальным DOM.

Преимущества: Повышение производительности за счет эффективного обновления только необходимых частей страницы, удобство программирования и более простое отслеживание изменений.


Shadow DOM:


Цель: Shadow DOM используется для создания изолированных компонентов с их собственным стилями и поведением.

Принцип работы: С помощью Shadow DOM можно создавать компоненты с их собственным деревом DOM, стилями и скриптами, которые изолированы от остальной части страницы. Это позволяет избежать конфликтов стилей и скриптов между различными компонентами.

Преимущества: Изоляция компонентов позволяет создавать более надежные и переиспользуемые элементы интерфейса, а также улучшает поддержку стилей и скриптов внутри компонентов.`,category:"React"},{_id:a(),question:"В чем разница между React и ReactDOM?",adsver:`React и ReactDOM — это две основные библиотеки, которые используются для разработки веб-приложений на React.

React — это библиотека JavaScript для создания пользовательских интерфейсов. Она предоставляет инструменты для создания компонентов, управления состоянием и рендеринга интерфейса. Пакет react содержит React.createElement(), React.Component, React.Childrenи другие помощники, связанные с элементами и классами компонентов.

ReactDOM — это библиотека, которая отвечает за взаимодействие React с реальным DOM в браузере. ReactDOM используется для рендеринга React-компонентов в реальный DOM браузера или другой целевой среды. Пакет react-domсодержит ReactDOM.render(), и у react-dom/serverнас есть поддержка рендеринга на стороне сервера ReactDOMServer.renderToString() с помощью и ReactDOMServer.renderToStaticMarkup().`,category:"React"},{_id:a(),question:"Что такое ReactDOMServer?",adsver:`Объект ReactDOMServerпозволяет отображать компоненты в статической разметке (обычно используемой на сервере узла). Этот объект в основном используется для рендеринга на стороне сервера (SSR). Следующие методы можно использовать как в среде сервера, так и в среде браузера:

renderToString()
renderToStaticMarkup()
Например, вы обычно запускаете веб-сервер на базе Node, такой как Express, Hapi или Koa, и вызываете его renderToStringдля преобразования корневого компонента в строку, которую затем отправляете в качестве ответа.`,category:"React"},{_id:a(),question:"Почему ReactDOM отделен от React?",adsver:`Команда React работала над выделением всех функций, связанных с DOM, в отдельную библиотеку под названием ReactDOM . React v0.14 — первый выпуск, в котором библиотеки разделены. Глядя на некоторые пакеты, react-native, react-art, react-canvasи react-three, стало ясно, что красота и суть React не имеют ничего общего с браузерами или DOM.

Чтобы создать больше сред, в которых React может выполнять рендеринг, команда React планировала разделить основной пакет React на два: reactи react-dom. Это открывает путь к написанию компонентов, которые могут использоваться совместно веб-версией React и React Native.`,category:"React"},{_id:a(),question:"Что такое React Fiber?",adsver:`React Fiber — это новая реализация внутреннего алгоритма согласования (reconciliation algorithm) в библиотеке React, начиная с версии React 16. Этот алгоритм был разработан для улучшения производительности и отзывчивости интерфейсов пользовательского интерфейса.

React Fiber не изменяет публичное API React, но представляет собой внутреннюю переработку механизмов работы React, что делает его более эффективным и гибким для обработки больших и сложных интерфейсов.

Основные черты React Fiber:

Incremental Rendering: Fiber позволяет React разбивать процесс обновления на более мелкие части, что позволяет приоритизировать и прерывать процесс обновления для улучшения отзывчивости приложения.
Поддержка анимаций и жестов: Fiber предоставляет более гибкую архитектуру для поддержки анимаций, жестов и других интерактивных возможностей.
Поддержка синхронизации с браузером: Fiber улучшает синхронизацию между JavaScript и браузером, что позволяет React более точно контролировать приоритеты и временные интервалы для обновлений.
Поддержка серверного рендеринга: Fiber улучшает поддержку серверного рендеринга в React, что помогает в создании быстрых и отзывчивых приложений.`,category:"React"},{_id:a(),question:"Какова основная цель React Fiber?",adsver:`Основная цель React Fiber — улучшить производительность и отзывчивость пользовательских интерфейсов, особенно в случаях с большим количеством компонентов и сложной логикой обновления.

Инкрементальное согласование (Incremental Reconciliation): Fiber разбивает процесс согласования на более мелкие шаги, что позволяет React приоритизировать и прерывать процесс обновления для улучшения отзывчивости интерфейса.
Приоритизация обновлений: Fiber позволяет React определять приоритеты различных обновлений, что позволяет отображать на экране более важные изменения в первую очередь, делая интерфейс более отзывчивым.
Поддержка анимаций и жестов: Новая архитектура Fiber обеспечивает лучшую поддержку анимаций, жестов и других интерактивных возможностей, делая интерфейс более плавным и приятным для пользователей.
Возможность переключения между родителями и детьми для поддержки макета в React.
Возможность возвращать несколько элементов из render().
Лучшая поддержка границ ошибок: React Fiber также улучшает поддержку границ ошибок (Error Boundaries) в React. Границы ошибок — это специальные компоненты в React, которые позволяют изолировать ошибки в определенных частях вашего приложения, предотвращая их распространение на другие компоненты.`,category:"React"},{_id:a(),question:"Откуда React знает, что рендерить?",adsver:"1",category:"JS"},{_id:a(),question:"Что такое JSX?",adsver:`JSX — это синтаксическое расширение JavaScript, в котором реализованы все возможности JavaScript.
По сути, он просто обеспечивает синтаксический сахар для React.createElement(type, props, ...children) функции, давая нам выразительность JavaScript наряду с HTML-синтаксисом шаблонов.

Вы можете встроить любое выражение JavaScript в JSX, заключив его в фигурные скобки. После компиляции выражения JSX становятся обычными объектами JavaScript.

Это означает, что вы можете использовать JSX внутри ifоператоров и for loops, присваивать его переменным, принимать в качестве аргументов и возвращать из функций.`,category:"React"},{_id:a(),question:"Что такое фрагменты?",adsver:"В React распространен шаблон или практика, когда компонент возвращает несколько элементов. Фрагменты позволяют группировать список дочерних элементов без добавления дополнительных узлов в DOM. Вы можете использовать либо более короткий синтаксис с пустым тегом ( <></> ), либо <Fragment key={ story.id}> для визуализфции списка фрагментов внутри цикла с указанием обязательного атрибута ключа.",category:"React"},{_id:a(),question:"Почему фрагменты лучше, чем контейнерные элементы?",adsver:`Ниже приведен список причин предпочитать фрагменты элементам контейнера DOM:

Фрагменты работают немного быстрее и используют меньше памяти, поскольку не создают дополнительный узел DOM. Это дает реальную пользу только на очень больших и глубоких деревьях.
Некоторые механизмы CSS, такие как Flexbox и CSS Grid, имеют особые родительско-дочерние отношения, а добавление элементов div в середине затрудняет сохранение желаемого макета.
Инспектор DOM менее загромождён.`,category:"React"},{_id:a(),question:"Что такое порталы в React?",adsver:`Портал — это рекомендуемый способ визуализации дочерних элементов в узел DOM, который существует вне иерархии DOM родительского компонента. При использовании CSS-преобразования в компоненте его элементы-потомки не должны использовать фиксированное позиционирование, иначе макет развалится.

Для создания портала в React используется компонент ReactDOM.createPortal(child, container). Первый аргумент (child) — это React-элемент, который вы хотите отрендерить, а второй аргумент (container) — это DOM-элемент, в который вы хотите поместить этот элемент.`,category:"React"},{_id:a(),question:"В чем разница между элементом и компонентом?",adsver:`Элемент — это простой объект, описывающий то, что вы хотите отображать на экране, с точки зрения узлов DOM или других компонентов .
Элементы могут содержать в своих реквизитах другие элементы .
Создание элемента React обходится дешево.
После того как элемент создан, его нельзя изменить.
Тогда как компонент можно объявить несколькими разными способами. Это может быть класс с render()методом или он может быть определен как функция. В любом случае он принимает реквизиты в качестве входных данных и возвращает дерево JSX в качестве выходных данных.`,category:"React"},{_id:a(),question:"Как создавать компоненты в React?",adsver:`Компоненты — это строительные блоки для создания пользовательских интерфейсов (UI) в React. Существует два возможных способа создания компонента.
Функциональные компоненты: это самый простой способ создания компонента. Это чистые функции JavaScript, которые принимают объект props в качестве единственного параметра и возвращают элементы React для рендеринга вывода.
Компоненты класса: вы также можете использовать класс ES6 для определения компонента.`,category:"React"},{_id:a(),question:"Почему названия компонентов должны начинаться с заглавной буквы?",adsver:`В JSX имена тегов в нижнем регистре считаются тегами HTML. Однако имена тегов в нижнем регистре с точкой (метод доступа к свойству) не являются таковыми.

компилируется в React.createElement('person') (тег HTML) компилируется в React.createElement(Person) <obj.person />компилируется в React.createElement(obj.person)

Если вы визуализируете свой компонент с помощью JSX, имя этого компонента должно начинаться с заглавной буквы, иначе React выдаст ошибку как нераспознанный тег. Это соглашение связано с тем, что только элементы HTML и теги SVG могут начинаться со строчной буквы.

Вы можете определить функциональный компонент, имя которого начинается со строчной буквы, но при импорте оно должно быть заглавной буквой.`,category:"React"},{_id:a(),question:"Что такое чистые компоненты?",adsver:`Чистые компоненты — это компоненты, которые отображают один и тот же результат для одного и того же состояния и реквизитов. 


В функциональных компонентах вы можете получить эти чистые компоненты посредством мемоизированной React.memo()оболочки API вокруг компонента. 

Этот API предотвращает ненужные повторные рендеринги, сравнивая предыдущие реквизиты и новые реквизиты с помощью поверхностного сравнения. 

Так что это будет полезно для оптимизации производительности.
Но в то же время он не будет сравнивать предыдущее состояние с текущим, поскольку сам функциональный компонент по умолчанию предотвращает ненужный рендеринг, когда вы снова устанавливаете то же состояние.`,category:"React"},{_id:a(),question:"Что такое коммутационный компонент?",adsver:"Компонент переключения — это компонент, который визуализирует один из многих компонентов. Нам нужно использовать объект для сопоставления значений свойств с компонентами.",category:"React"},{_id:a(),question:"Что такое контролируемые компоненты?",adsver:`Контролируемые компоненты (controlled components) в React — это компоненты, значения которых управляются React через состояние (state). В контролируемых компонентах значения элементов формы, таких как input, textarea или select, привязаны к состоянию компонента. Когда значение элемента формы изменяется, React обновляет соответствующее состояние компонента, что в свою очередь приводит к перерисовке компонента с новым значением.

Преимущества контролируемых компонентов в React:

Однозначность источника правды: Состояние компонента является единственным источником правды для значения элемента формы. Это делает управление данными более прозрачным и предсказуемым.

Возможность валидации данных: Поскольку все изменения значения элемента формы происходят через состояние компонента, вы можете легко добавить логику валидации данных перед их отправкой или обработкой.

Легкость тестирования: Контролируемые компоненты обеспечивают легкость тестирования, поскольку вы можете точно знать, какие данные ожидать и как они будут обрабатываться.

Интеграция с другими библиотеками: Контролируемые компоненты упрощают интеграцию с другими библиотеками управления состоянием в React, такими как Redux или MobX.`,category:"React"},{_id:a(),question:"Что такое неконтролируемые компоненты?",adsver:`Неконтролируемые компоненты (uncontrolled components) в React — это компоненты, значения которых не управляются React через состояние (state). В неконтролируемых компонентах значения элементов формы хранятся в DOM элементах напрямую, а не в состоянии React.

Основные отличия неконтролируемых компонентов от контролируемых:

Значения хранятся в DOM: В неконтролируемых компонентах значения элементов формы хранятся в DOM, а не в состоянии React. Вы можете получить доступ к этим значениям через ссылки на элементы (refs).
Меньше кода: Поскольку нет необходимости обновлять состояние React при изменении значения элемента формы, неконтролируемые компоненты требуют меньше кода.
Подходят для простых форм: Неконтролируемые компоненты могут быть удобны для простых форм, где нет необходимости в сложной логике обработки данных.
Могут быть менее предсказуемыми: Поскольку значения хранятся в DOM, неконтролируемые компоненты могут быть менее предсказуемыми при обработке данных и взаимодействии с другими частями приложения.`,category:"React"},{_id:a(),question:"В чем разница между презентационным компонентом и компонентом-контейнером?",adsver:`Презентационные компоненты связаны с тем, как все выглядит. Обычно они получают данные и обратные вызовы исключительно через реквизиты. Эти компоненты редко имеют собственное состояние, но когда оно есть, обычно оно касается состояния пользовательского интерфейса, а не состояния данных.

Когда ваш компонент просто получает реквизиты и отображает их на странице, это объект stateless component, для которого можно использовать чистую функцию. Их также называют глупыми компонентами или презентационными компонентами.

Компоненты контейнера больше озабочены тем, как все работает. Эти компоненты предоставляют данные и поведение презентационным или другим компонентам контейнера. Они определяют действия и предоставляют их в качестве обратных вызовов компонентам представления. Они также часто сохраняют состояние, поскольку служат источниками данных.`,category:"React"},{_id:a(),question:"Что такое компонент высшего порядка?",adsver:`Компонент высшего порядка — это функция, которая принимает компонент и возвращает новый компонент. HOC позволяют повторно использовать код, логику и абстракцию начальной загрузки. Наиболее распространенной, вероятно, является функция подключения Redux.

Помимо простого совместного использования служебных библиотек и простой композиции, HOC — лучший способ поделиться поведением между компонентами React. Если вы обнаружите, что пишете много кода в разных местах, который делает одно и то же, возможно, вы сможете реорганизовать этот код в повторно используемый HOC.`,category:"React"},{_id:a(),question:"Что такое компонент-обертка?",adsver:`Компонент-обертка (wrapper component) в React — это компонент, который оборачивает другие компоненты или элементы для добавления дополнительной функциональности или стилей. Как правило, компонент-обертка используется для следующих целей:

Добавление дополнительной функциональности:

Компонент-обертка может содержать логику, состояние или обработчики событий, которые применяются ко всем дочерним компонентам.
Например, можно создать обертку для управления состоянием формы или для предоставления контекста всем дочерним компонентам.
Применение стилей и декораций:

Обертка может использоваться для применения общих стилей, классов CSS или декораций ко всем вложенным компонентам.
Это удобно для создания повторно используемых компонентов с определенным внешним видом.
Управление рендерингом:

Компонент-обертка может решать, когда и как рендерить своих дочерних компонентов в зависимости от определенных условий или состояний.`,category:"React"},{_id:a(),question:"Какие методы жизненного цикла компонента существуют в React?",adsver:`В React существует три основных метода жизненного цикла компонента:

Mounting (Монтирование):
constructor(): Вызывается при создании экземпляра компонента.
componentDidMount(): Вызывается сразу после того, как компонент был добавлен в DOM.
Updating (Обновление):
shouldComponentUpdate(): Вызывается перед обновлением компонента, позволяет оптимизировать перерисовку.
componentDidUpdate(): Вызывается после обновления компонента.
Unmounting (Размонтирование):
componentWillUnmount(): Вызывается перед тем, как компонент будет удален из DOM. React 16.3 и выше введены новые методы жизненного цикла:

getDerivedStateFromProps(): Вызывается при обновлении компонента перед render(), используется для обновления состояния на основе новых свойств.

getSnapshotBeforeUpdate(): Вызывается прямо перед изменением DOM после обновления компонента.

Начиная с React 17, некоторые методы жизненного цикла устарели, например, componentWillMount, componentWillReceiveProps и componentWillUpdate. Вместо них рекомендуется использовать новые методы или хуки React.`,category:"React"},{_id:a(),question:"В чем разница между компонентом класса и функциональным компонентом?",adsver:`Компонент класса использует синтаксис класса ES6 и расширяет компоненты React методом рендеринга, который возвращает элементы React.

Функциональные компоненты с хуками — это чисто функции JavaScript, которые также возвращают элементы React. До появления хуков функциональные компоненты не имели состояния.`,category:"React"},{_id:a(),question:"Что такое ленивая функция в React?",adsver:`В React ленивая функция (Lazy Loading) — это метод оптимизации, который позволяет загружать компоненты только тогда, когда они действительно нужны, а не заранее при загрузке приложения. Это особенно полезно в случае больших приложений с множеством компонентов, когда не все компоненты необходимы сразу.

Для использования ленивой загрузки в React можно использовать функцию React.lazy(), которая позволяет динамически импортировать компоненты. Когда компонент, обернутый в React.lazy(), должен быть отображен, React автоматически загрузит соответствующий код компонента.`,category:"React"},{_id:a(),question:"Что такое Suspense компонент в React?",adsver:`Suspense — это компонент в React, который позволяет управлять состоянием загрузки компонентов с ленивой загрузкой и работой с асинхронными данными. Он используется вместе с React.lazy() для отложенной загрузки компонентов или с React.Suspense для ожидания загрузки данных.

Основное назначение Suspense в React заключается в том, чтобы показывать какой-то заменяющий контент (fallback) во время загрузки асинхронных данных или компонентов. Когда дочерний компонент, обернутый в Suspense, еще не загружен, Suspense будет отображать указанный fallback-контент (например, индикатор загрузки).`,category:"React"},{_id:a(),question:"Что такое состояние в React?",adsver:`Состояние компонента — это объект, который содержит некоторую информацию, которая может измениться в течение срока службы компонента.

Важным моментом является то, что всякий раз, когда изменяется объект состояния, компонент перерисовывается.

Всегда рекомендуется делать наше состояние как можно проще и минимизировать количество компонентов с состоянием.

Хук useState использовался для добавления состояния к компоненту и возвращает массив с текущим состоянием и функцией для его обновления.

Состояние похоже на свойства, но оно является частным и полностью контролируется компонентом, т. е. оно недоступно для любого другого компонента до тех пор, пока компонент-владелец не решит передать его.`,category:"React"},{_id:a(),question:"Как бы вы объяснили концепцию «поднятия состояния» в React?",adsver:`Концепция "поднятия состояния" (lifting state up) в React относится к технике, которая позволяет передавать состояние из дочерних компонентов в их родительские компоненты. Это позволяет управлять общим состоянием приложения на более высоком уровне и делает код более чистым, организованным и масштабируемым.

Когда несколько компонентов в React нуждаются в доступе к одному и тому же состоянию или когда изменение состояния одного компонента должно повлиять на другие компоненты, то целесообразно использовать поднятие состояния.

Пример ситуации, когда может потребоваться поднятие состояния:

У вас есть родительский компонент App, который содержит два дочерних компонента: Counter и ControlPanel. Counter отображает значение счетчика, а ControlPanel содержит кнопку для увеличения значения счетчика. При нажатии на кнопку в ControlPanel значение счетчика в Counter должно увеличиваться.

Без поднятия состояния вы бы хранили значение счетчика в самом компоненте Counter. Однако, для реализации этой функциональности более эффективным способом, можно поднять состояние (значение счетчика) из Counter в родительский компонент App. Таким образом, App будет содержать состояние счетчика и передавать его как пропсы дочерним компонентам.`,category:"React"},{_id:a(),question:"Что такое реквизиты (props) в React?",adsver:`Реквизиты (props) — это входные данные для компонентов.

Это отдельные значения или объекты, содержащие набор значений, которые передаются компонентам при создании аналогично атрибутам HTML-тега. Здесь данные передаются от родительского компонента к дочернему компоненту.

Основная цель реквизитов в React — предоставить следующие функциональные возможности компонента:

Передача данных: Реквизиты позволяют передавать данные от родительского компонента к дочернему. Это позволяет компонентам быть более гибкими и переиспользуемыми.
Конфигурация компонентов: Реквизиты могут использоваться для настройки поведения компонентов. Например, вы можете передать параметры, определяющие стиль, текст или функциональность компонента.
Динамическое обновление: При изменении реквизитов компонента React автоматически перерендерит компонент с обновленными данными.
Пропагация данных вниз по иерархии: Реквизиты передаются от родительских компонентов к дочерним по иерархии компонентов, что позволяет создавать сложные структуры приложений.
Использование функций обратного вызова: Реквизиты также могут содержать функции обратного вызова, которые дочерние компоненты могут вызывать для взаимодействия с родительскими компонентами.
Имя атрибута (которое вы придумали) затем становится свойством, прикрепленным к собственному объекту реквизита React, который изначально уже существует во всех компонентах, созданных с использованием библиотеки React.

В React компоненты могут получать доступ к своим реквизитам (props) через объект props, который передается им как аргумент. Вот как можно получить доступ к свойствам объекта props в React:

Через деструктуризацию
Через обращение к объекту props
Используя деструктуризацию в параметрах функции`,category:"React"},{_id:a(),question:"Что такое реквизиты по умолчанию?",adsver:`Реквизиты по умолчанию (default props) в React представляют собой значения по умолчанию для свойств компонента, которые будут использоваться, если для этих свойств не были переданы значения. Это позволяет задать значения по умолчанию для свойств компонента, чтобы обеспечить более гибкую и надежную работу компонентов.

Чтобы определить реквизиты по умолчанию для компонента в React, вы можете использовать статическое свойство defaultProps.

Использование реквизитов по умолчанию помогает сделать компоненты более надежными, уменьшает вероятность ошибок из-за отсутствия переданных свойств и обеспечивает более гибкую конфигурацию компонентов в вашем приложении.`,category:"React"},{_id:a(),question:"Что такое Children props?",adsver:"Children — это свойство, которое позволяет вам передавать компоненты в виде данных другим компонентам, как и любой другой реквизит, который вы используете. Дерево компонентов, помещенное между открывающим и закрывающим тегом компонента, будет передано этому компоненту в качестве childrenреквизита.",category:"React"},{_id:a(),question:"Почему вы не можете обновить реквизиты в React?",adsver:"Философия React заключается в том, что реквизиты должны быть неизменяемыми (только для чтения) и располагаться сверху вниз . Это означает, что родитель может отправлять любые значения реквизитов дочернему элементу, но дочерний элемент не может изменять полученные реквизиты.",category:"React"},{_id:37,question:"Как получить доступ к реквизитам в кавычках атрибутов?",adsver:"React (или JSX) не поддерживает интерполяцию переменных внутри значения атрибута. Но вы можете поместить любое выражение JS в фигурные скобки в качестве всего значения атрибута. Использование шаблонных строк также будет работать.",category:"React"},{_id:a(),question:"В чем разница между state и props?",adsver:`В React stateи props являются простыми объектами JavaScript и используются для управления данными компонента, но они используются по-разному и имеют разные характеристики.

Объект stateуправляется самим компонентом и может быть обновлен с помощью setState() функции. В отличие от реквизита, состояние может быть изменено компонентом и используется для управления внутренним состоянием компонента. Более того, изменения в состоянии вызывают повторный рендеринг компонента и его дочерних элементов. Компоненты не могут стать многоразовыми, используя только состояние.

С другой стороны, props(сокращение от «свойства») передаются компоненту его родительским компонентом и являются read-only, что означает, что они не могут быть изменены самим компонентом. Кроме того, реквизиты можно использовать для настройки поведения компонента и передачи данных между компонентами. Компоненты становятся многоразовыми при использовании реквизита.`,category:"React"},{_id:a(),question:"В чем разница между обработкой событий HTML и React?",adsver:`Ниже приведены некоторые основные различия между обработкой событий HTML и React:

Способ привязки обработчиков событий:

HTML: В HTML вы можете привязать обработчики событий напрямую к элементам с помощью атрибутов, таких как onclick, onchange, onmouseover и т.д.
React: В React обработчики событий привязываются через JSX с использованием синтаксиса, похожего на обычные атрибуты HTML, например onClick, onChange, onMouseOver.
Обработка контекста this:

HTML: В чистом JavaScript обработчики событий могут иметь проблемы с контекстом this, который может изменяться в зависимости от контекста вызова.
React: В React методы обработчиков событий автоматически привязаны к экземпляру компонента, что обеспечивает правильный контекст this. Это позволяет использовать this внутри обработчиков без необходимости явной привязки.
Использование событий Synthetic Event в React:

React: В React используется Synthetic Event, который является кросс-браузерной оберткой над нативными событиями браузера. Это позволяет React оптимизировать обработку событий для лучшей производительности.
Отмена действия по умолчанию:

HTML: В HTML для отмены действия по умолчанию (например, перезагрузки страницы при отправке формы) требуется явно вызвать event.preventDefault().
React: В React для отмены действия по умолчанию также можно использовать event.preventDefault(), но также можно вернуть false из обработчика события.
Способ вызова обработчика события:

HTML: В HTML вам нужно вызвать функцию, добавив после неё ()
React: Тогда как в React вам не следует добавлять () после имени функции.`,category:"React"},{_id:a(),question:"Как передать обработчик событий компоненту?",adsver:"В React передача обработчика событий компоненту осуществляется путем передачи функции в качестве свойства (prop) компоненту. Это позволяет компоненту реагировать на события, происходящие внутри него, и взаимодействовать с другими частями вашего приложения.",category:"React"},{_id:a(),question:"Что такое синтетические события в React?",adsver:`SyntheticEvent— это кроссбраузерная оболочка собственного события браузера. Его API такой же, как и собственное событие браузера, включая stopPropagation() и preventDefault(), за исключением того, что события работают одинаково во всех браузерах.

Вот основные особенности и преимущества синтетических событий в React:

Кросс-браузерная совместимость: Синтетические события в React обеспечивают однородное поведение событий в различных браузерах, скрывая различия в реализации событий между браузерами.

Повышенная производительность: React оптимизирует обработку событий через синтетические события для улучшения производительности при работе с большим количеством обработчиков.

Доступ к оригинальному событию: Внутри обработчика события в React вы все равно можете получить доступ к оригинальному событию браузера через свойство nativeEvent объекта Synthetic Event.

Легкая работа с React-компонентами: Синтетические события позволяют легко привязывать обработчики событий к компонентам React и управлять ими.

Использование синтетических событий делает работу с событиями в React более удобной, надежной и эффективной, обеспечивая единый интерфейс для обработки событий в вашем приложении.`,category:"React"},{_id:a(),question:"Что такое встроенные условные выражения?",adsver:`В React встроенные условные выражения используются для условного рендеринга компонентов на основе определенных условий. Это позволяет отображать различный контент в зависимости от состояния или данных приложения.

Существует несколько способов реализации встроенных условных выражений в React

Использование тернарного оператора: Вы можете использовать тернарный оператор в JSX для условного рендеринга компонентов.
Использование логического оператора &&: Для простых условий, когда вам нужно отобразить компонент только при выполнении условия, вы можете использовать логический оператор &&.
Использование условных операторов за пределами JSX: Вы также можете использовать условные операторы за пределами JSX, чтобы определить, какой компонент отрендерить, и затем использовать переменную внутри JSX.
Использование условных выражений внутри JSX: Вы также можете использовать условные выражения напрямую в JSX, используя конструкцию {}.`,category:"React"},{_id:a(),question:"Что такое реквизит key и в чем преимущество его использования в массивах элементов?",adsver:`key — это специальный атрибут, который следует включать при сопоставлении массивов для визуализации данных. Ключи помогают React определить, какие элементы были изменены, добавлены или удалены. Без ключей React может выполнять ненужный повторный рендеринг компонентов, что приводит к проблемам с производительностью и потенциальным ошибкам.

Ключи должны быть присвоены элементам внутри массива, чтобы придать элементам стабильную идентичность.

Ключи должны быть уникальными среди своих братьев и сестер.

Лучший способ выбрать ключ — использовать строку, которая однозначно идентифицирует элемент списка среди его родственных элементов. Чаще всего в качестве ключей вы будете использовать идентификаторы из своих данных. Если у вас нет стабильных идентификаторов отображаемых элементов, в крайнем случае вы можете использовать индекс элемента в качестве ключа. Не рекомендуется использовать индексы для ключей, если порядок элементов можно изменить, так как это будет работать медленно.

Использование индексов для ключей не рекомендуется , если порядок элементов может измениться. Это может отрицательно повлиять на производительность и вызвать проблемы с состоянием компонента.
Если вы извлекаете элемент списка как отдельный компонент, тогда примените ключи к компоненту списка вместо li тега.
В консоли появится предупреждающее сообщение, если keyсвойство отсутствует в элементах списка.
Атрибут key принимает строку или число и внутренне преобразует его в строковый тип.
Не создавайте ключ на лету, например key={Math.random()}. Потому что ключи никогда не будут совпадать между повторными рендерингами DOM, создаваемыми каждый раз.`,category:"React"},{_id:a(),question:"Как использовать стили в React?",adsver:`В React стили можно использовать несколькими способами:

Inline Styles: Можно использовать объект JavaScript для определения стилей непосредственно в JSX.
CSS-файлы: Можно создать CSS-файлы и импортировать их в компоненты React.
CSS-модули: CSS-модули позволяют ограничить область видимости стилей для конкретного компонента.
Библиотеки стилей: Можно использовать библиотеки стилей, такие как Styled Components или Emotion, которые позволяют писать CSS непосредственно в JavaScript.`,category:"React"},{_id:a(),question:"Объясните Styled Components в React?",adsver:`Styled Components — это библиотека для React и React Native, которая позволяет вам писать реальный CSS-код для стилизации ваших компонентов. Это позволяет вам декларативно писать стили вместе с компонентами вместо необходимости поддерживать отдельные таблицы стилей.

Стилизованные компоненты позволяют легко настраивать стили на основе реквизитов, переданных компоненту.`,category:"React"},{_id:a(),question:"Как вы условно визуализируете компоненты?",adsver:`В некоторых случаях вам нужно визуализировать разные компоненты в зависимости от некоторого состояния. JSX не отображает falseили undefined, поэтому вы можете использовать условное замыкание для визуализации определенной части вашего компонента, только если определенное условие истинно.

Если вам нужно if-elseусловие, используйте тернарный оператор.`,category:"React"},{_id:a(),question:"Как вы реализуете рендеринг на стороне сервера или SSR?",adsver:`Рендеринг на стороне сервера (SSR) в React позволяет создавать приложения, в которых HTML-код формируется на сервере и отправляется клиенту как готовая страница. Это может быть полезно для улучшения производительности, оптимизации SEO и улучшения процесса первоначальной загрузки.

Вот пример того, как можно реализовать SSR в React:

Использование библиотеки Next.js: Next.js — это популярный фреймворк React, который предоставляет встроенную поддержку SSR. Он автоматически обрабатывает рендеринг на стороне сервера и клиента, а также предоставляет множество инструментов для работы с SSR.

Использование библиотеки React Helmet: React Helmet позволяет управлять содержимым в React-приложениях. Это полезно для управления мета-тегами, заголовками и другими элементами , что может быть важно для SEO.

Настройка сервера Express: Можно настроить серверную часть приложения на Node.js с использованием Express.js для обработки запросов и рендеринга React-компонентов на стороне сервера.`,category:"React"},{_id:a(),question:"Что такое хук в React?",adsver:"Хук в React — это функция, которая позволяет разработчикам использовать состояние и другие функции React без написания класса. Это позволяет использовать эти функции в функциональных компонентах, которые легче писать и понимать, чем компоненты на основе классов.",category:"React"},{_id:a(),question:"Какие правила для хуков есть в React?",adsver:`В React существуют определенные правила, которые следует соблюдать при использовании хуков. Вот некоторые из основных правил для хуков в React:

Использование хуков только на верхнем уровне функционального компонента: Хуки должны вызываться только на верхнем уровне функции компонента или внутри другого хука. Не следует вызывать хуки вложенно в циклах, условиях или вложенных функциях.

Использование хуков в функциональных компонентах: Хуки предназначены для использования внутри функциональных компонентов React. Нельзя использовать их в классовых компонентах.

Названия хуков должны начинаться с "use": Названия пользовательских хуков должны начинаться с префикса "use" (например, useEffect, useState, useCustomHook).

Вызов хуков должен быть однородным: Вызовы хуков должны быть консистентными и не могут зависеть от условий или расположения внутри компонента.

Вызов хуков должен быть в том же порядке: Порядок вызова хуков должен быть одинаковым при каждом рендере компонента.

Не вызывать хуки из условий: Не следует вызывать хуки из условий, так как это может привести к ошибкам.

Создание пользовательских хуков: Вы можете создавать собственные пользовательские хуки для повторного использования логики между компонентами.`,category:"React"},{_id:a(),question:"Какие хуки используются в React?",adsver:`В React существует несколько встроенных хуков, которые помогают управлять состоянием, эффектами и другими аспектами компонентов.

Некоторые из самых распространенных хуков в React:

useState: Позволяет добавлять локальное состояние в функциональные компоненты.
useEffect: Позволяет выполнять побочные эффекты в функциональных компонентах, например, загрузка данных или подписка на события.
useLayoutEffect: Похож на useEffect, но запускается синхронно после всех изменений DOM.
useContext: Позволяет получить доступ к значению контекста из ближайшего Provider в дереве компонентов.
useRef: Позволяет получить доступ к DOM-элементам или другим значениям, которые сохраняются между рендерами.
useCallback: Позволяет мемоизировать колбэк-функции для оптимизации производительности.
useMemo: Позволяет мемоизировать вычисления для оптимизации производительности.
useReducer: Предоставляет альтернативный способ управления состоянием компонента через reducer функцию, похожую на работу с Redux.`,category:"React"},{_id:a(),question:"Как протестировать компонент, использующий хуки?",adsver:`Для тестирования компонента, использующего хуки в React, вы можете воспользоваться библиотеками для тестирования React-компонентов, такими как Jest и React Testing Library. Вот несколько шагов, которые могут помочь вам протестировать компоненты, использующие хуки:

Установите необходимые зависимости: Установите Jest, React Testing Library и другие необходимые библиотеки для тестирования.

Создайте тестовый файл: Создайте файл с расширением .test.js или .spec.js, в котором будут содержаться тесты для вашего компонента.

Импортируйте компонент и необходимые хуки: Импортируйте ваш компонент и все необходимые хуки, которые он использует.

Мокируйте хуки: Для тестирования компонента, использующего хуки, вам может потребоваться мокировать хуки с помощью Jest. Например, вы можете использовать jest.mock для имитации хуков.

Напишите тесты: Напишите тесты для вашего компонента, проверяя его поведение при различных условиях и взаимодействиях.

Запустите тесты: Запустите тесты с помощью Jest, чтобы убедиться, что ваш компонент работает правильно.`,category:"React"},{_id:a(),question:"1Как предотвратить многократный вызов функции?",adsver:`1Для предотвращения многократного вызова функции в React можно использовать различные подходы. Один из распространенных способов — это использование хука useCallback. Хук useCallback позволяет вам мемоизировать колбэк-функцию и предотвращать её повторное создание при каждом рендеринге компонента. Это особенно полезно, когда этот колбэк-функция передается в качестве пропса другому компоненту.
2 Функция _.throttle из библиотеки Lodash используется для управления частотой вызова определенной функции. Она позволяет ограничить частоту выполнения функции до определенного интервала времени. В контексте React функция _.throttle может быть полезна, например, при обработке событий, таких как скролл или изменение размеров окна браузера. При использовании _.throttle можно ограничить частоту вызова функции обработчика этих событий, чтобы уменьшить нагрузку на браузер и повысить производительность.
3 Функция _.debounce из библиотеки Lodash используется для задержки вызова определенной функции. Она позволяет отложить выполнение функции до тех пор, пока не пройдет определенный интервал времени после последнего вызова этой функции. В React _.debounce может быть полезна, например, при обработке событий, где необходимо подождать некоторое время после последнего события перед выполнением определенной логики. Это может быть полезно, например, при реализации функциональности автозаполнения поиска или фильтрации данных.`,category:"React"},{_id:a(),question:"Для чего используется хук useState?",adsver:`Хук useState в React используется для добавления состояния в функциональные компоненты.

Вот основные причины использования хука useState:

Хранение состояния: С помощью useState вы можете создать переменную, которая будет содержать текущее значение состояния компонента.

Обновление состояния: При помощи функции, возвращаемой useState, вы можете обновлять состояние компонента. При вызове этой функции React перерисует компонент с обновленным состоянием.

Передача начального состояния: Вы можете передать начальное значение состояния в useState. Это значение будет использоваться при первом рендеринге компонента.`,category:"React"},{_id:a(),question:"Для чего в React используются useRef?",adsver:`В React хук useRef используется для сохранения ссылок на DOM-элементы или другие значения между рендерами компонента. Вот несколько основных причин использования useRef:

Доступ к DOM-элементам:

useRef позволяет получить доступ к DOM-элементам в функциональном компоненте.
Это особенно полезно при необходимости установить фокус на элементе, измерить его размеры или выполнить другие манипуляции с DOM.
Хранение мутабельных значений:

Значение, хранящееся в объекте current свойства объекта, может быть изменено без вызова перерендеринга компонента.
Это удобно для хранения любых данных, которые не должны вызывать перерендеринг компонента.
Сохранение предыдущего значения:

Можно использовать useRef для сохранения предыдущего значения состояния или пропсов и сравнения их с текущими значениями внутри useEffect.
Оптимизация производительности:

Поскольку изменения в useRef не вызывают перерендеринг компонента, его можно использовать для оптимизации производительности в некоторых случаях.
Таким образом, useRef в React предоставляет удобный способ сохранять и манипулировать значениями в функциональных компонентах без вызова перерендеринга.`,category:"React"},{_id:a(),question:"В чем разница между useState и хуком useRef?",adsver:`Хуки useState и useRef в React имеют разные цели и применения, хотя оба могут использоваться для хранения данных в компонентах. Вот основные различия между ними:

useState:

Используется для хранения состояния компонента.
При изменении состояния компонента вызывается перерендеринг.
Изменение состояния приводит к повторному выполнению функции-компонента.
useRef:

Используется для сохранения изменяемых значений между рендерами без вызова перерендеринга.
Значение, хранящееся в useRef, может быть изменено без вызова перерендеринга компонента.
Значение useRef не вызывает повторного выполнения функции-компонента при его изменении.
Таким образом, если вам нужно хранить данные, которые могут вызвать перерендеринг компонента, используйте useState. Если вам нужно хранить данные, которые не должны вызывать перерендеринг, используйте useRef. Кроме того, useRef часто используется для доступа к DOM-элементам или другим значениям, которые не должны вызывать изменение внешнего вида компонента.`,category:"React"},{_id:a(),question:"Для чего используется хук useEffect?",adsver:`Хук useEffect в React используется для выполнения побочных эффектов в функциональных компонентах. Побочные эффекты могут быть, например, загрузка данных, подписка на события, изменение DOM и другие действия, которые необходимо выполнить в процессе работы компонента.

Вот основные случаи использования хука useEffect:

Загрузка данных: Вы можете использовать useEffect для загрузки данных из сети или локального хранилища при монтировании компонента.

Подписка на события: Если ваш компонент должен реагировать на какие-то события (например, изменения в состоянии приложения), вы можете установить подписку внутри useEffect.

Изменение DOM: Используйте useEffect, чтобы выполнять манипуляции с DOM элементами после того, как они были отрисованы.

Очистка ресурсов: Если необходимо освободить ресурсы или выполнить какие-то действия при размонтировании компонента, можно вернуть функцию очистки из useEffect.

В зависимости от второго аргумента useEffect, поведение может изменяться. Пустой массив зависимостей означает, что эффект будет запущен только один раз при монтировании компонента. В случае, если массив зависимостей не пустой, эффект будет запускаться при изменении указенных значений в массиве.`,category:"React"},{_id:a(),question:"Как использовать хук «useId» для генерации уникальных идентификаторов?",adsver:`useId не принимает никаких параметров.

useId возвращает уникальную строку идентификатора, связанную с этим конкретным вызовом useId в этом конкретном компоненте.

Bad Practise - не используете в качестве значения key`,category:"React"},{_id:a(),question:"Чем полезен хук useDeferredValue в React?",adsver:"«useDeferredValue» — это React Hook, который позволяет отложить обновление части пользовательского интерфейса.",category:"React"},{_id:a(),question:"В чем разница между useMemo и useCallback?",adsver:`useCallback дает вам ссылочное равенство между рендерингами функций. А useMemo дает вам ссылочное равенство между рендерингами значений.

useCallback и useMemo ожидают функцию и массив зависимостей. Разница в том, что useCallback возвращает свою функцию при изменении зависимостей, а useMemo вызывает свою функцию и возвращает результат.

useCallback возвращает свою функцию невызванной, чтобы вы могли вызвать ее позже, а useMemo вызывает свою функцию и возвращает результат`,category:"React"},{_id:a(),question:"Приведите практический пример компонента высшего порядка в React.",adsver:"Показать загрузчик, пока компонент ожидает данных.",category:"React"},{_id:a(),question:"Какие преимущества дает использование стрелочных функций?",adsver:`Безопасность области: до стрелочных функций каждая новая функция определяла свое собственное это значение (новый объект в случае конструктора, неопределенный при вызовах функций в строгом режиме, базовый объект, если функция вызывается как «метод объекта» и т. д. ). Стрелочная функция не создает свою собственную this, используется значение this включающего контекста выполнения.

Компактность: стрелочные функции легче читать и писать.

Ясность: когда почти все является стрелочной функцией, любая обычная функция сразу бросается в глаза для определения области действия. Разработчик всегда может просмотреть следующий оператор функции, чтобы узнать, что представляет собой объект.`,category:"React"},{_id:a(),question:"Что такое Redux?",adsver:`Основная идея redux заключается в том, что все состояние приложения хранится в одном хранилище. Store — это просто объект JavaScript.

Единственный способ изменить состояние — отправить действия из вашего приложения, а затем написать редукторы для этих действий, которые изменяют состояние.

Весь переход между состояниями хранится внутри редукторов и не должен иметь никаких файлов side-effects.`,category:"React"},{_id:a(),question:"Что такое store в redux?",adsver:`Хранилище — это объект JavaScript, который хранит состояние приложения. Наряду с этим на него также возлагаются следующие обязанности:

Разрешает доступ к состоянию через getState();
Позволяет обновлять состояние через dispatch(action);.
Регистрирует слушателей через subscribe(listener);.
Управляет отменой регистрации прослушивателей с помощью функции, возвращаемой subscribe(listener).`,category:"React"},{_id:a(),question:"В чём разница между экшеном и редуктором?",adsver:`Действия представляют собой простые объекты JavaScript.
Они должны иметь тип, указывающий тип выполняемого действия.
По сути, действия — это полезная информация, которая отправляет данные из вашего приложения в ваш store.
Редьюсер — это просто чистая функция, которая принимает предыдущее состояние и действие и возвращает следующее состояние.
`,category:"React"},{_id:a(),question:"Для чего используется Redux Thunk?",adsver:`Redux Thunk — это промежуточное программное обеспечение, которое позволяет вам писать создатели действий, которые возвращают функцию вместо действия.

Затем этот переходник можно использовать для задержки отправки действия, если выполнено определенное условие. Это позволяет вам обрабатывать асинхронную диспетчеризацию действий.`,category:"React"},{_id:a(),question:"Что такое пакетирование состояний React?",adsver:`Пакетная обработка — это когда React группирует несколько обновлений состояния в один рендеринг для повышения производительности.

Например, если у вас есть два обновления состояния внутри одного события клика по кнопке, то React всегда объединяет их в один рендеринг.

Это отлично подходит для повышения производительности, поскольку позволяет избежать ненужных повторных рендеров. Это также предотвращает отрисовку вашего компонента с не полностью обновленным состоянием

Однако React не консистентно относился к пакетным обновлениям. Например, если вам нужно получить данные, а затем обновить состояние в handleClick, то React НЕ будет пакетировать обновления и выполнит два независимых обновления.

Это связано с тем, что React раньше группировал обновления только во время события браузера (например, клика), но здесь мы обновляем состояние после того, как событие уже было обработано.`,category:"React"},{_id:a(),question:"Как передавать данные между одноуровневыми компонентами с помощью маршрутизатора React?",adsver:"Передача данных между родственными компонентами React возможна с помощью useParams перехватчика React Router.",category:"React"},{_id:a(),question:"Каковы преимущества React Router?",adsver:`Основным преимуществом react-routerявляется то, что страницу не нужно обновлять при нажатии ссылки на другую страницу.

Это также позволяет нам использовать historyфункции браузера, сохраняя при этом правильный вид приложения.

Улучшенный пользовательский интерфейс, анимация и переходы могут быть легко реализованы при переключении между различными компонентами.

React Router использует dynamic routingдля обеспечения маршрутизации по запросу пользователя. Это также означает, что все необходимые компоненты также отображаются без каких-либо вспышек белого экрана или перезагрузки страницы.

Основными компонентами react-routerявляются: BrowserRouter, Routes, Route, Link.`,category:"React"},{_id:a(),question:"Можете ли вы объяснить разницу между чистой и нечистой функцией и почему это важно в контексте React?",adsver:`В React чистая функция — это функция, которая возвращает один и тот же результат для одного и того же набора входных данных, независимо от того, когда она вызывается. С другой стороны, нечистая функция — это функция, которая может выдавать разные выходные данные для одного и того же набора входных данных, в зависимости от того, когда она вызывается или других факторов.

В общем, в React предпочтительнее использовать чистые функции, потому что их легче анализировать и тестировать. С другой стороны, нечистые функции могут привести к непредсказуемому поведению и затруднить понимание вашего кода.`,category:"React"},{_id:a(),question:"Чем Next.js отличается от React.js и какие преимущества он дает при создании веб-приложений?",adsver:`Next.js — это платформа, построенная на основе React.js, которая предоставляет дополнительные функции для создания веб-приложений, отображаемых на стороне сервера.

Одно из основных различий между Next.js и React.js заключается в том, что Next.js обеспечивает рендеринг на стороне сервера «из коробки», что позволяет ускорить начальную загрузку страниц и улучшить поисковую оптимизацию.

Next.js также предоставляет такие функции, как автоматическое разделение кода и оптимизация производительности для производственных сборок, что может упростить создание и развертывание крупномасштабных приложений.

Кроме того, Next.js обеспечивает поддержку создания статических сайтов, что позволяет еще быстрее загружать сайт и улучшить взаимодействие с пользователем.

В целом, Next.js предоставляет более полное решение для создания современных веб-приложений, чем один только React.js, и может быть особенно полезен для более крупных приложений, требующих рендеринга на стороне сервера и других расширенных функций.`,category:"React"},{_id:a(),question:"Как использовать InnerHTML в React?",adsver:"Атрибут dangerouslySetInnerHTMLявляется заменой React для использования innerHTMLв DOM браузера. Как и innerHTML, использовать этот атрибут рискованно, учитывая атаки с использованием межсайтовых сценариев (XSS). Вам просто нужно передать __htmlобъект в качестве ключа и текст HTML в качестве значения.",category:"React"},{_id:a(),question:"Как использовать элемент <label>  в React?",adsver:`Если вы попытаетесь отобразить элемент, привязанный к текстовому вводу, с использованием стандартного for атрибута, он создаст HTML, в котором отсутствует этот атрибут, и выведет предупреждение на консоль.

Поскольку for это зарезервированное ключевое слово в JavaScript, используйте htmlFor вместо него.`,category:"React"},{_id:a(),question:"Типы данных в JavaScript?",adsver:`1. Числа (Numbers): Включают целые числа и числа с плавающей запятой.
   
2. Строки (Strings): Последовательности символов, заключенные в кавычки (одинарные или двойные).

3. Булев тип (Boolean): Принимает значения true или false, используется для логических операций.

4. Массивы (Arrays): Упорядоченные коллекции элементов, которые могут быть любого типа данных.

5. Объекты (Objects): Содержат коллекцию пар ключ-значение.

6. Undefined: Значение, которое имеет переменная, если ей не было присвоено значение.

7. Null: Значение, которое указывает на отсутствие значения.

8. Символы (Symbols): Уникальные и неизменяемые значения, используемые в качестве свойств объектов.

9. Функции (Functions): Блок кода, который можно вызывать многократно.

10. NaN: Особое значение, представляющее "не число".`,category:"JS"},{_id:a(),question:"Каковы возможные способы создания объектов в JavaScript?",adsver:"",category:"JS"},{_id:a(),question:"Что такое цепочка прототипов?",adsver:"Цепочка прототипов используется для создания новых типов объектов на основе существующих. Это похоже на наследование в языке, основанном на классах. т. е. когда вы создаете объект с помощью функции-конструктора или класса, созданный объект наследует свойства объекта-прототипа.",category:"JS"},{_id:a(),question:"В чем разница между Call, Apply и Bind?",adsver:"",category:"JS"},{_id:a(),question:"Что такое JSON и его общие операции?",adsver:"JSON — это текстовый формат данных, соответствующий синтаксису объектов JavaScript, который был популяризирован Douglas Crockford. Это полезно, когда вы хотите передать данные по сети. По сути, это просто текстовый файл с расширением .json и MIME-типом application/json.",category:"JS"},{_id:a(),question:"Какова цель метода slice массива?",adsver:"Метод slice() возвращает выбранные элементы массива как новый объект массива. Он выбирает элементы, начинающиеся с данного начального аргумента, и заканчиваются данным необязательным конечным аргументом, не включая последний элемент. Если вы опустите второй аргумент, он будет выбирать до конца массива.",category:"JS"},{_id:a(),question:"Какова цель метода splice массива?",adsver:`Метод splice () добавляет/удаляет элементы в массив или из него, а затем возвращает удаленный элемент. Первый аргумент указывает позицию/индекс массива для вставки или удаления, тогда как необязательный второй аргумент указывает количество элементов, которые необходимо удалить. Каждый дополнительный аргумент добавляется в массив.
    Примечание. Метод Splice изменяет исходный массив и возвращает удаленный массив.`,category:"JS"},{_id:a(),question:"В чем разница между slice и splice?",adsver:"",category:"JS"},{_id:a(),question:"В чем разница между операторами == и ===?",adsver:`JavaScript обеспечивает как строгое (===, !==), так и преобразование типов (==, !=) сравнение на равенство. Строгие операторы учитывают тип переменной, тогда как нестрогие операторы выполняют коррекцию/преобразование типа на основе значений переменных. Строгие операторы следуют приведенным ниже условиям для разных типов:

Две строки строго равны, если они имеют одинаковую последовательность символов, одинаковую длину и одинаковые символы в соответствующих позициях.
Два числа строго равны, если они численно равны, т. е. имеют одинаковое числовое значение. Здесь есть два особых случая:
NaN не равен ничему, включая NaN.
Положительные и отрицательные нули равны друг другу.
Два логических операнда строго равны, если оба истинны или оба ложны.
Два объекта строго равны, если они ссылаются на один и тот же объект.
Типы Null и Undefine не равны ===, но равны == . то есть, null===undefined --> false, ноnull==undefined --> true`,category:"JS"},{_id:a(),question:"Что такое лямбда-выражения или стрелочные функции?",adsver:"Стрелочная функция представляет собой более короткий/лаконичный синтаксис для выражения функции и не имеет собственных аргументов this, super или new.target . Эти функции лучше всего подходят для функций, не являющихся методами, и их нельзя использовать в качестве конструкторов.",category:"JS"},{_id:a(),question:"Что такое функция первого класса в  JS?",adsver:`Функции первого класса (First-Class Functions) в JavaScript означают, что функции в этом языке программирования могут быть использованы так же, как и любые другие значения (например, строки, числа и объекты). Вот основные характеристики функций первого класса в JavaScript:
    функции могут быть присвоены переменным, функции могут быть переданы как аргументы другим функциям, функции могут быть возвращены из других функций, функции могут быть сохранены в структурах данных, функции могут быть созданы динамически.`,category:"JS"},{_id:a(),question:"Что такое функция первого порядка в JS?",adsver:"Функция первого порядка — это функция, которая не принимает другую функцию в качестве аргумента и не возвращает функцию в качестве возвращаемого значения.",category:"JS"},{_id:a(),question:"Что такое функция высшего порядка?",adsver:`Функция высшего порядка — это функция, которая принимает другую функцию в качестве аргумента или возвращает функцию в качестве возвращаемого значения, или и то, и другое. Вы также можете вызвать функцию, которую вы передаете функции более высокого порядка, в качестве функции обратного вызова.

Функция высшего порядка полезна для написания модульного и многократно используемого кода.`,category:"JS"},{_id:a(),question:"Что такое унарная функция?",adsver:"Унарная функция (т.е. монадическая) — это функция, которая принимает ровно один аргумент.",category:"JS"},{_id:a(),question:"Что такое функция каррирования?",adsver:"Каррирование — это процесс преобразования функции с несколькими аргументами в последовательность функций, каждая из которых имеет только один аргумент. Карринг назван в честь математика Хаскелла Карри . Каррированные функции отлично подходят для улучшения повторного использования кода и функциональной композиции .",category:"JS"},{_id:a(),question:"Что такое чистая функция?",adsver:`Чистая функция — это функция, возвращаемое значение которой определяется только ее аргументами без каких-либо побочных эффектов. т. е. если вы вызываете функцию с одинаковыми аргументами «n» количество раз и «n» количество мест в приложении, она всегда будет возвращать одно и то же значение.
    Помните, что чистые функции важны, поскольку они упрощают модульное тестирование без каких-либо побочных эффектов и отсутствия необходимости внедрения зависимостей. Они также избегают жесткой связи и затрудняют выход из строя вашего приложения, поскольку не имеют каких-либо побочных эффектов. Эти принципы сочетаются с концепцией неизменяемости ES6: предпочтение отдается использованию const , а не let .`,category:"JS"},{_id:a(),question:"Какова цель ключевого слова let?",adsver:"В letоператоре объявляется локальная переменная области блока . Следовательно, переменные, определенные с помощью ключевого слова let, ограничены в области действия блоком, оператором или выражением, в котором они используются. В то время как переменные, объявленные с помощью varключевого слова, используются для определения переменной глобально или локально для всей функции независимо от области действия блока.",category:"JS"},{_id:a(),question:"Что такое временная мертвая зона?",adsver:"Временная мертвая зона (TDZ) — это определенный период или область блока, где переменная недоступна до тех пор, пока она не будет инициализирована значением. Такое поведение в JavaScript, которое происходит при объявлении переменной с ключевыми словами let и const, но не с помощью var.",category:"JS"},{_id:a(),question:"Как определить наличие свойства в объекте?",adsver:"",category:"JS"},{_id:a(),question:"Что такое IIFE?",adsver:"IIFE (выражение немедленно вызываемой функции) — это функция JavaScript, которая запускается сразу после ее определения. Основная причина использования IIFE — обеспечение конфиденциальности данных, поскольку любые переменные, объявленные в IIFE, не могут быть доступны внешнему миру. т. е. если вы попытаетесь получить доступ к переменным из IIFE, возникнет ошибка.",category:"JS"},{_id:a(),question:"Как декодировать или кодировать URL-адрес в JavaScript?",adsver:`encodeURI()Функция используется для кодирования URL. Эта функция требует строку URL-адреса в качестве параметра и возвращает эту закодированную строку. decodeURI()Функция используется для декодирования URL. Эта функция требует в качестве параметра закодированную строку URL-адреса и возвращает эту декодированную строку.
    Если вы хотите закодировать такие символы, как, / ? : @ & = + $ #вам нужно использовать encodeURIComponent().`,category:"JS"},{_id:a(),question:"Что такое мемоизация?",adsver:"Мемоизация — это метод функционального программирования, который пытается повысить производительность функции за счет кэширования ранее вычисленных результатов. Каждый раз, когда вызывается мемоизированная функция, ее параметры используются для индексации кеша. Если данные присутствуют, то их можно вернуть, не выполняя всю функцию. В противном случае функция выполняется, а затем результат добавляется в кеш. ",category:"JS"},{_id:a(),question:"Что такое подъем (Hoisting)?",adsver:"",category:"JS"},{_id:a(),question:"Что такое прототипное наследование? Как создать объект без прототипа?",adsver:"Подъем — это механизм JavaScript, в котором переменные, объявления функций и классы перемещаются в верхнюю часть области видимости перед выполнением кода. Помните, что JavaScript поддерживает только объявления, а не инициализацию.",category:"JS"},{_id:a(),question:"Что такое классы в ES6?",adsver:"В ES6 классы Javascript представляют собой в первую очередь синтаксический сахар по сравнению с существующим в JavaScript наследованием на основе прототипов.",category:"JS"},{_id:a(),question:"Что такое замыкания?",adsver:`Замыкание — это комбинация функции, связанной (заключенной) вместе с ее лексическим окружением, в котором эта функция была объявлена. т. е. это внутренняя функция, которая имеет доступ к переменным, функциям и другим данным внешней или охватывающей функции даже после того, как внешняя функция завершила свое выполнение. Закрытие имеет три цепи охвата.

Собственная область действия, где переменные определены между фигурными скобками.
Переменные внешней функции
Глобальные переменные`,category:"JS"},{_id:a(),question:"Что такое модули?",adsver:"Модули относятся к небольшим единицам независимого, многократно используемого кода, а также служат основой многих шаблонов проектирования JavaScript. Большинство модулей JavaScript экспортируют литерал объекта, функцию или конструктор.",category:"JS"},{_id:a(),question:"Что такое область видимости в JavaScript?",adsver:"Область действия — это доступность переменных, функций и объектов в определенной части вашего кода во время выполнения. Другими словами, область видимости определяет видимость переменных и других ресурсов в областях вашего кода.",category:"JS"},{_id:a(),question:"Что такое Service Worker?",adsver:"Service Worker — это, по сути, сценарий (файл JavaScript), который выполняется в фоновом режиме отдельно от веб-страницы и предоставляет функции, не требующие веб-страницы или взаимодействия с пользователем.",category:"JS"},{_id:a(),question:"Как манипулировать DOM с помощью Service Worker?",adsver:"Service Worker не может получить прямой доступ к DOM. Но он может взаимодействовать со страницами, которые он контролирует, отвечая на сообщения, отправленные через postMessage интерфейс, и эти страницы могут манипулировать DOM.",category:"JS"},{_id:a(),question:"Как повторно использовать информацию при перезапуске Service Worker?",adsver:"Проблема с сервис-воркером заключается в том, что он завершается, когда он не используется, и перезапускается, когда он в следующий раз понадобится, поэтому вы не можете полагаться на глобальное состояние внутри сервис-воркера onfetchи onmessage обработчиков. В этом случае сервис-воркеры будут иметь доступ к API IndexedDB для его сохранения и повторного использования при перезапусках.",category:"JS"},{_id:a(),question:"Что такое IndexedDB?",adsver:"IndexedDB — это низкоуровневый API для хранения на стороне клиента больших объемов структурированных данных, включая файлы и BLOB-объекты. Этот API использует индексы для обеспечения высокопроизводительного поиска этих данных.",category:"JS"},{_id:a(),question:"Что такое веб-хранилище (Web Storage)?",adsver:`Веб-хранилище (Web Storage) — это механизм, предоставляемый браузером, для хранения данных в виде пар ключ-значение на стороне клиента. Он предоставляет простой способ сохранения данных в браузере и доступа к ним из JavaScript.

Существует два основных вида веб-хранилища: локальное хранилище (localStorage) и сеансовое хранилище (sessionStorage).`,category:"JS"},{_id:a(),question:"Что такое файл cookie?",adsver:"Файл cookie — это часть данных, которая хранится на вашем компьютере и доступна вашему браузеру. Файлы cookie сохраняются в виде пар ключ/значение. ",category:"JS"},{_id:a(),question:"Зачем вам нужен файл cookie?",adsver:"Файлы cookie используются для запоминания информации о профиле пользователя (например, имени пользователя).",category:"JS"},{_id:a(),question:"Какие параметры есть в файле cookie?",adsver:`По умолчанию файл cookie удаляется при закрытии браузера, но вы можете изменить это поведение, установив дату истечения срока действия (по времени UTC).
    По умолчанию файл cookie принадлежит текущей странице. Но вы можете сообщить браузеру, какому пути принадлежит файл cookie, используя параметр пути.
    `,category:"JS"},{_id:a(),question:"Как удалить файл cookie?",adsver:"Вы можете удалить файл cookie, установив дату истечения срока его действия как прошедшую дату. В этом случае вам не нужно указывать значение cookie. Вам следует определить параметр пути к файлам cookie, чтобы гарантировать удаление нужного файла cookie. Некоторые браузеры не позволяют удалять файлы cookie, если вы не укажете параметр пути.",category:"JS"},{_id:a(),question:"В чем разница между файлами cookie, локальным хранилищем и хранилищем сеансов?",adsver:`1. Файлы cookie:
   - Хранение данных: Файлы cookie — это небольшие текстовые файлы, которые веб-сайты сохраняют на компьютере пользователя. Они могут содержать информацию, такую как предпочтения пользователя, данные аутентификации и другие сведения.
   - Срок действия: Файлы cookie могут быть постоянными (хранятся на компьютере пользователя на определенный срок) или временными (удаляются после закрытия браузера).
   - Доступность: Файлы cookie доступны как на сервере, так и на клиентской стороне, и они отправляются на сервер при каждом запросе страницы.

2. Локальное хранилище (localStorage):
   - Хранение данных: Локальное хранилище позволяет веб-приложениям сохранять данные в браузере без срока действия. Эти данные остаются на компьютере пользователя даже после закрытия браузера.
   - Срок действия: Данные в локальном хранилище остаются до тех пор, пока пользователь не очистит кэш или пока веб-приложение не удалит их.
   - Доступность: Данные в локальном хранилище доступны только на клиентской стороне и не отправляются на сервер автоматически.

3. Хранилище сеансов (sessionStorage):
   - Хранение данных: Хранилище сеансов предназначено для хранения данных в течение одной сессии браузера. Данные удаляются после закрытия вкладки или окна браузера.
   - Срок действия: Данные в хранилище сеансов сохраняются только на время активной сессии браузера.
   - Доступность: Данные в хранилище сеансов доступны только на клиентской стороне и не отправляются на сервер.`,category:"JS"},{_id:a(),question:"В чем основная разница между localStorage и sessionStorage?",adsver:"LocalStorage аналогичен SessionStorage, но он сохраняет данные, даже когда браузер закрывается и снова открывается (т. е. у него нет срока действия), тогда как в sessionStorage данные очищаются после завершения сеанса страницы.",category:"JS"},{_id:a(),question:"Как получить доступ к веб-хранилищу?",adsver:"Объект Window реализует объекты WindowLocalStorageи со свойствами (window.localStorage) и (window.sessionStorage) соответственно. Эти свойства создают экземпляр объекта Storage, с помощью которого можно устанавливать, получать и удалять элементы данных для определенного домена и типа хранилища (сеансовое или локальное).",category:"JS"},{_id:a(),question:"Какие методы доступны в хранилище сеансов?",adsver:"Хранилище сеансов предоставляет методы для чтения, записи и очистки данных сеанса.",category:"JS"},{_id:a(),question:"Что такое StorageEvent и EventHandler?",adsver:"StorageEvent — это событие, которое срабатывает, когда область хранения была изменена в контексте другого документа. Тогда как свойство onstorage — это EventHandler для обработки событий хранилища.",category:"JS"},{_id:a(),question:"Зачем вам веб-хранилище?",adsver:"Веб-хранилище более безопасно, и большие объемы данных могут храниться локально, не влияя на производительность веб-сайта. Кроме того, информация никогда не передается на сервер. Следовательно, это более рекомендуемый подход, чем использование файлов cookie.",category:"JS"},{_id:a(),question:"Что такое Промис?",adsver:"Промис — это объект, который может когда-нибудь в будущем создать одно значение либо с разрешенным значением, либо с причиной, по которой оно не было разрешено (например, сетевая ошибка). Оно будет находиться в одном из трех возможных состояний: выполнено, отклонено или ожидается.",category:"JS"},{_id:a(),question:"Зачем используются Промисы?",adsver:"Промисы используются для обработки асинхронных операций. Они предоставляют альтернативный подход к обратным вызовам, уменьшая ад обратных вызовов и написав более чистый код.",category:"JS"},{_id:a(),question:"Каковы три состояния Промиса?",adsver:`Промисы имеют три состояния:

Ожидание: это начальное состояние промиса перед началом операции.
Выполнено: это состояние указывает, что указанная операция была завершена.
Отклонено: это состояние указывает на то, что операция не завершена. В этом случае будет выдано значение ошибки.`,category:"JS"},{_id:a(),question:"Что такое функция обратного вызова (CallBack)?",adsver:"Функция обратного вызова — это функция, передаваемая в другую функцию в качестве аргумента. Эта функция вызывается внутри внешней функции для завершения действия.",category:"JS"},{_id:a(),question:"Зачем нам нужны CallBack?",adsver:"Callback функции играют важную роль в асинхронном программировании и обработке событий в JavaScript. callback функции являются мощным инструментом в JavaScript, который позволяет эффективно управлять асинхронным кодом, обработкой событий и контролем потока выполнения.",category:"JS"},{_id:a(),question:"Что такое Callback Hell?",adsver:"Callback Hell — это антишаблон с несколькими вложенными обратными вызовами, который затрудняет чтение и отладку кода при работе с асинхронной логикой.",category:"JS"},{_id:a(),question:"Что такое события, отправляемые сервером (SSE)?",adsver:"События, отправляемые сервером (Server-Sent Events, SSE), представляют собой технологию веб-браузера, которая позволяет серверу отправлять асинхронные обновления клиенту через однонаправленное соединение. SSE предоставляет простой механизм для установления соединения между сервером и клиентом, который позволяет серверу отправлять данные клиенту без необходимости постоянного опроса (polling) или использования веб-сокетов. SSE широко используется для реализации функциональности реального времени, такой как обновление новостной ленты, чата в реальном времени, уведомлений и других приложений, где требуется мгновенная передача данных от сервера к клиенту.",category:"JS"},{_id:a(),question:"Каковы основные правила Promise?",adsver:`Промис создается с помощью конструктора Promise. Он принимает функцию-исполнитель (executor), которая в свою очередь принимает два аргумента: resolve (для успешного выполнения операции) и reject (для ошибки). Промис может находиться в трех состояниях: pending (ожидание), fulfilled (выполнен) и rejected (отклонен). После создания промис находится в состоянии pending, затем переходит в состояние fulfilled, если операция завершилась успешно, или в состояние rejected, если произошла ошибка.
    Для обработки результата выполнения промиса используются методы then (для успешного выполнения) и catch (для обработки ошибок). Метод then принимает колбэк для обработки успешного результата, а метод catch используется для обработки ошибок.Промисы могут быть объединены в цепочку с помощью метода then, что позволяет последовательно выполнять асинхронные операции.`,category:"JS"},{_id:a(),question:"Что такое Promise.all?",adsver:"Promise.all — это промис, который принимает массив промисов в качестве входных данных (итерируемый объект), и он разрешается, когда все промисы решены или какой-либо из них отклонен.",category:"JS"},{_id:a(),question:"Что такое Promise.race()?",adsver:"Метод Promise.race() вернет экземпляр Promise, который был первым разрешен или отклонен. ",category:"JS"},{_id:a(),question:"Что такое строгий режим в JavaScript?",adsver:'Строгий режим — это новая функция ECMAScript 5, которая позволяет поместить программу или функцию в «строгий» рабочий контекст. Таким образом, он предотвращает выполнение определенных действий и генерирует больше исключений. Буквальное выражение "use strict";указывает браузеру использовать код JavaScript в строгом режиме.',category:"JS"},{_id:a(),question:"Зачем нужен строгий режим?",adsver:"Строгий режим полезен для написания «безопасного» JavaScript, уведомляя «плохой синтаксис» о реальных ошибках. Например, он исключает случайное создание глобальной переменной путем выдачи ошибки, а также выдает ошибку при присвоении свойству, не доступному для записи, свойству, доступному только для получения, несуществующему свойству, несуществующей переменной или несуществующему свойству. существующий объект.",category:"JS"},{_id:a(),question:"Как объявить строгий режим?",adsver:"Строгий режим объявляется добавлением «use strict»; в начало скрипта или функции. Если он объявлен в начале скрипта, он имеет глобальную область действия.",category:"JS"},{_id:a(),question:"Какова цель !!?",adsver:`В JavaScript двойное восклицание !! используется для преобразования значения в логический тип данных (boolean). При использовании двойного восклицания перед значением происходит двойное преобразование типа данных: значение сначала преобразуется в логический тип, а затем результат этого преобразования инвертируется (если изначальное значение было ложным, после преобразования оно станет false, а если истинным, то true).

Например, если у нас есть переменная var x = 5;, то !!x вернет true, так как число 5 является истинным значением в JavaScript.

Это часто используется для приведения значений к булевому типу или для проверки значения на истинность или ложность.`,category:"JS"},{_id:a(),question:"Что такое оператор typeof?",adsver:"Оператор typeof в JavaScript используется для определения типа данных значения. Он возвращает строку, указывающую тип данных операнда.",category:"JS"},{_id:a(),question:"Что такое неопределенное свойство (undefined)?",adsver:"Неопределенное свойство указывает, что переменной не присвоено значение или она объявлена, но не инициализирована вообще. Тип неопределенного значения также не определен. Любую переменную можно очистить, установив ее значение неопределенным (undefined).",category:"JS"},{_id:a(),question:"Что такое значение null?",adsver:"Значение null представляет намеренное отсутствие какого-либо значения объекта. Это одно из примитивных значений JavaScript. Тип нулевого значения — объект. Вы можете очистить переменную, установив ее значение равным null",category:"JS"},{_id:a(),question:"В чем разница между null и undefined?",adsver:"В JavaScript null и undefined являются двумя разными значениями, обозначающими отсутствие значения. undefined обычно возникает как значение по умолчанию для переменных без присвоения, в то время как null используется для явного указания на отсутствие значения.",category:"JS"},{_id:a(),question:"Что такое NaN?",adsver:'NaN в JavaScript означает "Not a Number" и представляет собой специальное значение, которое указывает на то, что результат математической операции не является числом. Функция isNaN() используется для определения того, является ли значение недопустимым числом (не числом) или нет. т. е. эта функция возвращает true, если значение равно NaN. В противном случае он возвращает false.',category:"JS"},{_id:a(),question:"Что такое глобальные переменные?",adsver:"В JavaScript глобальные переменные — это переменные, которые объявлены в глобальной области видимости, то есть вне какой-либо функции. Они могут быть доступны из любой части вашего скрипта. Использование глобальных переменных в JavaScript может быть удобным, но следует использовать их с осторожностью, чтобы избежать потенциальных проблем с управлением состоянием и поддержкой кода.",category:"JS"},{_id:a(),question:"Какова цель функции isFinite?",adsver:"Цель функции isFinite в JavaScript заключается в том, чтобы определить, является ли переданное значение конечным числом (finite number). Функция isFinite возвращает логическое значение true, если аргумент, переданный ей, является числом и не равен Infinity или -Infinity. В противном случае она возвращает false.",category:"JS"},{_id:a(),question:"Что такое поток событий в JavaScript?",adsver:`Поток событий — это порядок, в котором события принимаются на веб-странице. Когда вы щелкаете элемент, вложенный в различные другие элементы, прежде чем ваш щелчок действительно достигнет места назначения или целевого элемента, он должен сначала вызвать событие щелчка для каждого из своих родительских элементов, начиная сверху с объекта глобального окна.
    Существует два способа потока событий: Сверху вниз (захват событий), Снизу вверх (всплывание событий).`,category:"JS"},{_id:a(),question:"Что такое всплытие событий?",adsver:`Всплытие событий (Event Bubbling) в JavaScript — это механизм, при котором событие, сгенерированное во вложенном элементе DOM, передается по цепочке родительским элементам до самого верхнего уровня документа. То есть событие "всплывает" от дочернего элемента к родительским.

Процесс всплытия событий позволяет обрабатывать одно и то же событие на нескольких уровнях вложенности элементов без необходимости назначения обработчика на каждый элемент отдельно. Всплытие событий полезно, но иногда может вызывать проблемы. В таких случаях можно использовать метод event.stopPropagation() или event.stopImmediatePropagation() для остановки всплытия и предотвращения выполнения обработчиков на других уровнях вложенности.`,category:"JS"},{_id:a(),question:"Что такое захват событий в JavaScript?",adsver:`Захват событий (Event Capturing) в JavaScript — это другой механизм обработки событий, противоположный всплытию событий. При захвате событий обработчик сначала срабатывает на самом верхнем уровне документа и затем спускается вниз по цепочке элементов до целевого элемента, на котором произошло событие.

Процесс захвата событий позволяет перехватывать событие на ранних стадиях его распространения и обработки, прежде чем оно достигнет целевого элемента. Это может быть полезно, если необходимо предотвратить выполнение каких-то действий до того, как событие дойдет до конечного элемента.

Для использования захвата событий в JavaScript можно добавить третий параметр в метод addEventListener, указав true, что означает использование захвата. Обычно для обработки событий используется всплытие, так как оно более распространено и удобно в большинстве случаев.`,category:"JS"},{_id:a(),question:"Является ли JavaScript компилируемым или интерпретируемым языком?",adsver:"",category:"JS"},{_id:a(),question:"Что такое выражения (expression) и инструкции (statement) в JavaScript?",adsver:"JavaScript — это интерпретируемый язык, а не компилируемый язык. Интерпретатор в браузере читает код JavaScript, интерпретирует каждую строку и запускает его. В настоящее время современные браузеры используют технологию, известную как компиляция Just-In-Time (JIT), которая компилирует JavaScript в исполняемый байт-код непосредственно перед его запуском.",category:"JS"},{_id:a(),question:"Является ли JavaScript языком, чувствительным к регистру?",adsver:"Да, JavaScript — язык, чувствительный к регистру. Ключевые слова языка, переменные, имена функций и объектов, а также любые другие идентификаторы всегда должны вводиться с использованием заглавных букв.",category:"JS"},{_id:a(),question:"Для чего используется метод PreventDefault()?",adsver:"Метод PreventDefault() отменяет событие, если оно может быть отменено. Это означает, что действие или поведение по умолчанию, принадлежащее событию, не произойдет. Например, некоторые распространенные варианты использования — запретить отправку формы при нажатии кнопки отправки и запретить открытие URL-адреса страницы при нажатии на гиперссылку.",category:"JS"},{_id:a(),question:"Для чего используется метод stopPropagation?",adsver:"Метод stopPropagation используется для предотвращения возникновения события в цепочке событий.",category:"JS"},{_id:a(),question:"Для чего нужен метод setTimeout?",adsver:"Метод setTimeout в JavaScript используется для запуска выполнения определенной функции или передачи кода через определенный промежуток времени. Этот метод позволяет установить задержку (в миллисекундах) перед выполнением указанной функции. setTimeout часто применяется для создания анимаций, задержек перед выполнением определенных действий, обработки пользовательского ввода и других сценариев, где необходимо управлять временными интервалами.",category:"JS"},{_id:a(),question:"Для чего нужен метод setInterval?",adsver:"Метод setInterval в JavaScript используется для запуска выполнения определенной функции или передачи кода через определенные промежутки времени, повторяя его через указанный интервал. По сравнению с методом setTimeout, который запускает функцию один раз через указанный промежуток времени, setInterval будет продолжать вызывать функцию с заданным интервалом до тех пор, пока не будет явно остановлен.",category:"JS"},{_id:a(),question:"Почему JavaScript считается однопоточным?",adsver:"JavaScript — это однопоточный язык. Потому что спецификация языка не позволяет программисту писать код так, чтобы интерпретатор мог запускать его части параллельно в нескольких потоках или процессах. В то время как такие языки, как Java, Go, C++ позволяют создавать многопоточные и многопроцессные программы.",category:"JS"},{_id:a(),question:"Что такое делегирование событий?",adsver:`Делегирование событий веб-разработке — это техника, при которой обработчик событий назначается одному из родительских элементов для обработки событий от его потомков. Это позволяет эффективно обрабатывать события от большого числа элементов, особенно если они создаются динамически или их много на странице.

Принцип делегирования событий основан на том, что событие, происходящее во вложенном элементе, будет всплывать вверх по иерархии DOM до тех пор, пока не будет обработано. При использовании делегирования мы можем назначить обработчик события на родительский элемент и определить условия, при которых нужно обработать это событие.`,category:"JS"},{_id:a(),question:"Что такое JSON?",adsver:"JSON (нотация объектов JavaScript) — это облегченный формат, используемый для обмена данными. Он основан на подмножестве языка JavaScript, который используется для построения объектов в JavaScript.",category:"JS"},{_id:a(),question:"Для чего нужен метод JSON.stringify()?",adsver:"Метод JSON.stringify() в JavaScript используется для преобразования значений JavaScript в строку JSON. Основная цель этого метода — сериализация (преобразование в строку) данных, чтобы их можно было передавать по сети, сохранять в файлы или хранить в базе данных.",category:"JS"},{_id:a(),question:"Как преобразовать строку в JSON?",adsver:"При получении данных с веб-сервера данные всегда имеют строковый формат. Но вы можете преобразовать это строковое значение в объект javascript, используя метод parse().",category:"JS"},{_id:a(),question:"Зачем вам нужен JSON?",adsver:"При обмене данными между браузером и сервером данные могут быть только текстовыми. Поскольку JSON — это только текст, его можно легко отправлять на сервер и с него, а также использовать в качестве формата данных на любом языке программирования.",category:"JS"},{_id:a(),question:"Что такое PWA?",adsver:"PWA (Progressive Web Application) — это веб-приложение, которое сочетает в себе лучшие характеристики веб-сайтов и мобильных приложений. PWA предлагают пользователю опыт, близкий к нативным мобильным приложениям, но без необходимости установки через магазин приложений.",category:"JS"},{_id:a(),question:"Какова цель метода clearTimeout??",adsver:"Функция clearTimeout() используется в javascript для очистки таймаута, установленного до этого функцией setTimeout(). т.е. возвращаемое значение функции setTimeout() сохраняется в переменной и передается в функцию clearTimeout() для очистки таймера.",category:"JS"},{_id:a(),question:"Какова цель метода clearInterval?",adsver:"Функция clearInterval() используется в JavaScript для очистки интервала, установленного функцией setInterval(). т. е. возвращаемое значение, возвращаемое функцией setInterval(), сохраняется в переменной и передается в функцию clearInterval() для очистки интервала.",category:"JS"},{_id:a(),question:"Как проверить, содержит ли строка подстроку?",adsver:"Использовать один из трёх способов: метод includes, метод indexOf, метод RegExp.test",category:"JS"},{_id:a(),question:"Как получить значения строки запроса в JavaScript?",adsver:"Вы можете использовать URLSearchParams для получения значений строки запроса в JavaScript.",category:"JS"},{_id:a(),question:"Как проверить, существует ли ключ в объекте?",adsver:"Проверить, существует ли ключ в объекте или нет, можно тремя способами: Использование оператора in, Использование метода hasOwnProperty, Использование неопределенного сравнения с undefined.",category:"JS"},{_id:a(),question:"Как перебрать объект в JavaScript?",adsver:"Вы можете использовать цикл for-in для перебора объекта javascript. Вы также можете убедиться, что полученный вами ключ является реальным свойством объекта, а не получен из прототипа, используя метод hasOwnProperty.",category:"JS"},{_id:a(),question:"Как проверить что объект не пустой в JavaScript?",adsver:"Для проверки, что объект не является пустым в JavaScript, можно использовать несколько различных подходов. Использовать метод entries. Использовать for-in с hasOwnProperty.  Использовать Object.keys(obj).length",category:"JS"},{_id:a(),question:"Что такое объект arguments?",adsver:"Это объект типа Array, доступный внутри функций, который содержит значения аргументов, переданных этой функции. Вы не можете применять методы массива к объекту аргументов. Но вы можете преобразовать в обычный массив используя Array.prototype.slice.call(arguments)",category:"JS"},{_id:a(),question:"Как сделать первую букву строки заглавной?",adsver:"Вы можете создать функцию, которая использует цепочку строковых методов, таких как charAt, toUpperCase и метод slice, для создания строки с первой буквой в верхнем регистре.",category:"JS"},{_id:a(),question:"Как отобразить текущую дату в JavaScript?",adsver:"Вы можете использовать  new Date() для создания нового объекта Date, содержащего текущую дату и время.",category:"JS"},{_id:a(),question:"Как сравнить два объекта даты?",adsver:"Вам нужно использовать метод date.getTime() для сравнения значений даты.",category:"JS"},{_id:a(),question:"Как обрезать строку в JavaScript?",adsver:"В JavaScript предусмотрен метод trim() для типов строк, позволяющий обрезать любые пробелы, присутствующие в начале или конце строки.",category:"JS"},{_id:a(),question:"Как присвоить переменным значения по умолчанию?",adsver:"Вы можете использовать логический оператор или ||в выражении присваивания, чтобы указать значение по умолчанию. Синтаксис выглядит следующим образом: var a = b || c; Согласно приведенному выше выражению, переменная «a» получит значение «c», только если «b» имеет ложное значение (если оно равно нулю, ложно, неопределенно, 0, пустая строка или NaN), в противном случае «a» получит значение значение «б».",category:"JS"},{_id:a(),question:"Что такое полифил?",adsver:"Полифил — это фрагмент JS-кода, используемый для обеспечения современных функций в старых браузерах, которые не поддерживают его изначально. ",category:"JS"},{_id:a(),question:"Как генерировать случайные целые числа?",adsver:"Вы можете использовать Math.random() с Math.floor() для возврата случайных целых чисел. Например, если вы хотите генерировать случайные целые числа от 1 до 10, коэффициент умножения должен быть 10. Math.random() возвращает случайное число от 0 (включительно) до 1 (исключительно).",category:"JS"},{_id:a(),question:"Что такое регулярное выражение?",adsver:"Регулярное выражение — это последовательность символов, образующая шаблон поиска. Вы можете использовать этот шаблон поиска для поиска данных в тексте. Их можно использовать для выполнения всех типов операций текстового поиска и замены текста. ",category:"JS"},{_id:a(),question:"Какие строковые методы доступны в регулярном выражении?",adsver:"Регулярные выражения имеют два строковых метода: search() и replace(). Метод search() использует выражение для поиска совпадения и возвращает позицию совпадения. Метод replace() используется для возврата измененной строки, в которой заменен шаблон.",category:"JS"},{_id:a(),question:"Как преобразовать дату в другой часовой пояс в JavaScript?",adsver:"Вы можете использовать метод toLocaleString() для преобразования дат из одного часового пояса в другой.",category:"JS"},{_id:a(),question:"Какие свойства используются для получения размера окна?",adsver:"Вы можете использовать свойства InsideWidth, InternalHeight, clientWidth, clientHeight окон, элементов документа и объектов тела документа, чтобы определить размер окна. ",category:"JS"},{_id:a(),question:"Что такое условный (тернарный) оператор в JavaScript?",adsver:"Условный (тернарный) оператор — единственный оператор JavaScript, который принимает три операнда и действует как сокращение для операторов if.",category:"JS"},{_id:a(),question:"Можно ли применить цепочку к условному (тернарному) оператору?",adsver:"Да, вы можете применять цепочку к условным операторам, похожую на цепочку if … else if … else if … else.",category:"JS"},{_id:a(),question:"Какие существуют способы выполнения JavaScript после загрузки страницы?",adsver:'Вы можете выполнить JavaScript после загрузки страницы разными способами: window.onload = function ..., document.onload = function ..., <body onload="script();',category:"JS"},{_id:a(),question:"В чем разница между прото и прототипом?",adsver:"Объект __proto__— это фактический объект, который используется в цепочке поиска для разрешения методов и т. д. Тогда как prototype— это объект, который используется для построения, __proto__когда вы создаете объект с помощью new.",category:"JS"},{_id:a(),question:"Что такое метод freeze ()?",adsver:"Метод freeze () используется для заморозки объекта. Заморозка объекта не позволяет добавлять новые свойства к объекту, предотвращает удаление и предотвращает изменение перечисляемости, настраиваемости или возможности записи существующих свойств. То есть он возвращает переданный объект и не создает замороженную копию. Помните, что заморозка применяется только к свойствам верхнего уровня в объектах, но не к вложенным объектам.",category:"JS"},{_id:a(),question:"Какова цель метода freeze ()?",adsver:"1) Используется для заморозки объектов и массивов. 2) Он используется, чтобы сделать объект неизменяемым.",category:"JS"},{_id:a(),question:"Зачем мне нужно использовать метод freeze ()?",adsver:"В объектно-ориентированной парадигме существующий API содержит определенные элементы, которые не предназначены для расширения, изменения или повторного использования вне их текущего контекста. Следовательно, он работает как final ключевое слово, которое используется в различных языках.",category:"JS"},{_id:a(),question:"Что такое параметр  Rest?",adsver:`Параметр Rest — это улучшенный способ обработки параметров функции, который позволяет нам представлять неопределенное количество аргументов в виде массива.
    Параметр Rest часто используется в комбинации с другими параметрами функции и может быть полезен в следующих случаях:

1. Сбор данных: Когда необходимо собрать несколько значений в один массив.
2. Передача параметров: Упрощает передачу переменного числа аргументов в функции.`,category:"JS"},{_id:a(),question:"Что произойдет, если не использовать параметр rest в качестве последнего аргумента?",adsver:"Параметр rest должен быть последним аргументом, так как его задача — собрать все оставшиеся аргументы в массив.",category:"JS"},{_id:a(),question:"Какие побитовые операторы доступны в JavaScript?",adsver:`Ниже приведен список побитовых логических операторов, используемых в JavaScript.
    Побитовое И ( & )
Побитовое ИЛИ ( | )
Побитовое исключающее ИЛИ (^)
Побитовое НЕ (~)
Сдвиг влево ( << )
Знак, распространяющий сдвиг вправо ( >> )
Заполнение нулями, сдвиг вправо ( >>> )`,category:"JS"},{_id:a(),question:"Что такое оператор Spread?",adsver:"Оператор Spread позволяет итерируемым объектам (массивам / объектам / строкам) расширяться до отдельных аргументов / элементов.",category:"JS"},{_id:a(),question:"Как определить, заморожен ли объект или нет?",adsver:"Метод Object.isFrozen() используется для определения того, заморожен ли объект или нет.",category:"JS"},{_id:a(),question:"Как копировать свойства из одного объекта в другой?",adsver:"Вы можете использовать метод Object.assign(), который используется для копирования значений и свойств из одного или нескольких исходных объектов в целевой объект. Он возвращает целевой объект, который имеет свойства и значения, скопированные из исходных объектов.",category:"JS"},{_id:a(),question:"Что такое  Proxy?",adsver:`Proxy — это встроенный объект в JavaScript, который позволяет создавать прокси-объекты для других объектов. Он предоставляет возможность перехватывать и изменять основные операции, такие как доступ к свойствам, вызов функций и другие действия.
    
    ### Основные возможности Proxy:

1. **Перехват операций**: Proxy позволяет перехватывать операции, такие как чтение и запись свойств, вызов функций и т.д. Это делается с помощью ловушек (trap), которые определяют, как будет обрабатываться каждая операция.

2. **Ловушки (traps)**: Ловушки — это методы, которые можно определить в прокси-объекте для перехвата операций. Например:
   - get: перехватывает доступ к свойствам.
   - set: перехватывает запись свойств.
   - apply: перехватывает вызовы функций.
   - construct: перехватывает создание экземпляров.

3. **Создание прокси**: Создание прокси выполняется с помощью конструктора Proxy, который принимает два аргумента:
   - Целевой объект (target) — объект, для которого создается прокси.
   - Объект ловушек (handler) — объект, который содержит методы для перехвата операций.`,category:"JS"},{_id:a(),question:"Как определить, заморожен ли объект или нет?",adsver:"Метод Object.seal() используется для запечатывания объекта, предотвращая добавление к нему новых свойств и помечая все существующие свойства как ненастраиваемые. Но значения текущих свойств все равно могут быть изменены, пока они доступны для записи.",category:"JS"},{_id:a(),question:"Какова цель метода уплотнения?",adsver:"Метод Object.seal() используется для запечатывания объекта, предотвращая добавление к нему новых свойств и помечая все существующие свойства как ненастраиваемые. Но значения текущих свойств все равно могут быть изменены, пока они доступны для записи. Давайте рассмотрим пример ниже, чтобы лучше понять метод seal()",category:"JS"},{_id:a(),question:"Когда использовать Object.seal()?",adsver:`- Если вы хотите предотвратить изменения структуры объекта (добавление или удаление свойств), но при этом хотите позволить изменение значений существующих свойств.
- Это может быть полезно в ситуациях, когда вы хотите сохранить целостность данных, но при этом разрешить модификацию значений.`,category:"JS"},{_id:a(),question:"В чем разница между методами заморозки и герметизации?",adsver:"Если объект заморожен с помощью метода Object.freeze(), то его свойства становятся неизменяемыми, и в них нельзя вносить изменения, тогда как если объект запечатан с помощью метода Object.seal(), то изменения можно вносить в существующие свойства объекта.",category:"JS"},{_id:a(),question:"Как получить перечислимые пары ключ-значение",adsver:"Метод Object.entries() используется для возврата массива собственных перечислимых пар строковых свойств [ключ, значение] данного объекта в том же порядке, что и в цикле for...in.",category:"JS"},{_id:a(),question:"В чем основное различие между методами Object.values ​​и Object.entries?",adsver:"Поведение метода Object.values() похоже на поведение метода Object.entries(), но он возвращает массив значений вместо пар [ключ, значение].",category:"JS"},{_id:a(),question:"Как можно получить список ключей любого объекта?",adsver:"Вы можете использовать Object.keys()метод, который используется для возврата массива собственных имен свойств данного объекта, в том же порядке, который мы получаем с помощью обычного цикла.",category:"JS"},{_id:a(),question:"Как создать объект с прототипом",adsver:"Метод Object.create() используется для создания нового объекта с указанным прототипом объекта и свойствами. т. е. он использует существующий объект в качестве прототипа вновь созданного объекта. Он возвращает новый объект с указанным прототипом объекта и свойствами.",category:"JS"},{_id:a(),question:"Что такое WeakSet",adsver:"WeakSet используется для хранения коллекции слабо(слабые ссылки) удерживаемых объектов. Синтаксис будет следующим: new WeakSet([iterable]);",category:"JS"},{_id:a(),question:"В чем разница между WeakSet и Set?",adsver:"Главное отличие в том, что ссылки на объекты в Set являются сильными, а ссылки на объекты в WeakSet являются слабыми. т.е. объект в WeakSet может быть удален сборщиком мусора, если на него нет других ссылок.",category:"JS"},{_id:a(),question:"Что такое WeakMap",adsver:"Объект WeakMap представляет собой коллекцию пар ключ/значение, в которой ключи слабо связаны. В этом случае ключи должны быть объектами, а значения могут быть произвольными. Синтаксис выглядит следующим образом: new WeakMap([iterable]);",category:"JS"},{_id:a(),question:"В чем разница между WeakMap и Map?",adsver:"Главное отличие в том, что ссылки на ключевые объекты в Map являются сильными, а ссылки на ключевые объекты в WeakMap являются слабыми. т.е. Ключевой объект в WeakMap может быть удален сборщиком мусора, если на него нет других ссылок.",category:"JS"},{_id:a(),question:"Как кодировать URL",adsver:"Функция encodeURI() используется для кодирования полного URI, который содержит специальные символы, за исключением символов (, / ? : @ & = + $ #).",category:"JS"},{_id:a(),question:"Как расшифровать URL",adsver:"Функция decodeURI() используется для декодирования унифицированного идентификатора ресурса (URI), ранее созданного с помощью encodeURI().",category:"JS"},{_id:a(),question:"Что такое анонимная функция",adsver:"Анонимная функция — это функция без имени! Анонимные функции обычно назначаются имени переменной или используются как функция обратного вызова.",category:"JS"},{_id:a(),question:"Как определить свойство в конструкторе объекта?",adsver:"Статический метод Object.defineProperty() используется для определения нового свойства непосредственно на объекте или изменения существующего свойства на объекте и возвращает объект.",category:"JS"},{_id:a(),question:"В чем разница между get и defineProperty?",adsver:"Оба имеют схожие результаты, если вы не используете классы. Если вы используете getсвойство, оно будет определено в прототипе объекта, тогда как при использовании Object.defineProperty()свойство будет определено в экземпляре, к которому оно применяется.",category:"JS"},{_id:a(),question:"Могу ли я добавить геттеры и сеттеры с помощью метода defineProperty?",adsver:"Да, вы можете использовать Object.defineProperty()метод для добавления геттеров и сеттеров. Например, приведенный ниже объект счетчика использует свойства инкремента, декремента, добавления и вычитания",category:"JS"},{_id:a(),question:"Что такое примитивные типы данных",adsver:"Примитивный тип данных — это данные, имеющие примитивное значение (не имеющие свойств или методов). Существует 7 типов примитивных типов данных.",category:"JS"},{_id:a(),question:"Что такое итератор",adsver:"Итератор — это объект, который определяет последовательность и возвращаемое значение по ее завершению. Он реализует протокол Iterator с методом, next()который возвращает объект с двумя свойствами: value(следующее значение в последовательности) и done(что является истинным, если последнее значение в последовательности было использовано).",category:"JS"},{_id:a(),question:"Что такое цикл событий?",adsver:"Цикл событий — это процесс, который непрерывно отслеживает как стек вызовов, так и очередь событий и проверяет, пуст ли стек вызовов. Если стек вызовов пуст и в очереди событий есть ожидающие события, цикл событий извлекает событие из очереди событий и помещает его в стек вызовов. Стек вызовов выполняет событие, и любые дополнительные события, сгенерированные во время выполнения, добавляются в конец очереди событий.",category:"JS"},{_id:a(),question:"Что такое стек вызовов?",adsver:"Call Stack — это структура данных для интерпретаторов JavaScript, которая отслеживает вызовы функций (создает контекст выполнения) в программе.",category:"JS"},{_id:a(),question:"Что такое оператор запятая?",adsver:"Оператор запятой используется для оценки каждого из своих операндов слева направо и возвращает значение последнего операнда. Это полностью отличается от использования запятой в массивах, объектах, аргументах и ​​параметрах функций. ",category:"JS"},{_id:a(),question:"В чем преимущество оператора запятой?",adsver:"Обычно он используется для включения нескольких выражений в место, требующее одного выражения. Одним из распространенных применений этого оператора запятой является предоставление нескольких параметров в цикле for.",category:"JS"},{_id:a(),question:"Что такое метод-конструктор?",adsver:"Метод конструктора — это специальный метод для создания и инициализации объекта, созданного в классе. Если вы не укажете метод конструктора, будет использован конструктор по умолчанию.",category:"JS"},{_id:a(),question:"Как вызвать конструктор родительского класса?",adsver:"Вы можете использовать superключевое слово для вызова конструктора родительского класса. Помните, что его super()необходимо вызвать до использования ссылки 'this'. В противном случае это вызовет ошибку ссылки.",category:"JS"},{_id:a(),question:"Как получить прототип объекта",adsver:"Вы можете использовать Object.getPrototypeOf(obj)метод для возврата прототипа указанного объекта. Т.е. значения внутреннего prototypeсвойства. Если нет унаследованных свойств, то nullвозвращается значение.",category:"JS"},{_id:a(),question:"Как установить прототип одного объекта для другого",adsver:"Вы можете использовать Object.setPrototypeOf()метод, который устанавливает прототип (т.е. внутреннее Prototypeсвойство) указанного объекта на другой объект или null. ",category:"JS"},{_id:a(),question:"Как проверить, можно ли расширить объект или нет?",adsver:"Метод Object.isExtensible()используется для определения того, является ли объект расширяемым или нет, т. е. можно ли добавлять к нему новые свойства или нет.",category:"JS"},{_id:a(),question:"Как предотвратить расширение объекта?",adsver:"Метод Object.preventExtensions()используется для предотвращения добавления новых свойств к объекту. Другими словами, он предотвращает будущие расширения объекта.",category:"JS"},{_id:a(),question:"Как определить несколько свойств объекта?",adsver:"Метод Object.defineProperties()используется для определения новых или изменения существующих свойств непосредственно на объекте и возврата объекта.",category:"JS"},{_id:a(),question:"Как перечислить все свойства объекта?",adsver:"Вы можете использовать Object.getOwnPropertyNames()метод, который возвращает массив всех свойств, найденных непосредственно в данном объекте.",category:"JS"},{_id:a(),question:"Как получить дескрипторы свойств объекта",adsver:"Вы можете использовать Object.getOwnPropertyDescriptors()метод, который возвращает все собственные дескрипторы свойств данного объекта.",category:"JS"},{_id:a(),question:"Что такое деструктуризация",adsver:"Деструктурирующее назначение — это выражение JavaScript, которое позволяет распаковывать значения из массивов или свойства из объектов в отдельные переменные. ",category:"JS"},{_id:a(),question:"Что такое таблица событий?",adsver:"Таблица событий — это структура данных, которая хранит и отслеживает все события, которые будут выполнены асинхронно, например, через определенный промежуток времени или после разрешения некоторых запросов API. То есть, всякий раз, когда вы вызываете функцию setTimeout или асинхронную операцию, она добавляется в таблицу событий. Она не выполняет функции сама по себе.",category:"JS"},{_id:a(),question:"Что такое очередь microTask",adsver:"Microtask Queue — это новая очередь, в которой все задачи, инициированные объектами promise, обрабатываются до очереди обратного вызова. Очередь микрозадач обрабатывается до следующих заданий рендеринга и рисования. Но если эти микрозадачи выполняются долгое время, это приводит к визуальной деградации.",category:"JS"},{_id:a(),question:"Что такое HTML и каковы его основные компоненты?",adsver:"HTML (язык гипертекстовой разметки) — стандартный язык разметки для создания веб-страниц. Его основные компоненты включают элемент, теги и атрибут.",category:"500"},{_id:a(),question:"Каково назначение Doctype в HTML?",adsver:"Декларация Doctype определяет тип используемого документа и сообщает веб-браузеру, как интерпретировать содержимое страниц. Она расположена в верхней части HTML-документа.",category:"500"},{_id:a(),question:"Что такое семантический HTML?",adsver:"Семантический HTML использует определенные элементы HTML для предоставления дополнительной информации о структуре и содержании страницы, делая ее более доступной и легкой для чтения.",category:"500"},{_id:a(),question:"Какие типы списков существуют в HTML?",adsver:"В HTML существует 3 типа списков: упорядоченный список, неупорядоченный список и список определений.",category:"500"},{_id:a(),question:"В чем разница между элементом div и элементом span?",adsver:"Элемент div — это блочный элемент, который используется для группировки и организации других элементов HTML, в то время как элемент span — это встроенный элемент, который используется для применения стиля или атрибута к определенной части блочного элемента.",category:"500"},{_id:a(),question:"В чем разница между тегами <b> и <strong> в HTML?",adsver:"Тег <B> используется для применения жирного шрифта к тексту, в то время как тег <strong> используется для указания того, что текст важен и имеет более сильное семантическое значение, чем <b>.",category:"500"},{_id:a(),question:"Какие типы полей ввода существуют в HTML?",adsver:"В HTML существует несколько типов полей ввода, включая текст, пароль, флажок, радиокнопку, кнопку отправки, файл и сброс.",category:"500"},{_id:a(),question:"В чем разница между запросом GET и запросом POST?",adsver:`Запрос GET используется для получения данных с веб-сервера, в то время как запрос POST используется для отправки данных на веб-сервер. Запросы GET менее безопасны и имеют ограничение на объем данных, которые могут быть отправлены, в то время как запросы POST не имеют ограничений и более безопасны.

`,category:"500"},{_id:a(),question:"Каково назначение атрибута alt в HTML?",adsver:"Атрибут alt используется для предоставления текстового описания изображения для пользователей, которые не могут увидеть изображение, например, для тех, кто использует программы чтения с экрана.",category:"500"},{_id:a(),question:"Что такое элементы void в HTML?",adsver:"Элементы Void — это те элементы в HTML, которые не имеют закрывающего тега или не нуждаются в закрытии. Пример: <br />, <img /> и т. д.",category:"500"},{_id:a(),question:"В чем разница между тегом <link> и тегом <a>?",adsver:"Тег привязки <a> используется для создания гиперссылки на другую веб-страницу или на определенную часть веб-страницы, и эти ссылки являются кликабельными, тогда как тег ссылки <link> определяет ссылку между документом и внешним ресурсом, и они не являются кликабельными.",category:"500"},{_id:a(),question:"Что такое элемент canvas в HTML5?",adsver:"HTML-форма — это раздел веб-страницы, позволяющий пользователям вводить и отправлять данные на сервер.",category:"500"},{_id:a(),question:"Что такое HTML-форма?",adsver:"Атрибут alt используется для предоставления текстового описания изображения для пользователей, которые не могут увидеть изображение, например, для тех, кто использует программы чтения с экрана.",category:"500"},{_id:a(),question:"В чем разница между атрибутами «action» и «method» HTML-формы?",adsver:"Атрибут «action» указывает URL-адрес, на который отправляются данные формы, а атрибут «method» указывает метод HTTP при отправке данных формы («GET» или «POST»).",category:"500"},{_id:a(),question:"Каково назначение тега <head>?",adsver:"Тег <head> в HTML используется для предоставления метаданных о документе, таких как заголовок страницы, ссылки и другая информация, которая не отображается напрямую на веб-странице. Эта информация используется браузером и поисковой системой для понимания содержания и структуры веб-страницы.",category:"500"},{_id:a(),question:"Каково назначение тега <meta> в HTML?",adsver:"Тег <meta> используется для предоставления дополнительной информации о веб-странице, такой как автор, ключевые слова, описание, которая используется поисковыми системами для понимания содержимого страницы.",category:"500"},{_id:a(),question:"Каково назначение тега <script> в HTML?",adsver:"Тег <script> либо используется для внедрения клиентского скрипта (Javascript), либо указывает на внешний файл скрипта через атрибут src.",category:"500"},{_id:a(),question:"Каково назначение метатега viewport?",adsver:"Метатег Viewport позволяет нам контролировать ширину и масштабирование области просмотра, чтобы она имела правильный размер на всех устройствах.",category:"500"},{_id:a(),question:"Каково назначение тега <noscript> в HTML?",adsver:"Тег <noscript> используется для отображения текста в тех браузерах, которые не поддерживают тег script или в которых скрипт отключен пользователем.",category:"500"},{_id:a(),question:"Каково назначение тега <fieldset> в HTML?",adsver:"Fieldset используется для группировки связанных элементов в форме. Тег <fieldset> рисует рамку вокруг связанных элементов.",category:"500"},{_id:a(),question:"Что такое веб-хранилище HTML5?",adsver:"HTML5 Web Storage — это механизм в современных веб-браузерах, который позволяет веб-приложениям хранить данные локально в браузере пользователя. Он предоставляет два варианта хранения: локальное хранилище и хранилище сеансов.",category:"500"},{_id:a(),question:"Для чего используется атрибут «target» в HTML?",adsver:"Атрибут «target» используется для указания того, где открыть связанный документ, когда пользователь нажимает на гиперссылку.",category:"500"},{_id:a(),question:"Каково назначение тега <header>?",adsver:"Тег <header> используется для определения раздела заголовка веб-страницы, который включает логотип сайта, навигационное меню и другой вводный контент.",category:"500"},{_id:a(),question:"Каково назначение тега <nav>?",adsver:"Тег <nav> используется для определения раздела веб-страницы, содержащего ссылки на другие страницы или разделы текущей страницы.",category:"500"},{_id:a(),question:"Каково назначение тега <main>?",adsver:"Тег <main> используется для определения основного содержимого веб-страницы, где отображается наиболее важная информация.",category:"500"},{_id:a(),question:"Каково назначение тега <article>?",adsver:"Тег <article> используется для определения автономного фрагмента контента, например записи в блоге, новостной статьи или обзора продукта.",category:"500"},{_id:a(),question:"Каково назначение тега <section>?",adsver:"Тег <section> используется для группировки связанного контента и может рассматриваться как контейнер для контента.",category:"500"},{_id:a(),question:"Каково назначение тега <aside>?",adsver:"Тег <aside> используется для определения контента, который связан с основным контентом веб-страницы, но не является его частью напрямую. Он часто используется для предоставления дополнительной информации к основному контенту.",category:"500"},{_id:a(),question:"Каково назначение тега <footer>?",adsver:"Тег <footer> используется для определения раздела нижнего колонтитула веб-страницы, который содержит информацию об авторских правах, контактные данные и другой юридический контент.",category:"500"},{_id:a(),question:"Каково назначение тега <figure>?",adsver:"Тег <figure> используется для группировки медиаконтента, например изображений или видео, с соответствующими подписями или пояснительным текстом.",category:"500"},{_id:a(),question:"Каково назначение тега <figcaption>?",adsver:"<figcaption> используется для определения заголовка или описания медиа-объекта, содержащегося в теге <figure>.",category:"500"},{_id:a(),question:"Каково назначение тега <blockquote>?",adsver:"Тег <blockquote> используется для указания того, что часть текста цитируется из другого источника. Он используется для выделения особенно важной цитаты.",category:"500"},{_id:a(),question:"Что такое тег <datalist>?",adsver:"Тег <datalist> — это новое дополнение к HTML5, и он используется для предоставления списка предопределенных опций для поля ввода. Он позволяет нам создавать раскрывающийся список опций.",category:"500"},{_id:a(),question:"Для чего используется тег <option>?",adsver:"Тег <option> используется для определения опции в раскрывающемся списке. Атрибут 'value' в теге <option> указывает значение опции, которое будет отправлено при отправке формы.",category:"500"},{_id:a(),question:"Каково назначение атрибута «data-*» в HTML?",adsver:"Атрибут data=* позволяет нам хранить дополнительную информацию об элементе HTML, которая в противном случае не отображается на странице, но может быть полезна для скриптов, взаимодействующих со страницей.",category:"500"},{_id:a(),question:"Каково назначение тега <legend>?",adsver:"Тег <legend> обеспечивает семантическую подпись или заголовок для элемента <fieldset>. Он необязателен, но лучше иметь для лучшей доступности.",category:"500"},{_id:a(),question:"Каково назначение тега <article>?",adsver:"Тег <article> используется для определения автономного фрагмента контента, например записи в блоге, новостной статьи или обзора продукта.",category:"500"},{_id:a(),question:"Что такое HTML-сущности?",adsver:"HTML сущности — это коды, используемые для представления специальных символов в HTML, которые нельзя легко набрать или отобразить. Пример: &ampпредставляет ( &)",category:"500"},{_id:a(),question:"Каково назначение элемента <picture> в HTML5 и как он используется для оптимизации изображений?",adsver:"Элемент <picture> в HTML5 используется для предоставления нескольких версий изображения с разным разрешением или размером и позволяет браузеру выбирать лучшую версию для отображения в зависимости от устройства пользователя и размера области просмотра.",category:"500"},{_id:a(),question:"Что такое CSS?",adsver:`CSS означает каскадные таблицы стилей. CSS используется для определения стилей веб-страниц, включая дизайн, макет и варианты отображения для различных устройств и размеров экранов.

`,category:"500"},{_id:a(),question:"Что такое селекторы CSS?",adsver:"Селектор CSS — это часть правила CSS, которая используется для применения стилей к целевому HTML-элементу или группе элементов.",category:"500"},{_id:a(),question:"Что такое универсальный селектор в css?",adsver:"Универсальный селектор — это селектор CSS, который можно использовать для применения стилей ко всем элементам на странице или для сброса стилей всех элементов до значений по умолчанию.",category:"500"},{_id:a(),question:"Объясните разницу между классами и идентификаторами в CSS.",adsver:"Классы используются для группировки элементов со схожими стилями, в то время как идентификаторы используются для нацеливания на определенные элементы на странице. Идентификатор",category:"500"},{_id:a(),question:"Объясните блочную модель в CSS.",adsver:"Модель блока в CSS — это способ представления элементов в виде блоков с содержимым, отступами, границами и полями. Область содержимого — это фактическое содержимое элемента, отступ — это пространство между содержимым и границей, граница — это линия вокруг элемента, а поле — это пространство между границей и окружающими элементами.",category:"500"},{_id:a(),question:"В чем разница между полями и отступами в CSS?",adsver:"Поле — это пространство между границей элемента и окружающими элементами, а отступ — это пространство между содержимым элемента и его границей.",category:"500"},{_id:a(),question:"Объясните свойство CSS display и его значения.",adsver:"Свойство CSS display управляет тем, как элемент отображается на странице. Возможные значения: block, inline, inline-block, none и другие.",category:"500"},{_id:a(),question:"Что такое свойство CSS position и его значения?",adsver:"Свойство CSS position управляет тем, как элемент располагается на странице. Возможные значения: static, relative, absolute, fixed и sticky",category:"500"},{_id:a(),question:"В чем разница между абсолютным и относительным позиционированием в CSS?",adsver:"Относительное позиционирование перемещает элемент относительно его текущего положения, не влияя на положение других элементов, в то время как абсолютное позиционирование размещает элемент относительно его ближайшего родительского элемента, потенциально влияя на положение других элементов.",category:"500"},{_id:a(),question:"Что такое свойство CSS z-index?",adsver:"Свойство CSS z-index управляет порядком размещения элементов на странице. Элементы с более высоким значением z-index отображаются поверх элементов с более низким значением z-index. Значение z-index по умолчанию — auto.",category:"500"},{_id:a(),question:"Что такое псевдоклассы CSS? Приведите несколько примеров.",adsver:"Псевдоклассы CSS — это селекторы, которые выбирают элементы на основе их состояния или положения в документе. Вот некоторые примеры: :hover, :active, :focus, :first-child, :last-child и :nth-child.",category:"500"},{_id:a(),question:"Что такое CSS-анимация?",adsver:"CSS-анимация — это способ добавить движение и динамизм HTML-элементу на веб-страницах с помощью CSS. Он используется для улучшения пользовательского опыта.",category:"500"},{_id:a(),question:"Что такое переход в CSS?",adsver:"Переход в CSS — это способ создания эффектов анимации при изменении свойства элемента HTML, позволяющий разработчикам плавно анимировать изменения стиля элемента в течение заданного периода времени.",category:"500"},{_id:a(),question:"Что такое флексбокс?",adsver:"Flexbox — это модуль макета CSS3, который обеспечивает более гибкий и эффективный способ выравнивания и размещения элементов внутри контейнера. Он широко поддерживается современными веб-браузерами.",category:"500"},{_id:a(),question:"В чем разница между свойствами flex-grow и flex-shrink в Flexbox?",adsver:"flex-grow— это свойство Flexbox, которое указывает, насколько должен увеличиваться элемент Flex относительно других элементов в контейнере, а также flex-shrinkуказывает, насколько элемент Flex должен уменьшаться относительно других элементов, если в контейнере недостаточно места.",category:"500"},{_id:a(),question:"В чем разница между flex-wrap: nowrap и overflow: hidden в CSS?",adsver:"flex-wrap: nowrap предотвращает перенос flex-элементов на следующую строку при выходе за пределы контейнера, а также overflow: hidden скрывает любой контент, выходящий за границы контейнера.",category:"500"},{_id:a(),question:"Что такое gap свойство Flexbox и как оно используется для добавления интервалов между flex-элементами?",adsver:"Свойство gapв Flexbox задает интервал между элементами Flex, как по горизонтали, так и по вертикали. Это сокращение для row-gapи column-gap.",category:"500"},{_id:a(),question:"Как центрировать элемент с помощью flexbox?",adsver:"Чтобы отцентрировать элемент с помощью flexbox, нам нужно установить свойство display родительского контейнера на flexи использовать свойства justify-content& align-itemsсо значением center.",category:"500"},{_id:a(),question:"Что такое CSS-grid?",adsver:"CSS-grid — это система макетов в CSS, которая позволяет создавать сложные, многомерные макеты сеток для веб-страниц.",category:"500"},{_id:a(),question:"Как использовать свойства grid-template-columns и grid-template-rows для определения размера и количества столбцов и строк в сетке?",adsver:"Вы можете использовать свойства grid-template-columns и grid-template-rows для определения размера и количества столбцов и строк в сетке. Например, вы можете определить сетку с тремя столбцами, где первый столбец имеет ширину 100 пикселей, второй столбец составляет 50% от доступной ширины, а третий столбец занимает оставшееся пространство.",category:"500"},{_id:a(),question:"Как указать количество столбцов в сетке с помощью CSS?",adsver:"Вы можете указать количество столбцов в сетке, используя grid-template-columns свойство. Например, grid-template-columns: repeat(3, 1fr)создаст сетку с тремя столбцами, каждый из которых представляет собой одну часть доступного пространства.",category:"500"},{_id:a(),question:"Как выровнять элементы в сетке с помощью CSS?",adsver:"Вы можете выровнять элементы в сетке с помощью свойств justify-itemsи align-items. justify-items выравнивает элементы в сетке по горизонтали, а align-itemsjustify-items — по вертикали.",category:"500"},{_id:a(),question:"В чем разница между grid-row и grid-column в CSS Grid?",adsver:"grid-rowиспользуется для позиционирования элемента в строке, а grid-columnиспользуется для позиционирования элемента в столбце. Оба свойства могут принимать значение либо числа, либо именованной линии сетки.",category:"500"},{_id:a(),question:"Что такое CSS-переход?",adsver:"CSS-переход — это способ добавить эффект постепенной анимации к элементу при изменении его CSS-свойств.",category:"500"},{_id:a(),question:"Каково назначение свойства transition-propertyв CSS-переходах?",adsver:"Свойство transition-propertyуказывает, какое свойство или свойства CSS должны быть изменены при возникновении изменения.",category:"500"},{_id:a(),question:"Какова функция свойства transition-timing-functionв CSS-переходах?",adsver:"Свойство transition-timing-function определяет скорость изменения перехода с течением времени. Это можно использовать для управления скоростью перехода и тем, как он ускоряется и замедляется. Пример: ease-in, ease, ease-out.",category:"500"},{_id:a(),question:"Как отложить начало перехода CSS?",adsver:"Вы можете отложить начало перехода CSS с помощью свойства transition-delay. Это свойство указывает время ожидания перед началом перехода в секундах или миллисекундах. Пример:transition-delay: 1s;",category:"500"},{_id:a(),question:"Что такое CSS 2D-преобразования?",adsver:"CSS 2D-преобразования — это набор свойств, которые позволяют преобразовывать положение, поворот, масштабирование и наклон элемента в двух измерениях, не затрагивая окружающие элементы.",category:"500"},{_id:a(),question:"Каковы свойства CSS 2D-преобразования?",adsver:`Свойства CSS 2D-преобразований:

transform: определяет функции преобразования, которые следует применить к элементу
transform-origin: указывает точку, вокруг которой должно происходить преобразование
перевести: перемещает элемент вдоль оси x и/или оси y
поворот: вращает элемент по часовой стрелке или против часовой стрелки вокруг заданной точки
масштаб: увеличивает или уменьшает размер элемента
skew: наклоняет элемент вдоль оси x и/или оси y`,category:"500"},{_id:a(),question:"Каковы свойства CSS 3D-преобразования?",adsver:`Свойства CSS 3D-преобразований:

transform-style: определяет, будут ли дочерние элементы элемента трансформированы в трехмерном пространстве
перспектива: определяет расстояние между наблюдателем и элементом, влияя на внешний вид 3D-преобразований
perspective-origin: указывает исходную точку перспективы
transform: применяет к элементу 3D-преобразование, например rotateX(), rotateY(), rotateZ(), translateX(), translateY(),translateZ(), scale() и skew()
transform-origin: указывает исходную точку преобразования
backface-visibility: определяет, должна ли быть видна задняя поверхность элемента при повороте элемента.`,category:"500"},{_id:a(),question:"В чем разница между цветами RGB и RGBA?",adsver:"Цветовой контраст — это то, насколько цвета текста и фона веб-сайта отличаются друг от друга.",category:"500"},{_id:a(),question:"Что такое цветовой контраст?",adsver:"Псевдоклассы CSS — это селекторы, которые выбирают элементы на основе их состояния или положения в документе. Вот некоторые примеры: :hover, :active, :focus, :first-child, :last-child и :nth-child.",category:"500"},{_id:a(),question:"Что такое css-фильтр?",adsver:"Фильтры CSS — это набор визуальных эффектов, которые можно применять к элементам HTML с помощью CSS. Фильтры можно использовать для настройки внешнего вида элемента различными способами, например, для изменения его цвета, размытия или увеличения резкости, регулировки яркости или контрастности и т. д.",category:"500"},{_id:a(),question:"Что такое CSS-спрайт?",adsver:"CSS-спрайт — это метод, используемый для объединения нескольких изображений в один файл изображения, что позволяет сократить количество HTTP-запросов, необходимых для загрузки страницы, и сократить время загрузки.",category:"500"},{_id:a(),question:"Для чего в CSS используется псевдокласс :not()?",adsver:"Псевдокласс :not() используется для выбора всех элементов, не соответствующих указанному селектору.",category:"500"},{_id:a(),question:"Как выбрать все четные или нечетные элементы с помощью псевдоселектора в CSS?",adsver:"Псевдоселектор :nth-child() можно использовать с ключевыми словами «even» или «odd» для выбора всех четных или нечетных элементов родительского элемента.",category:"500"},{_id:a(),question:"Для чего используется псевдокласс :active в CSS?",adsver:"Псевдокласс :active используется для нацеливания на элемент, когда он находится в активном состоянии, например, когда пользователь щелкает по нему.",category:"500"},{_id:a(),question:"Для чего в CSS используется псевдокласс :lang()?",adsver:"Псевдокласс lang() используется для нацеливания элементов на основе атрибута языка документа HTML. Например, вы можете использовать :lang(en) для нацеливания всех элементов на английском языке или :lang(fr) для нацеливания всех элементов на французском языке.",category:"500"},{_id:a(),question:"Для чего используется псевдокласс :checked в CSS?",adsver:"Псевдокласс :checked используется для нацеливания элементов формы, выбранных пользователем, таких как флажки или радиокнопки. Это может использоваться для изменения внешнего вида или поведения выбранного элемента.",category:"500"},{_id:a(),question:"Что такое правило @media в CSS?",adsver:"Правило @media в CSS позволяет разработчикам применять стили к веб-странице в зависимости от размера устройства или экрана, используемого для ее просмотра, что делает ее более адаптивной.",category:"500"},{_id:a(),question:"В чем разница между резиновой и фиксированной компоновкой в ​​CSS?",adsver:"ФТекучий макет в CSS регулирует свою ширину и высоту в зависимости от размера экрана, в то время как фиксированный макет имеет заданную ширину и высоту. Текучие макеты используют проценты для установки своих размеров, в то время как фиксированные макеты используют пиксели.",category:"500"},{_id:a(),question:"Как сделать изображения адаптивными с помощью CSS?",adsver:"Чтобы сделать изображения адаптивными в CSS, можно использовать свойство max-width: 100%, которое пропорционально уменьшит масштаб изображения, чтобы оно соответствовало ширине контейнера, сохраняя при этом соотношение сторон.",category:"500"},{_id:a(),question:"В чем разница между min-width и max-width в медиа-запросах CSS?",adsver:"В медиазапросах CSS min-width устанавливает минимальную ширину экрана, при которой будет применяться набор стилей, а max-width устанавливает максимальную ширину экрана, при которой будет применяться набор стилей. Например, если вы используете min-width: 768px, стили будут применяться только к экранам шириной 768 пикселей или больше, а если вы используете max-width: 768px, стили будут применяться только к экранам шириной 768 пикселей или меньше.",category:"500"},{_id:a(),question:"В чем разница между отзывчивым и адаптивным дизайном в CSS?",adsver:"Адаптивный дизайн в CSS адаптируется к различным размерам экрана и устройствам, используя гибкие сетки, жидкие изображения и медиа-запросы для настройки макета и содержимого веб-сайта. Адаптивный дизайн в CSS, с другой стороны, использует предопределенные размеры макета и контрольные точки для настройки макета и содержимого в зависимости от размера экрана и используемого устройства.",category:"500"},{_id:a(),question:"Как оптимизировать адаптивные изображения для более быстрой загрузки в CSS?",adsver:"Чтобы оптимизировать адаптивные изображения для более быстрой загрузки в CSS, вы можете использовать меньшие форматы файлов, такие как JPEG и PNG, уменьшить размер и разрешение изображения, а также использовать отложенную загрузку, чтобы загружать изображения только тогда, когда они необходимы.",category:"500"},{_id:a(),question:"Как работает calc() в css?",adsver:"Функция CSS3 calc() позволяет нам выполнять математические операции над значениями свойств. Пример:div{width: calc(100px + 50px)}",category:"500"},{_id:a(),question:"Для чего используется свойство overflow в CSS?",adsver:"Свойство overflow определяет, что должно произойти, если содержимое переполняет поле элемента. Возможные значения: auto, none, scroll, visible.",category:"500"},{_id:a(),question:"В чем разница между visibility:hiddenи display:none?",adsver:"visibility:hidden означает, что тег не виден, но для него выделено место на странице. display:none означает, что тег вообще не будет отображаться и для него не будет выделено место между другими тегами.",category:"500"},{_id:a(),question:"Объясните, что такое веб-безопасные шрифты и резервные шрифты.",adsver:"Веб-безопасные шрифты — это шрифты, которые обычно устанавливаются на большинстве устройств и веб-браузеров. Резервные шрифты — это альтернативные шрифты, указанные в случае, если основной шрифт недоступен на устройстве пользователя.",category:"500"},{_id:a(),question:"Каково назначение свойства CSS content?",adsver:"Свойство CSS content используется для вставки содержимого до или после элемента HTML с помощью псевдоэлементов ::before и ::after.",category:"500"},{_id:a(),question:"Как создать собственный курсор в CSS?",adsver:"Чтобы создать пользовательский курсор в CSS, вы можете использовать свойство «cursor» и задать для него значение «url» с путем к файлу изображения, которое вы хотите использовать в качестве курсора.",category:"500"},{_id:a(),question:"Что такое свойство «line-height» в CSS?",adsver:"Свойство «line-height» в CSS используется для управления интервалом между строками текста внутри элемента.",category:"500"},{_id:a(),question:"Что такое специфичность в CSS?",adsver:"Специфичность в CSS — это способ определения того, какое правило CSS применяется к элементу. Она основана на количестве селекторов и их типах в правиле CSS. Специфичность вычисляется по формуле: наибольшую специфичность имеют встроенные стили, за ними следуют идентификаторы, классы и затем элементы.",category:"500"},{_id:a(),question:"Какое свойство используется для управления прокруткой изображения в фоновом режиме?",adsver:"Свойство background-attachment используется для управления прокруткой изображения в фоновом режиме.",category:"500"},{_id:a(),question:"Что такое свойство переноса слов в CSS3?",adsver:"Свойство word-wrap позволяет разбивать длинные слова, чтобы предотвратить переполнение и перенос на следующую строку.",category:"500"},{_id:a(),question:"Как создать выпадающее меню, использующее только CSS?",adsver:'Выпадающее меню только на CSS можно создать с помощью псевдокласса "hover" и свойства "display". Когда пользователь наводит курсор на родительский элемент, свойство "display" дочернего элемента можно установить на "block" или "inline-block", чтобы отобразить выпадающее меню.',category:"500"},{_id:a(),question:"Что такое препроцессор CSS?",adsver:"Препроцессор CSS — это язык сценариев, расширяющий возможности CSS, что упрощает и делает более эффективным написание кода CSS.",category:"500"},{_id:a(),question:"В чем разница между препроцессором CSS и постпроцессором?",adsver:"Препроцессор CSS генерирует код CSS из исходного кода, написанного на языке сценариев более высокого уровня, тогда как постпроцессор берет существующий код CSS и применяет к нему преобразования или оптимизации. Другими словами, препроцессор используется во время разработки, а постпроцессор используется после разработки для оптимизации производительности.",category:"500"},{_id:a(),question:"Что такое Sass?",adsver:"Sass — это препроцессор CSS, который добавляет функциональность в CSS, такую ​​как переменные, вложенность и т. д. Он позволяет нам писать более эффективный код и упрощает такие задачи, как совместимость с браузерами.",category:"500"},{_id:a(),question:"в чем разница между sass и scss?",adsver:"Sass и SCSS являются препроцессорами CSS и очень похожи, но у них разный синтаксис. Sass имеет более краткий и менее многословный синтаксис, без фигурных скобок и точек с запятой, тогда как SCSS имеет синтаксис, который почти идентичен стандартному CSS, с фигурными скобками и точками с запятой",category:"500"},{_id:a(),question:"Что такое вложенность SASS?",adsver:"Вложенность Sass — это функция, которая позволяет нам писать CSS-селекторы, вложенные друг в друга, что упрощает чтение и понимание нашего кода.",category:"500"},{_id:a(),question:"Что такое переменные в Sass?",adsver:"Переменные в Sass позволяют присваивать значения имени переменной, которое затем можно использовать в таблице стилей.",category:"500"},{_id:a(),question:"Что такое миксины в Sass?",adsver:"Миксин — это функция в Sass, которая позволяет вам определить набор стилей CSS, которые можно повторно использовать в вашей таблице стилей.",category:"500"},{_id:a(),question:"Что такое наследование Sass?",adsver:"Наследование позволяет нам определить набор стилей в одном селекторе, называемом «родительским», а затем расширить эти стили на другой селектор, называемый «дочерним». ",category:"500"},{_id:a(),question:"Как использовать операторы «if» в SCSS?",adsver:"В SCSS вы можете использовать директиву @if для добавления условной логики в ваши стили.",category:"500"},{_id:a(),question:"В чем разница между null и undefined в JavaScript?",adsver:"Null представляет собой преднамеренное отсутствие значения или отсутствие какого-либо значения объекта, в то время как undefined представляет собой отсутствие значения или неинициализированную переменную.",category:"500"},{_id:a(),question:"В чем разница между == и === в JavaScript?",adsver:"Двойное равенство (==) сравнивает значения двух переменных, тогда как тройное равенство (===) сравнивает как значение, так и тип данных двух переменных.",category:"500"},{_id:a(),question:"В чем разница между let, const и var в JavaScript?",adsver:"Ключевое слово var используется для объявления переменных в старых версиях JavaScript, в то время как let и const были введены в ES6. Var имеет область действия на уровне функции, в то время как let и const имеют область действия на уровне блока. Кроме того, переменные const не могут быть переназначены после объявления, в то время как переменные let могут.",category:"500"},{_id:a(),question:"Для чего используется псевдокласс :visited в CSS?",adsver:"Псевдокласс :visited используется для указания ссылки, которую посетил пользователь.",category:"500"},{_id:a(),question:"Как преобразовать строку в число в JavaScript?",adsver:"Для преобразования строки в число в JavaScript можно использовать функции Number()или .parseFloat()",category:"500"},{_id:a(),question:"Какова цель метода среза массива?",adsver:"Метод slice()возвращает выбранные элементы в массиве как новый объект массива. Он выбирает элементы, начиная с заданного начального аргумента и заканчивая заданным необязательным конечным аргументом, не включая последний элемент.",category:"500"},{_id:a(),question:"Какова цель метода сращивания массивов?",adsver:"Это splice()метод массива в JavaScript, который позволяет изменять массив путем добавления, удаления или замены элементов. Он принимает два обязательных параметра: индекс, с которого следует начать вносить изменения в массив, и количество элементов для удаления. Он также имеет необязательный параметр для добавления одного или нескольких элементов в массив.",category:"500"},{_id:a(),question:"Что такое стрелочные функции?",adsver:"Стрелочные функции — это сокращенный синтаксис для записи выражений функций в JavaScript. Они используют синтаксис =>для отделения параметров функции от тела функции и имеют краткий синтаксис, что делает их идеальными для написания коротких, однострочных функций.",category:"500"},{_id:a(),question:"Что такое функции первого класса?",adsver:"Функции первого класса означают, что функции в этом языке обрабатываются как любая другая переменная. Это означает, что функции могут быть назначены переменным, переданы в качестве аргументов другим функциям и возвращены из функций.",category:"500"},{_id:a(),question:"Что такое чистая функция?",adsver:"Чистая функция — это функция, которая при одних и тех же входных данных всегда возвращает один и тот же результат и не имеет никаких наблюдаемых побочных эффектов.",category:"500"},{_id:a(),question:"Что такое цепочка областей видимости в JavaScript?",adsver:"Цепочка областей видимости — это то, как Javascript ищет переменные. При поиске переменных через вложенную область видимости внутренняя область видимости сначала смотрит на свою собственную область видимости.",category:"500"},{_id:a(),question:"Что такое функция высшего порядка?",adsver:"Функция высшего порядка — это функция, которая принимает одну или несколько функций в качестве аргументов и/или возвращает функцию в качестве своего результата.",category:"500"},{_id:a(),question:"Что такое подъем?",adsver:"Подъем — это поведение в JavaScript, при котором объявления переменных и функций перемещаются в верхнюю часть соответствующих областей видимости во время компиляции или интерпретации, до того, как код будет фактически выполнен. Это означает, что вы можете использовать переменную или функцию до того, как она была объявлена, но только если она объявлена ​​с использованием ключевых слов varили function. Однако поднимаются только сами объявления, а не их значения или назначения.",category:"500"},{_id:a(),question:"Что такое модули в JavaScript?",adsver:"Модули — это способ организации кода в отдельные файлы или компоненты, которые можно повторно использовать в разных частях приложения. Модули позволяют инкапсулировать данные и функциональность, делая код более организованным и простым в обслуживании",category:"500"},{_id:a(),question:"Что такое замыкание в JavaScript?",adsver:"В JavaScript замыкание создается, когда функция определяется внутри другой функции, а внутренняя функция возвращается из внешней функции. Внутренняя функция имеет доступ к переменным во внешней функции, даже после того, как внешняя функция вернулась.",category:"500"},{_id:a(),question:"Что такое обратный вызов в JavaScript?",adsver:"Обратный вызов — это функция, которая передается в качестве аргумента другой функции и должна вызываться после того, как первая функция завершит свою задачу. Основное применение обратных вызовов в JavaScript — обработка асинхронных операций, таких как выполнение запроса AJAX или ожидание нажатия кнопки пользователем.",category:"500"},{_id:a(),question:"Что такое ад обратного вызова в JavaScript?",adsver:"Callback hell — это термин, используемый для описания ситуации, когда несколько обратных вызовов вложены друг в друга, что затрудняет чтение, отладку и поддержку кода. Это часто возникает при работе с асинхронными операциями, такими как выполнение HTTP-запросов или работа с базами данных.",category:"500"},{_id:a(),question:"Что такое мемоизация?",adsver:"Мемоизация — это метод, используемый в информатике для ускорения выполнения функций путем кэширования результатов дорогостоящих вызовов функций и возврата кэшированного результата при повторном вводе тех же данных.",category:"500"},{_id:a(),question:"Какова цель оператора «use strict» в JavaScript?",adsver:'Оператор "use strict" используется для включения строгого режима в JavaScript, что помогает предотвратить распространенные ошибки и сделать код более безопасным. Он предотвращает такие вещи, как использование необъявленной переменной, использование ключевых слов в качестве имени переменной, использование дублирующихся имен свойств в объектах и ​​т. д.',category:"500"},{_id:a(),question:"Что такое cookie в JavaScript?",adsver:"Файл cookie — это небольшой файл данных, который веб-сайт хранит на компьютере или устройстве пользователя. Файлы cookie обычно используются для запоминания пользовательских настроек и информации для входа, а также для отслеживания активности пользователя на веб-сайте. Файлы cookie также могут иметь срок действия, по истечении которого они автоматически удаляются.",category:"500"},{_id:a(),question:"Что такое AJAX?",adsver:"AJAX (асинхронный JavaScript и XML) — это метод создания более динамичных и интерактивных веб-страниц. Он позволяет веб-странице обновлять содержимое без необходимости перезагрузки страницы. С помощью AJAX данные отправляются на сервер и с него в фоновом режиме с использованием JavaScript и других форматов данных, таких как JSON. Это делает веб-приложения более плавными и отзывчивыми, предоставляя пользователям более быстрый и увлекательный просмотр.",category:"500"},{_id:a(),question:"В чем разница между синхронным и асинхронным кодом в JavaScript?",adsver:"Синхронный код выполняет задачи последовательно и ждет завершения каждой задачи, прежде чем перейти к следующей, в то время как асинхронный код может выполнять несколько задач одновременно и не ждет их завершения, прежде чем перейти к следующей задаче.",category:"500"},{_id:a(),question:"Что такое promise в JavaScript?",adsver:"Promise в JavaScript — это способ обработки асинхронных операций. Они помогают нам писать асинхронный код, который выглядит и ведет себя как синхронный код, что упрощает его чтение и поддержку. Обещания имеют три состояния: ожидание, выполнено и отклонено.",category:"500"},{_id:a(),question:"Кто создал Javascript?",adsver:"JavaScript был создан Бренданом Эйхом в 1995 году.",category:"500"},{_id:a(),question:"В чем разница между async/await и Promises в JavaScript?",adsver:"Оба async/await и Promises используются для обработки асинхронных операций в JavaScript. Однако async/await построен на основе Promises, что делает асинхронный код более читаемым, простым для написания и обоснования.",category:"500"},{_id:a(),question:"Как вы обрабатываете ошибки в JavaScript?",adsver:"В JavaScript ошибки можно обрабатывать с помощью блоков try-catch. Код, который может сгенерировать ошибку, заключен в блок try, и если происходит ошибка, выполняется блок catch. Затем блок catch может обработать ошибку, например, записав ее в консоль или отобразив сообщение об ошибке пользователю.",category:"500"},{_id:a(),question:"Что такое NaN в JavaScript?",adsver:"NaN (Not A Number) — это особое значение в JavaScript, которое представляет ситуацию, когда значение не является допустимым числом. Важно отметить, что NaN не равно никакому значению, включая себя самого. Мы можем использовать функцию, isNaN()чтобы проверить, является ли значение NaN или нет.",category:"500"},{_id:a(),question:"Как найти сведения об операционной системе в JavaScript?",adsver:"В JavaScript вы можете узнать сведения об операционной системе пользователя, обратившись к объекту navigator, который содержит информацию о браузере и среде пользователя.",category:"500"},{_id:a(),question:"Что такое объектная модель документа (DOM)?",adsver:"DOM (Document Object Model) — это программный интерфейс, который представляет структуру и содержимое HTML-документа в виде древовидной структуры узлов. Он позволяет разработчикам получать доступ и управлять содержимым и структурой веб-страницы с помощью языков программирования, таких как JavaScript.",category:"500"},{_id:a(),question:"В чем разница между событием DOMContentLoaded и событием load?",adsver:`Событие DOMContentLoaded срабатывает, когда исходный HTML-документ полностью загружен и проанализирован, а событие load срабатывает, когда все ресурсы на странице, включая изображения и скрипты, завершены.

`,category:"500"},{_id:a(),question:"В чем разница между innerHTML и innerText?",adsver:"Основное различие между innerTextи innerHTMLв DOM заключается в том, что innerTextвозвращает только видимое текстовое содержимое элемента, исключая любые HTML-теги, тогда как innerHTMLвозвращает полное HTML-содержимое элемента, включая любые вложенные элементы и теги.",category:"500"},{_id:a(),question:"Какова роль объекта Window в DOM?",adsver:"Узел в DOM — это фундаментальная единица, которая представляет элемент, атрибут или текстовое содержимое на веб-странице. Каждый узел имеет связь с другими узлами, например, родительский, дочерний или сестринский. Родительский узел содержит дочерние узлы, а дочерние узлы могут иметь сестринские узлы, которые разделяют того же родителя.",category:"500"},{_id:a(),question:"Как предотвратить поведение события по умолчанию в DOM с помощью JavaScript?",adsver:"Чтобы предотвратить поведение события по умолчанию в DOM с помощью JavaScript, можно использовать метод preventDefault(). Этот метод вызывается для объекта события, который передается в функцию обработчика событий",category:"500"},{_id:a(),question:"Что такое распространение событий?",adsver:"Распространение событий в DOM относится к тому, как события перемещаются или протекают через различные элементы на веб-странице. Когда событие происходит на элементе, например, щелчок, оно может перемещаться к его родительским элементам и в конечном итоге ко всему документу. Это называется всплытием событий. В качестве альтернативы события также могут перемещаться из документа к элементу, который вызвал событие, что называется захватом событий.",category:"500"},{_id:a(),question:"Что такое стек вызовов в JavaScript?",adsver:"Стек вызовов в JavaScript — это структура данных, которая хранит информацию о текущих выполняемых функциях. При вызове функции новый фрейм добавляется на вершину стека, а когда функция завершается, ее фрейм удаляется из стека. Это помогает движку JavaScript отслеживать свое положение в ходе выполнения скрипта и управлять порядком вызова функций.",category:"500"},{_id:a(),question:"Что такое цикл событий?",adsver:"Цикл событий в JavaScript обрабатывает асинхронные операции, выстраивая их в очередь и обрабатывая их одну за другой неблокирующим способом. Он непрерывно проверяет очередь событий и обрабатывает сначала самую старую операцию. Когда операция завершается, выполняется ее функция обратного вызова.",category:"500"},{_id:a(),question:"Что такое БОМ?",adsver:"BOM означает Browser Object Model (Объектная модель браузера). Это набор API, предоставляемых браузером, которые позволяют JavaScript взаимодействовать с окном браузера.",category:"500"},{_id:a(),question:"Каково использование setTimeOut()в JavaScript?",adsver:"setInterval()— это функция в JavaScript, которая позволяет многократно выполнять заданную функцию с указанным интервалом. Она работает, вызывая функцию повторно с указанной задержкой между каждым вызовом, пока интервал не будет отменен.",category:"500"},{_id:a(),question:"Каково использование setInterval()в JavaScript?",adsver:"JavaScript был создан Бренданом Эйхом в 1995 году.",category:"500"},{_id:a(),question:"Каково назначение методов clearTimeout и clearInterval?",adsver:"Метод clearTimeout — это встроенная функция в JavaScript, которая используется для отмены таймера, созданного функцией setTimeout, а метод clearInterval — это встроенная функция в JavaScript, которая используется для отмены повторяющегося таймера, созданного функцией setInterval.",category:"500"},{_id:a(),question:"Как перенаправить новую страницу в JavaScript?",adsver:"Для перенаправления на новую страницу с помощью JavaScript можно использовать методы window.location объекта assign или replace. ",category:"500"},{_id:a(),question:"Что такое объект JavaScript?",adsver:"Объект JavaScript — это непримитивный тип данных, позволяющий хранить несколько коллекций данных. Это контейнер пар ключ-значение, в котором значение может быть переменной, функцией или самим объектом.",category:"500"},{_id:a(),question:"В чем разница между точечной и скобочной нотацией при доступе к свойствам объекта?",adsver:"Dot Notation допускает только статические ключи, тогда как Bracket Notation допускает динамические ключи. Статический ключ здесь означает, что ключ вводится напрямую, тогда как Динамический ключ здесь означает, что ключ вычисляется из выражения.",category:"500"},{_id:a(),question:"Что такое литерал объекта в JavaScript?",adsver:"Объектный литерал — это синтаксис для создания объекта в javascript, в котором свойство и метод находятся внутри фигурных скобок, разделенных запятой. Мы присваиваем переменную объекту в объектном литерале.",category:"500"},{_id:a(),question:"Что такое JSON?",adsver:"JavaScript Object Notation (JSON) — это стандартный текстовый формат для представления структурированных данных на основе синтаксиса объектов JavaScript. Он обычно используется для передачи данных в веб-приложениях.",category:"500"},{_id:a(),question:"Что такое класс в JavaScript?",adsver:"Класс — это шаблон, который можно использовать для создания объектов, которые разделяют те же свойства и методы. Когда объект создается из класса, он называется экземпляром этого класса. Класс был введен в ECMAScript(ES6).",category:"500"},{_id:a(),question:"Что такое конструктор в JavaScript?",adsver:"В JavaScript конструктор — это специальный метод, который используется для создания и инициализации объектов, основанных на классе. Это как план создания новых объектов. Метод конструктора вызывается автоматически при создании нового объекта из класса с использованием ключевого слова new. Он используется для установки начального состояния объекта путем присвоения значений его свойствам.",category:"500"},{_id:a(),question:"В чем разница между статическим методом и методом экземпляра в классе?",adsver:"Метод экземпляра — это метод, который может быть вызван для экземпляра класса, и он может получить доступ и изменить данные, специфичные для экземпляра, такие как свойства объекта. Статический метод, с другой стороны, — это метод, который принадлежит самому классу, а не какому-либо экземпляру класса. Он может получить доступ только к данным уровня класса и может быть вызван для самого класса, а не для экземпляра класса.",category:"500"},{_id:a(),question:"Что такое «this» в классах JavaScript?",adsver:"В классах JavaScript thisссылается на текущий объект, над которым ведется работа. Это как заполнитель для объекта. Например, если у вас есть класс, который создает Personобъекты, и вы хотите дать каждому человеку name, вы можете использовать this.nameдля ссылки на nameсвойство текущего Personобъекта, который создается или к которому осуществляется доступ. Таким образом, thisэто просто способ доступа к свойствам и методам текущего объекта внутри класса.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию переопределения методов в классе в JavaScript?",adsver:"Переопределение метода — это концепция в JavaScript, где подкласс может предоставить собственную реализацию метода, который уже определен в родительском классе. Чтобы переопределить метод в подклассе, вы просто определяете метод с тем же именем, что и метод в родительском классе",category:"500"},{_id:a(),question:"Что такое композиция классов в JavaScript?",adsver:"Композиция в классе JS — это метод создания сложных классов путем объединения меньших, более специализированных классов, представляющих определенное поведение или свойства. Композиция — это гибкий и мощный метод создания модульного, повторно используемого кода в JavaScript.",category:"500"},{_id:a(),question:"Что такое наследование классов в JavaScript?",adsver:"Наследование в классах в JavaScript — это возможность создания нового класса на основе существующего класса. Новый класс наследует все свойства и методы существующего класса, а также может добавлять новые свойства и методы или переопределять существующие.",category:"500"},{_id:a(),question:"Что такое extendsключевое слово в JavaScript и как оно используется для наследования?",adsver:"Ключевое extendsслово используется в JavaScript для создания нового класса, который наследует существующий класс.",category:"500"},{_id:a(),question:"какова цель super()классов JavaScript?",adsver:"Ключевое super()слово в JavaScript используется для вызова метода или конструктора родительского класса из подкласса. Оно позволяет подклассу наследовать и использовать функциональность родительского класса, а также добавлять собственную функциональность.",category:"500"},{_id:a(),question:"Что такое приватное поле класса в JavaScript?",adsver:"Поле класса private в JavaScript относится к полю класса, которое доступно только внутри класса, в котором оно определено. К нему нельзя получить доступ или изменить его извне класса, даже экземплярами класса.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию инкапсуляции в классах JavaScript?",adsver:"Инкапсуляция — это концепция объектно-ориентированного программирования, которая относится к объединению данных и методов в единое целое, например класс, и сокрытию внутренних деталей класса от внешнего мира. Это делает код более безопасным и поддерживаемым.",category:"500"},{_id:a(),question:"Что такое get ключевое слово в классах JavaScript?",adsver:"Ключевое getслово используется для определения метода, который извлекает значение свойства. При доступе к свойству метод getвызывается автоматически, а его возвращаемое значение используется в качестве значения свойства.",category:"500"},{_id:a(),question:"Что такое set ключевое слово в классах JavaScript?",adsver:"Ключевое setслово используется для определения метода, который устанавливает значение свойства. Когда свойству присваивается значение, метод setвызывается автоматически, и он может выполнить любую необходимую проверку или обработку перед установкой значения свойства.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию переменных экземпляра в классе в JavaScript?",adsver:"В JavaScript переменные экземпляра — это свойства объекта, которые являются специфическими для экземпляра класса. Когда мы создаем новый экземпляр класса с помощью ключевого newслова, каждый экземпляр имеет свой собственный набор переменных экземпляра, которые отделены от других экземпляров.",category:"500"},{_id:a(),question:"В чем разница между классом и функцией в JavaScript?",adsver:"Функции и классы являются важными инструментами в JavaScript для определения повторно используемого кода, но они служат разным целям. Функции используются для инкапсуляции логики и выполнения определенных задач, в то время как классы используются для создания объектов с общими свойствами и методами. Знание того, когда использовать каждый из них, зависит от конкретной решаемой проблемы и дизайна приложения.",category:"500"},{_id:a(),question:"Что такое абстрактный класс в JavaScript?",adsver:"В JavaScript абстрактный класс — это шаблон для создания других классов, которые разделяют некоторые общие свойства и методы. Однако, в отличие от обычных классов, абстрактные классы не могут быть напрямую созданы. Вместо этого они предназначены для расширения или подклассификации другими классами.",category:"500"},{_id:a(),question:"Как преобразовать объект в строку JSON в JavaScript и наоборот?",adsver:"В JavaScript можно преобразовать объект в строку JSON с помощью JSON.stringify()метода , а также преобразовать строку JSON обратно в объект с помощью JSON.parse()метода .",category:"500"},{_id:a(),question:"В чем разница между классом и интерфейсом в JavaScript?",adsver:"Классы и интерфейсы используются в JavaScript для определения типов объектов, но служат разным целям. Класс определяет схему создания объектов, имеющих свойства и методы, в то время как интерфейс описывает форму объекта и обеспечивает соблюдение контракта между различными частями программы. Классы определяют, что такое объект, в то время как интерфейсы определяют, что объект может делать.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию полиморфизма в классах в JavaScript?",adsver:"Полиморфизм в классах JavaScript означает, что разные объекты могут совместно использовать одни и те же методы, даже если они принадлежат разным классам. Это позволяет нам повторно использовать код в нескольких классах и писать более гибкий и поддерживаемый код.",category:"500"},{_id:a(),question:"Что такое прототип в JavaScript?",adsver:"В JavaScript прототип — это объект, содержащий свойства и методы, которые могут совместно использоваться всеми объектами, созданными с помощью одной и той же функции-конструктора. Это помогает уменьшить дублирование кода и делает ваш код более эффективным.",category:"500"},{_id:a(),question:"Что такое цепочка прототипов?",adsver:"Каждый объект в JavaScript имеет встроенное свойство, которое называется его прототипом. Прототип сам по себе является объектом, поэтому прототип будет иметь свой собственный прототип, создавая то, что называется цепочкой прототипов. Цепочка заканчивается, когда мы достигаем прототипа, который имеет null для своего собственного прототипа.",category:"500"},{_id:a(),question:"Как работает прототипное наследование в JavaScript?",adsver:"Прототипное наследование позволяет объектам наследовать свойства и методы от своих родительских объектов. Когда объект создается с помощью функции-конструктора, его прототип автоматически устанавливается на объект-прототип, связанный с этой функцией-конструктором. Любые свойства или методы, определенные в объекте-прототипе, являются общими для всех объектов, созданных с помощью этой функции-конструктора. Когда объект пытается получить доступ к свойству или методу, JavaScript сначала ищет его в самом объекте. Если он не найден, он ищет его в цепочке прототипов, пока не найдет свойство или метод.",category:"500"},{_id:a(),question:"В чем разница между прототипическим наследованием и классическим наследованием?",adsver:"Основное различие между прототипным и классическим наследованием заключается в том, что прототипное наследование позволяет объектам наследовать свойства и методы напрямую от других объектов, без необходимости в классах или конструкторах. Это делает код более гибким и простым в обслуживании. Классическое наследование опирается на классы и конструкторы для определения иерархии наследования, что может обеспечить лучшую организацию и структуру, но является более жестким и требует более предварительного планирования.",category:"500"},{_id:a(),question:"Как добавить свойства и методы к прототипу объекта в JavaScript?",adsver:"Мы можем добавлять свойства и методы к прототипу объекта, используя свойство прототипа функции конструктора. Чтобы добавить свойство, просто присвойте значение свойству объекта-прототипа. Чтобы добавить метод, определите функцию и присвойте ее свойству объекта-прототипа.",category:"500"},{_id:a(),question:"В чем разница между Object.prototypeи Object.__proto__в JavaScript?",adsver:"Другими словами, Object.prototypeэто объект, который предоставляет свойства и методы по умолчанию, которые наследуют все объекты в JavaScript. С другой стороны, Object.__proto__это объект, Objectот которого наследует сам конструктор, и он предоставляет свойства и методы, специфичные для Objectконструктора.",category:"500"},{_id:a(),question:"Как проверить, наследует ли объект определенный прототип в JavaScript?",adsver:"Мы можем проверить, наследует ли объект от определенного прототипа, используя метод isPrototypeOf(). Этот метод можно вызвать для объекта-прототипа, чтобы проверить, появляется ли он где-либо в цепочке прототипов другого объекта. Если объект-прототип появляется в цепочке прототипов другого объекта, isPrototypeOf()вернет true. В противном случае он вернет false.",category:"500"},{_id:a(),question:"Как переопределить метод в прототипе объекта в JavaScript?",adsver:"Мы можем переопределить метод в прототипе объекта, переопределив метод в прототипе. Для этого вы просто назначаете новую функцию существующему свойству в прототипе. Когда вы это делаете, любые объекты, которые были созданы с помощью функции-конструктора, прототип которого вы изменяете, теперь будут иметь новую версию метода, доступную им.",category:"500"},{_id:a(),question:"В чем разница между Object.create() и new Object() в JavaScript?",adsver:"Основное различие между new Object()и Object.create()заключается в том, что new Object()создает новый объект с нуля, а Object.create()создает новый объект, который наследует существующий объект.",category:"500"},{_id:a(),question:"Что такое регулярное выражение?",adsver:"Регулярное выражение, или сокращенно regex, представляет собой набор символов, образующих шаблон. Этот шаблон используется для поиска и сопоставления определенных последовательностей текста.",category:"500"},{_id:a(),question:"В чем разница между регулярным выражением и строкой?",adsver:"Регулярное выражение — это шаблон, используемый для сопоставления со строкой. Строка — это просто последовательность символов.",category:"500"},{_id:a(),question:"Каков синтаксис создания шаблона регулярного выражения?",adsver:"Синтаксис для создания шаблона регулярного выражения состоит из комбинации символов, специальных символов и операторов, которые определяют шаблон для сопоставления.",category:"500"},{_id:a(),question:"Каковы наиболее распространенные варианты использования регулярных выражений?",adsver:"К распространенным вариантам использования регулярных выражений относятся анализ текста, операции поиска и замены, а также проверка входных данных.",category:"500"},{_id:a(),question:"Что такое window.locationобъект в JavaScript?",adsver:"Объект window.location— это встроенный объект в JavaScript, содержащий информацию о текущем URL веб-страницы. Он является свойством глобального windowобъекта и предоставляет несколько свойств и методов для работы с URL.",category:"500"},{_id:a(),question:"Как выполнить перенаправление на другую страницу с помощью window.locationобъекта JavaScript?",adsver:"Мы можем перенаправить на другую страницу, используя assign()метод объекта window.location.",category:"500"},{_id:a(),question:"Как перезагрузить текущую страницу с помощью window.locationобъекта JavaScript?",adsver:"Вы можете перезагрузить текущую страницу, используя метод reload() объекта window.location.",category:"500"},{_id:a(),question:"Как получить значение параметра запроса из URL-адреса с помощью window.locationобъекта JavaScript?",adsver:"Вы можете получить значение параметра запроса из URL, используя searchParamsсвойство объекта window.location . Например, чтобы получить значение параметра запроса с именем id.",category:"500"},{_id:a(),question:"Что такое объект Date в JavaScript?",adsver:"Объект Date в JavaScript представляет собой значение даты и времени, которое можно использовать для выполнения различных операций с датами и временем.",category:"500"},{_id:a(),question:"Как отформатировать дату в JavaScript?",adsver:"Вы можете отформатировать дату в JavaScript, используя метод toLocaleDateString() объекта Date, который возвращает строковое представление даты в указанной локали.",category:"500"},{_id:a(),question:"Как сравнить две даты в JavaScript?",adsver:"Вы можете сравнить две даты в JavaScript, используя операторы <, >, <=, >=, == и !=, которые сравнивают числовые значения объектов Date (т. е. их временные метки).",category:"500"},{_id:a(),question:"Как получить текущую временную метку в JavaScript?",adsver:"Текущую временную метку в JavaScript можно получить с помощью getTime()метода объекта Date, который возвращает количество миллисекунд с 1 января 1970 года, 00:00:00 UTC.",category:"500"},{_id:a(),question:"Как добавить или вычесть дни из даты в JavaScript?",adsver:"Вы можете добавлять или вычитать дни из даты в JavaScript, используя setDate()метод объекта Date, который позволяет установить день месяца для заданной даты.",category:"500"},{_id:a(),question:"Что такое итератор в javascript?",adsver:`В JavaScript итератор — это объект, который предоставляет способ доступа к элементам коллекции или пользовательской структуры данных в последовательном порядке. Он позволяет вам перебирать элементы по одному за раз, извлекая их по требованию.

Самый важный метод — next(), который отвечает за возврат следующего элемента в последовательности. Когда вы вызываете next() для итератора, он возвращает объект с двумя свойствами: value, представляющим текущий элемент, и done, указывающим, есть ли еще элементы или итерация завершена.`,category:"500"},{_id:a(),question:"Что такое декоратор в JavaScript?",adsver:"В JavaScript декоратор — это шаблон проектирования, который позволяет изменять поведение объекта или функции, обертывая его другой функцией. Он предоставляет способ добавлять новые функции или изменять существующие функции динамически, не изменяя исходный код.",category:"500"},{_id:a(),question:"Что такое опциональное связывание?",adsver:"Необязательное связывание — это функция JS ?., с помощью которой с помощью оператора можно напрямую обращаться к вложенным свойствам или вызывать вложенные функции, а если какая-либо часть цепочки имеет значение null или не определена, выражение замыкается и возвращает undefined вместо выдачи ошибки.",category:"500"},{_id:a(),question:"Что такое Throttling?",adsver:"Throttling — это метод, используемый в JavaScript для управления скоростью выполнения определенной функции или блока кода. Он обеспечивает вызов функции с максимальной частотой или с указанным интервалом, предотвращая ее слишком частый вызов.",category:"500"},{_id:a(),question:"Что такое Debouncing?",adsver:"Debouncing в JavaScript — это способ контролировать частоту вызова функции при частых событиях, таких как набор текста или прокрутка. Это может быть полезно для оптимизации производительности и избежания ненужных вызовов функций.",category:"500"},{_id:a(),question:"Что такое глобальный контекст исполнения?",adsver:"Глобальный контекст выполнения — это контекст выполнения по умолчанию или первый контекст выполнения, который создается движком JavaScript до выполнения любого кода (т. е. когда файл впервые загружается в браузере). Весь глобальный код, который не находится внутри функции или объекта, будет выполняться внутри этого глобального контекста выполнения. Поскольку движок JS является однопоточным, будет только одна глобальная среда и только один глобальный контекст выполнения.",category:"500"},{_id:a(),question:"Что такое контекст выполнения функции?",adsver:"В JavaScript контекст выполнения функции относится к среде, в которой функция выполняется или вызывается. Каждый раз, когда вызывается функция, создается новый контекст выполнения специально для этой функции. Он состоит из двух основных компонентов: переменной среды и цепочки областей видимости.",category:"500"},{_id:a(),question:"Что содержит переменная среда в контексте выполнения функции JavaScript и каково ее назначение?",adsver:"Переменная среда содержит все переменные, объявления функций и аргументы функций, специфичные для этой функции. Она отслеживает локальные переменные и параметры функции, позволяя функции получать к ним доступ и манипулировать ими во время ее выполнения.",category:"500"},{_id:a(),question:"Что такое цепочка областей видимости в контексте выполнения функции JavaScript?",adsver:"Цепочка областей видимости — это список всех переменных окружений, доступных функции. Она используется для разрешения ссылок на переменные во время выполнения функции. Если переменная не найдена в текущей переменной среде, JavaScript просматривает цепочку областей видимости, чтобы найти переменную во внешних средах, пока она не достигнет глобального контекста выполнения.",category:"500"},{_id:a(),question:"Что такое минификация?",adsver:"Минификация — это процесс удаления всех ненужных символов (пустые пробелы удаляются), а переменные переименовываются без изменения их функциональности.",category:"500"},{_id:a(),question:"Что такое динамический импорт в JavaScript?",adsver:"Динамический импорт в JavaScript позволяет загружать модули или скрипты динамически во время выполнения, а не включать их статически при начальной загрузке страницы.",category:"500"},{_id:a(),question:"Какую парадигму представляет собой Javascript?",adsver:"JavaScript — это многопарадигменный язык, поддерживающий императивное/процедурное программирование, объектно-ориентированное программирование и функциональное программирование. JavaScript поддерживает объектно-ориентированное программирование с прототипическим наследованием.",category:"500"},{_id:a(),question:"Что такое лямбда-функция?",adsver:"Функция лямбда, также известная как стрелочная функция в JavaScript, — это краткий и сокращенный способ определения функции. Она использует синтаксис стрелки => для указания функции, что позволяет создавать более короткий и читабельный код.",category:"500"},{_id:a(),question:"Что такое затенение переменных в JavaScript?",adsver:"Если в глобальной области видимости есть переменная, и вы хотите создать переменную с тем же именем в функции. Переменная во внутренней области видимости временно затенит переменную во внешней области видимости. Это называется затенением переменной.",category:"500"},{_id:a(),question:"Как назначить переменным значения по умолчанию?",adsver:"Вы можете использовать логический оператор ИЛИ || в выражении присваивания, чтобы предоставить значение по умолчанию. Синтаксис выглядит следующим образом: let a = b || c;",category:"500"},{_id:a(),question:"Что такое оператор REST в JavaScript?",adsver:"Оператор rest в JavaScript — это специальный синтаксис, позволяющий передавать неограниченное количество аргументов функции. Он представлен тремя точками ( ... ).",category:"500"},{_id:a(),question:"Что такое оператор спреда?",adsver:"Оператор распространения ( ...) используется для распространения элементов из массива или объекта в другой массив, вызов функции или литерал объекта. Он позволяет распаковывать или расширять отдельные элементы или свойства из источника в место назначения.",category:"500"},{_id:a(),question:"В чем разница между собственными объектами и объектами хоста?",adsver:"Собственные объекты — это объекты, которые являются частью языка JavaScript, определенного спецификацией ECMAScript, например, String, Math, RegExp, Object, Function и т. д. С другой стороны, хост-объекты предоставляются средой выполнения (браузером или Node), например, window, XMLHTTPRequest и т. д.",category:"500"},{_id:a(),question:"Каков типичный вариант использования анонимных функций?",adsver:"Анонимные функции — это функции, которые не привязаны к имени. Они часто используются как встроенные функции или как аргументы других функций. Типичным вариантом использования анонимных функций являются функции обратного вызова.",category:"500"},{_id:a(),question:"Что такое отрицательная бесконечность?",adsver:"Отрицательная бесконечность — это число в JavaScript, которое можно получить путем деления отрицательного числа на ноль.",category:"500"},{_id:a(),question:"Какой тип данных у переменных в JavaScript?",adsver:"Все переменные в JavaScript являются объектными типами данных.",category:"500"},{_id:a(),question:"В чем разница между прототипом и экземпляром?",adsver:"Прототип — это чертеж для создания объектов. Экземпляр — это объект, созданный из прототипа. Экземпляры наследуют свойства и методы от своих прототипов.",category:"500"},{_id:a(),question:"Что такое функциональное выражение?",adsver:"Функциональное выражение в JavaScript — это способ определения функции путем присвоения ее переменной. Вместо использования традиционного синтаксиса объявления функции функциональное выражение подразумевает создание анонимной функции, которая может быть сохранена в переменной.",category:"500"},{_id:a(),question:"В чем разница между модулем и библиотекой?",adsver:"Модуль — это самостоятельная единица кода, которая может быть импортирована в другую программу. Библиотека — это набор модулей, которые могут использоваться для выполнения определенной задачи. Модули обычно используются для организации кода и упрощения его повторного использования, в то время как библиотеки обычно используются для предоставления функциональности, которая недоступна в базовом языке.",category:"500"},{_id:a(),question:"Какие существуют способы удаления переменной в JavaScript?",adsver:"deleteключевое слово   Установка переменной в значение undefinedили null   Использование области видимости блока с letили const",category:"500"},{_id:a(),question:"Какие типы ошибок существуют в JavaScript?",adsver:`Существует три типа ошибок:

1) Ошибки времени загрузки: Ошибки, возникающие при загрузке веб-страницы, такие как ошибки неправильного синтаксиса, называются ошибками времени загрузки и генерируются динамически.
2) Ошибки времени выполнения: ошибки, возникающие из-за неправильного использования команды внутри языка HTML.
3) Логические ошибки: это ошибки, которые возникают из-за неправильной логики, выполняемой в функции с другой операцией.`,category:"500"},{_id:a(),question:"Для чего нужна функция размытия?",adsver:"В JavaScript эта blur()функция используется для снятия фокуса с определенного элемента на веб-странице. Когда элемент имеет фокус, это обычно означает, что он выбран или готов к получению пользовательского ввода, например, когда пользователь нажимает на поле ввода или кнопку.",category:"500"},{_id:a(),question:"В чем разница между окном оповещения и окном подтверждения?",adsver:"Окно оповещения — это простое окно сообщения с кнопкой OK для отображения информации, тогда как окно подтверждения позволяет пользователям подтверждать или отменять действие с помощью кнопок OK и Cancel соответственно. Окно оповещения неинтерактивно и приостанавливает выполнение кода до закрытия, тогда как окно подтверждения возвращает логическое значение, указывающее выбор пользователя, и не останавливает выполнение кода.",category:"500"},{_id:a(),question:"Что такое npm?",adsver:"NPM (Node Package Manager) — полезный инструмент для разработчиков, который упрощает работу с JavaScript. Это как большая библиотека, в которой они могут найти готовый к использованию код и легко добавить его в свои проекты. Это также название менеджера пакетов командной строки, используемого для взаимодействия с npm.",category:"500"},{_id:a(),question:"Как называется файл, который npm использует для идентификации проекта и его зависимостей?",adsver:'Файл, который npm использует для идентификации проекта и его зависимостей, называется "package.json". Он служит файлом конфигурации, в котором разработчики могут указать информацию о своем проекте, такую ​​как его имя, версия и зависимости от внешних пакетов.',category:"500"},{_id:a(),question:"В чем разница между зависимостями и devDependencies?",adsver:"Оба определены в package.json. dependencies перечисляет пакеты, от которых зависит проект. devDependencies перечисляет зависимости, которые требуются только во время тестирования и разработки.",category:"500"},{_id:a(),question:"Что такое неблокирующая функция?",adsver:"Неблокирующая функция, также известная как асинхронная функция, — это тип функции, которая не блокирует выполнение другого кода во время своего выполнения. Вместо того чтобы ждать завершения функции перед переходом к следующей задаче, неблокирующие функции позволяют программе продолжать выполнять другие задачи, пока она выполняет свою работу в фоновом режиме.",category:"500"},{_id:a(),question:"Что такое блокирующая функция?",adsver:"Блокирующая функция — это тип функции, которая останавливает выполнение программы до тех пор, пока она не завершит свою задачу или не получит ответ.",category:"500"},{_id:a(),question:"Что такое функциональная композиция?",adsver:"Композиция функций в JavaScript относится к процессу объединения двух или более функций для создания новой функции. Для композиции функций обычно создается функция более высокого порядка, которая принимает две функции в качестве аргументов и возвращает новую функцию. Эта новая функция выполняет функции по порядку, передавая результат одной функции в качестве аргумента следующей функции.",category:"500"},{_id:a(),question:"Что такое куча?",adsver:"В JavaScript «куча» относится к части памяти, где происходит динамическое распределение памяти. Это область памяти, используемая для хранения объектов и переменных, которые создаются во время выполнения программы. Куча является важным компонентом среды выполнения JavaScript. Она отвечает за управление и распределение памяти для объектов, которые создаются динамически во время выполнения, таких как объекты, созданные с использованием ключевого слова new, массивы и замыкания функций.",category:"500"},{_id:a(),question:"Что такое типизированный массив в JavaScript?",adsver:"Типизированные массивы — это специализированные объекты, подобные массивам, которые позволяют работать с двоичными данными структурированным и эффективным образом. Они бывают разных типов, например, числа и байты, и обеспечивают оптимизированные операции для чтения, записи и манипулирования двоичными данными. Они предлагают лучшую производительность и эффективность памяти по сравнению с обычными массивами.",category:"500"},{_id:a(),question:"Что такое неблокирующая функция?",adsver:"Неблокирующая функция, также известная как асинхронная функция, — это тип функции, которая не блокирует выполнение другого кода во время своего выполнения. Вместо того чтобы ждать завершения функции перед переходом к следующей задаче, неблокирующие функции позволяют программе продолжать выполнять другие задачи, пока она выполняет свою работу в фоновом режиме.",category:"500"},{_id:a(),question:"Что такое nodejs?",adsver:"Node.js — это среда выполнения JavaScript для серверных приложений. Она позволяет запускать JavaScript вне веб-браузеров, обрабатывать сетевые запросы, получать доступ к базам данных и эффективно создавать масштабируемые приложения. Она широко используется для создания веб-серверов, API, приложений реального времени и инструментов командной строки.",category:"500"},{_id:a(),question:"Что такое PWA?",adsver:"PWA (Progressive Web Apps) — это веб-приложения, которые используют JavaScript, HTML и CSS для предоставления опыта, похожего на мобильное приложение. Они работают в автономном режиме, отправляют push-уведомления и могут быть установлены на устройствах. PWA объединяют в себе лучшее из веб-технологий и технологий приложений, позволяя пользователям получать к ним доступ напрямую через веб-браузеры без необходимости загрузки из магазина приложений.",category:"500"},{_id:a(),question:"Что такое нулевой оператор объединения (??)?",adsver:"Это логический оператор, который возвращает свой правый операнд, когда его левый операнд равен нулю или не определен, и в противном случае возвращает свой левый операнд. Это можно противопоставить логическому оператору ИЛИ (||), который возвращает правый операнд, если левый операнд является любым ложным значением, а не только нулем или не определен.",category:"500"},{_id:a(),question:"Как получить статус флажка с помощью JavaScript?",adsver:"Вы можете применить свойство selected к выбранному флажку в DOM. Если значение true, это означает, что флажок отмечен, в противном случае он не отмечен.",category:"500"},{_id:a(),question:"Каково назначение оператора двойной тильды?",adsver:"Оператор двойной тильды (~~) известен как двойной побитовый оператор НЕ. Этот оператор является немного более быстрой заменой Math.floor().",category:"500"},{_id:a(),question:"Какие существуют способы отладки кода JavaScript?",adsver:"Для отладки кода JavaScript можно использовать операторы console.log() для вывода значений и сообщений на консоль, инструменты разработчика браузера для точек останова, пошагового выполнения кода и проверки переменных, оператор отладчика для запуска точек останова, обработку исключений для перехвата и регистрации ошибок, линтеры и анализаторы кода для обнаружения потенциальных проблем, а также удаленную отладку для отладки кода, работающего в другой среде.",category:"500"},{_id:a(),question:"Какие существуют способы оптимизации кода JavaScript?",adsver:"Для оптимизации кода JavaScript вы можете объединять и минимизировать файлы, минимизировать глобальные переменные, оптимизировать циклы и условные операторы, использовать эффективные структуры данных и алгоритмы, кэшировать данные, использовать асинхронное программирование и оптимизировать манипуляции с DOM.",category:"500"},{_id:a(),question:"Что такое каррирование функций?",adsver:"Каррирование функций — это процесс, в ходе которого мы преобразуем функцию с несколькими параметрами в цепочку функций с одним параметром.",category:"500"},{_id:a(),question:"Что делает delete в JavaScript?",adsver:"Оператор deleteиспользуется для удаления свойства или ключа объекта.",category:"500"},{_id:a(),question:"Что такое функция потока управления?",adsver:"Функция управления потоком выполнения в JavaScript — это функция, которая управляет потоком выполнения программы, особенно при работе с асинхронными операциями.",category:"500"},{_id:a(),question:"Какую роль функция управления потоком в js играет в асинхронной работе в javascript?",adsver:"Функции управления потоком предоставляют механизмы для координации и обработки асинхронных операций, гарантируя, что определенные действия происходят до или после других. Они помогают поддерживать желаемый порядок и синхронизацию в асинхронном коде.",category:"500"},{_id:a(),question:"Какие существуют способы оптимизации кода JavaScript?",adsver:"Для оптимизации кода JavaScript вы можете объединять и минимизировать файлы, минимизировать глобальные переменные, оптимизировать циклы и условные операторы, использовать эффективные структуры данных и алгоритмы, кэшировать данные, использовать асинхронное программирование и оптимизировать манипуляции с DOM.",category:"500"},{_id:a(),question:"В чем разница между необъявленным и неопределенным?",adsver:"Необъявленные переменные — это те, которые не существуют в программе и не объявлены. Если программа пытается прочитать значение необъявленной переменной, возникает ошибка выполнения. Неопределенные переменные — это те, которые объявлены в программе, но не получили никакого значения. Если программа пытается прочитать значение неопределенной переменной, возвращается неопределенное значение.",category:"500"},{_id:a(),question:"Какие существуют способы оптимизации кода JavaScript?",adsver:"Для оптимизации кода JavaScript вы можете объединять и минимизировать файлы, минимизировать глобальные переменные, оптимизировать циклы и условные операторы, использовать эффективные структуры данных и алгоритмы, кэшировать данные, использовать асинхронное программирование и оптимизировать манипуляции с DOM.",category:"500"},{_id:a(),question:"Какие существуют способы оптимизации кода JavaScript?",adsver:"Для оптимизации кода JavaScript вы можете объединять и минимизировать файлы, минимизировать глобальные переменные, оптимизировать циклы и условные операторы, использовать эффективные структуры данных и алгоритмы, кэшировать данные, использовать асинхронное программирование и оптимизировать манипуляции с DOM.",category:"500"},{_id:a(),question:"Как можно совместно использовать код между файлами?",adsver:"В клиентской/браузерной среде, если переменные и функции объявлены в глобальной области видимости (окне), они могут быть доступны и совместно использоваться всеми скриптами на странице. Это часто называют глобальной областью видимости или глобальным пространством имен.",category:"500"},{_id:a(),question:"Что делает instanceofоператор?",adsver:"Оператор instanceofпроверяет, появляется ли свойство прототипа конструктора где-либо в цепочке прототипов объекта. Другими словами, оператор instanceofпроверяет, является ли объект экземпляром класса или нет во время выполнения.",category:"500"},{_id:a(),question:"Каковы недостатки прототипического наследования?",adsver:`Прототипное наследование также имеет некоторые недостатки. Во-первых, его может быть сложнее понять, чем наследование на основе классов. Во-вторых, его может быть сложнее отладить. В-третьих, его может быть сложнее протестировать.

`,category:"500"},{_id:a(),question:"Какие существуют способы оптимизации кода JavaScript?",adsver:"Для оптимизации кода JavaScript вы можете объединять и минимизировать файлы, минимизировать глобальные переменные, оптимизировать циклы и условные операторы, использовать эффективные структуры данных и алгоритмы, кэшировать данные, использовать асинхронное программирование и оптимизировать манипуляции с DOM.",category:"500"},{_id:a(),question:"С какими типичными проблемами вы сталкиваетесь при использовании регулярных выражений?",adsver:"При использовании регулярных выражений к распространенным проблемам относятся неправильное сопоставление с шаблонами, проблемы с производительностью при работе с большими объемами данных или сложными шаблонами, трудности с читаемостью и обслуживанием, а также риск переобучения решаемой задачи.",category:"500"},{_id:a(),question:"Каковы ограничения использования ключевого слова «var» в JavaScript?",adsver:'Ключевое слово "var" в JavaScript имеет ограничения. Переменные, объявленные с помощью "var", имеют область действия функции и доступны во всей функции. В нем отсутствует область действия на уровне блока, что приводит к путанице и непреднамеренным побочным эффектам. Кроме того, "var" не предотвращает повторное объявление переменных в той же области действия, что создает риск непреднамеренной перезаписи.',category:"500"},{_id:a(),question:"Каковы ограничения использования ключевого слова «this» в JavaScript?",adsver:'Ключевое слово "this" в JavaScript имеет ограничения. Его значение зависит от вызова функции, что приводит к путанице и неожиданному поведению. В стрелочных функциях "this" ведет себя по-другому, будучи лексически ограниченным. При использовании "this" в функции-конструкторе без ключевого слова "new" оно ссылается на глобальный объект вместо создания нового экземпляра.',category:"500"},{_id:a(),question:"Каковы недостатки использования оператора «delete» в JavaScript?",adsver:'Оператор "delete" в JavaScript имеет недостатки. Он может быть медленным и влиять на производительность при удалении свойств объекта. Он не влияет на цепочку прототипов, что приводит к неожиданному поведению. Он также не может удалять переменные или функции, объявленные с ключевыми словами "var" или "function".',category:"500"},{_id:a(),question:"Каковы преимущества использования замыканий в JavaScript?",adsver:"Замыкания в JavaScript обеспечивают инкапсуляцию, конфиденциальность данных и создание закрытых переменных и функций, недоступных из внешней области видимости.",category:"500"},{_id:a(),question:"Какую пользу приносит концепция прототипного наследования разработчикам JavaScript?",adsver:"Прототипное наследование в JavaScript позволяет объектам наследовать свойства и методы других объектов, способствуя повторному использованию кода и сокращая потребление памяти.",category:"500"},{_id:a(),question:"Как использование шаблонных литералов в JavaScript улучшает обработку строк и конкатенацию по сравнению с традиционными методами?",adsver:"Шаблонные литералы в JavaScript упрощают интерполяцию строк, многострочные строки и динамическое встраивание контента, повышая читабельность и упрощая манипуляции со строками.",category:"500"},{_id:a(),question:"Каковы преимущества использования API fetch по сравнению с традиционным XMLHttpRequest для выполнения HTTP-запросов в JavaScript?",adsver:"API fetch предлагает более простой и современный способ выполнения асинхронных HTTP-запросов, обеспечивая лучшую обработку ошибок, поддержку promises и возможность обработки различных форматов данных.",category:"500"},{_id:a(),question:"Можете ли вы объяснить преимущества использования ключевого слова «this» и чем оно отличается в разных контекстах JavaScript?",adsver:"Ключевое слово «this» в JavaScript позволяет объектам динамически ссылаться на свои собственные свойства и методы, адаптируясь к различным контекстам выполнения и обеспечивая возможность повторного использования кода.",category:"500"},{_id:a(),question:"Как JavaScript управляет памятью и сборкой мусора?",adsver:"JavaScript управляет памятью с помощью автоматической сборки мусора. Механизм JavaScript отслеживает все объекты, созданные во время выполнения программы. Когда объект больше недоступен или не упоминается какой-либо частью программы, он становится доступным для сборки мусора. Затем сборщик мусора освобождает память, занятую этими неиспользуемыми объектами, делая ее доступной для будущего использования.",category:"500"},{_id:a(),question:"Каково значение состояния в ReactJS?",adsver:"Состояние в ReactJS — это объект JavaScript, который хранит данные, специфичные для компонента. Он представляет текущее состояние компонента и может обновляться с течением времени. Значение состояния заключается в том, что оно позволяет компонентам управлять и отображать динамические данные, обеспечивая интерактивность в пользовательском интерфейсе.",category:"500"},{_id:a(),question:"В чем разница между Props и state?",adsver:"Props (сокращение от properties) и state используются в ReactJS для управления данными, но они служат разным целям. Props используются для передачи данных из родительского компонента в дочерний, в то время как state используется для управления и обновления данных внутри самого компонента.",category:"500"},{_id:a(),question:"Каково назначение метода «render» в ReactJS?",adsver:"Props (сокращение от properties) и state используются в ReactJS для управления данными, но они служат разным целям. Props используются для передачи данных из родительского компонента в дочерний, в то время как state используется для управления и обновления данных внутри самого компонента.",category:"500"},{_id:a(),question:"В чем разница между Props и state?",adsver:'Метод "render" в ReactJS является важнейшей частью компонента. Он отвечает за возврат кода JSX (JavaScript XML), который определяет структуру и содержимое пользовательского интерфейса компонента. Метод render вызывается автоматически всякий раз, когда происходит изменение состояния или свойств компонента.',category:"500"},{_id:a(),question:"Какие методы жизненного цикла есть в ReactJS и как они работают?",adsver:"Методы жизненного цикла в ReactJS — это специальные методы, которые вызываются на разных этапах жизненного цикла компонента. Они позволяют разработчикам выполнять определенные действия в определенных точках, таких как инициализация состояния, обновление пользовательского интерфейса или очистка ресурсов. Примерами методов жизненного цикла являются «componentDidMount», «componentDidUpdate» и «componentWillUnmount». Они предоставляют хуки для выполнения кода в определенные моменты жизненного цикла компонента.",category:"500"},{_id:a(),question:"Что такое компонент высшего порядка (HOC) в ReactJS?",adsver:"Компонент высшего порядка (HOC) в ReactJS — это функция, которая принимает компонент в качестве входных данных и возвращает новый улучшенный компонент. Они действуют как обертки вокруг компонентов, позволяя вам внедрять свойства, изменять поведение и повторно использовать общую логику в нескольких компонентах.",category:"500"},{_id:a(),question:"Каково назначение свойства «key» в ReactJS?",adsver:'Проп "key" в ReactJS используется для уникальной идентификации элементов в списке компонентов или элементов, отрисованных циклом. Он помогает React эффективно обновлять и повторно отрисовывать только необходимые компоненты при изменении списка.',category:"500"},{_id:a(),question:"Объясните концепцию контролируемых и неконтролируемых компонентов в ReactJS.",adsver:"Управляемые компоненты в ReactJS — это входные данные формы, состояние которых управляется React. Входное значение привязано к переменной состояния, а изменения обрабатываются обработчиками событий. С другой стороны, состояние неуправляемых компонентов управляется DOM, а доступ к входному значению осуществляется напрямую. Управляемые компоненты предоставляют больше возможностей управления и проверки, в то время как неуправляемые компоненты проще для базовых сценариев.",category:"500"},{_id:a(),question:"Каково назначение метода «setState» в ReactJS и как он работает?",adsver:'Метод "setState" в ReactJS используется для обновления состояния компонента. Это встроенный метод, предоставляемый классом React Component. При вызове "setState" запускает повторную визуализацию компонента, обновляя его пользовательский интерфейс на основе нового состояния.',category:"500"},{_id:a(),question:"Каково значение компонента «React.Fragment»?",adsver:'"React.Fragment" — это компонент в ReactJS, который позволяет группировать несколько элементов без добавления дополнительных элементов DOM. Он помогает сохранять визуализированный вывод чистым и особенно полезен, когда вы не хотите вводить дополнительные оболочки или уровни вложенности.',category:"500"},{_id:a(),question:"Как React обрабатывает события?",adsver:"React обрабатывает события, используя синтетические события, которые являются кроссбраузерными обертками вокруг собственных событий браузера. Когда событие срабатывает, React создает синтетический объект события и передает его функции обработчика событий.",category:"500"},{_id:a(),question:"В чем разница между компонентами класса и функциональными компонентами в ReactJS?",adsver:"Основное различие между компонентами класса и функциональными компонентами в ReactJS заключается в синтаксисе и способе управления состоянием. Компоненты класса определяются с использованием классов ES6 и имеют методы жизненного цикла, тогда как функциональные компоненты определяются как функции JavaScript. Компоненты класса имеют собственное внутреннее состояние и могут использовать методы жизненного цикла, такие как componentDidMount и componentDidUpdate, тогда как функциональные компоненты используют React Hooks для управления состоянием и обработки побочных эффектов.",category:"500"},{_id:a(),question:"Как можно оптимизировать производительность приложений React?",adsver:"Существует несколько способов оптимизации производительности приложений React. Некоторые методы включают: использование производственной сборки React, минимизацию количества повторных рендеров с помощью shouldComponentUpdate или React.memo, отложенную загрузку компонентов или данных с помощью разделения кода, реализацию методов виртуализации для длинных списков и оптимизацию сетевых запросов путем кэширования данных или использования таких методов, как мемоизация.",category:"500"},{_id:a(),question:"Что такое React Router и как он работает?",adsver:"React Router — популярная библиотека в React для обработки маршрутизации в веб-приложении. Она позволяет разработчикам создавать одностраничные приложения с несколькими представлениями или страницами. React Router работает, определяя маршруты, которые сопоставляются с различными компонентами. Когда пользователь переходит по определенному маршруту, соответствующий компонент отображается.",category:"500"},{_id:a(),question:"Объясните концепцию React Hooks и их преимущества.",adsver:"React Hooks предоставляют способ повторного использования логики с сохранением состояния без написания компонента класса. Хуки позволяют разработчикам управлять состоянием компонента, обрабатывать побочные эффекты и подключаться к жизненному циклу React более простым и гибким способом. Они предлагают такие преимущества, как улучшенная читаемость кода, возможность повторного использования и более простое тестирование. Некоторые часто используемые хуки включают useState, useEffect и useContext.",category:"500"},{_id:a(),question:"Могут ли веб-браузеры напрямую читать JSX?",adsver:"Веб-браузеры не могут читать JSX напрямую. Это потому, что они созданы только для чтения обычных объектов JS, а JSX не является обычным объектом JavaScript. Чтобы веб-браузер мог прочитать файл JSX, файл необходимо преобразовать в обычный объект JavaScript. Для этого мы используем Babel",category:"500"},{_id:a(),question:"«В React все является компонентом». Объясните.",adsver:"Компоненты — это строительные блоки пользовательского интерфейса приложения React. Эти компоненты разделяют весь пользовательский интерфейс на небольшие независимые и повторно используемые части. Затем он визуализирует каждый из этих компонентов независимо друг от друга, не влияя на остальную часть пользовательского интерфейса.",category:"500"},{_id:a(),question:"Что такое чистые компоненты?",adsver:"Чистые компоненты — самые простые и быстрые компоненты, которые можно написать. Они могут заменить любой компонент, у которого есть только render(). Эти компоненты повышают простоту кода и производительность приложения.",category:"500"},{_id:a(),question:"Почему названия компонентов необходимо начинать с заглавной буквы?",adsver:"В React необходимо начинать имена компонентов с заглавной буквы. Если начать имя компонента с маленькой буквы, то возникнет ошибка нераспознанного тега. Это связано с тем, что в JSX имена тегов в нижнем регистре рассматриваются как теги HTML.",category:"500"},{_id:a(),question:"Как вы обрабатываете формы в React?",adsver:"В React вы можете управлять формами, используя контролируемые компоненты. Это означает, что значения входных данных формы контролируются состоянием React. Вы создаете переменные состояния для хранения значений входных данных формы и обновляете состояние с помощью события onChange. Вы можете получить доступ к данным формы и обработать их из состояния, когда форма отправлена.",category:"500"},{_id:a(),question:"Объясните архитектурный шаблон Flux.",adsver:"Архитектурный шаблон Flux — это шаблон проектирования, используемый в приложениях React для управления потоком данных. Он состоит из четырех ключевых компонентов: представления, действий, диспетчера и хранилищ. Действия запускают изменения, которые диспетчер отправляет в соответствующие хранилища. Хранилища содержат состояние приложения и обновляют представления. Этот однонаправленный поток данных обеспечивает предсказуемость и поддерживаемость.",category:"500"},{_id:a(),question:"Объясните концепцию контекста в React. Как это работает?",adsver:"Контекст в React — это способ делиться данными между компонентами без их явной передачи через props на каждом уровне. Он позволяет создать объект контекста, который содержит общие данные, к которым может получить доступ любой компонент в его поддереве. Поставщик контекста устанавливает значение, а потребляющие компоненты могут получить к нему доступ с помощью хука useContext.",category:"500"},{_id:a(),question:"Что такое порталы в React? Когда их можно использовать?",adsver:"Порталы в React предоставляют способ рендеринга дочерних компонентов в другой узел DOM, за пределами иерархии DOM текущего компонента. Они позволяют рендерить компоненты в другом месте DOM, что полезно для таких сценариев, как модальные окна, всплывающие окна или подсказки, где компонент должен быть позиционирован относительно определенного элемента DOM за пределами его родителя.",category:"500"},{_id:a(),question:"Объясните концепцию ленивой загрузки в React.",adsver:"Ленивая загрузка в React — это метод, используемый для оптимизации производительности путем загрузки компонентов или ресурсов только тогда, когда они необходимы. Вместо того, чтобы загружать все компоненты заранее, вы можете динамически импортировать их с помощью функции React.lazy и визуализировать их, когда это необходимо. Это помогает уменьшить начальный размер пакета и повышает скорость загрузки вашего приложения.",category:"500"},{_id:a(),question:"Что такое хук useEffect?",adsver:"Хук useEffect используется для обработки побочных эффектов в компонентах React. Он позволяет выполнять такие задачи, как выборка данных, подписки или манипуляция DOM.",category:"500"},{_id:a(),question:"Какова роль хука useReducer в React? Чем он отличается от хука useState?",adsver:"Хук useReducer служит альтернативой useState для управления сложной логикой состояния. Он принимает функцию редуктора и начальное состояние, возвращая текущее значение состояния и функцию диспетчеризации. Диспетчеризацией действий в редуктор можно управлять обновлениями состояния и организовывать их более структурированным образом.",category:"500"},{_id:a(),question:"Опишите назначение хука useRef.",adsver:"Хук useRef используется для создания изменяемых значений, которые сохраняются между рендерами в компоненте React. Он обычно используется для доступа к элементам DOM или хранения любого изменяемого значения, которое не требует запуска повторного рендеринга. useRef позволяет компонентам сохранять ссылку на определенное значение или элемент на протяжении всего их жизненного цикла.",category:"500"},{_id:a(),question:"Какова цель хука useMemo? Как он помогает оптимизировать производительность в React?",adsver:"Хук useMemo предназначен для мемоизации дорогостоящих вычислений или вызовов функций в React. Он принимает функцию и массив зависимостей, возвращая мемоизированное значение. При указании зависимостей мемоизированное значение пересчитывается только при изменении зависимостей, что помогает оптимизировать производительность, избегая ненужных вычислений.",category:"500"},{_id:a(),question:"Когда следует использовать хук useCallback в React? Чем он отличается от хука useMemo?",adsver:"Хук useCallback в React похож на useMemo, но он запоминает функции вместо значений. Это удобно при передаче обратных вызовов дочерним компонентам, поскольку позволяет избежать ненужных повторных рендеров. Запоминая функцию, он гарантирует, что возвращается тот же экземпляр функции, пока зависимости (входные данные) остаются неизменными. Такая оптимизация может повысить производительность в определенных ситуациях, предотвращая ненужные повторные рендеринги функций.",category:"500"},{_id:a(),question:"Что происходит при вызове setState?",adsver:"Свойство состояния обновляется в компоненте React с объектом, переданным в setState, и это делается асинхронно. Оно сообщает React, что этот компонент и его дочерние элементы должны быть повторно отрендерены, но React может не сделать этого немедленно.",category:"500"},{_id:a(),question:"Что такое childrenprop в React?",adsver:"Проп childrenв React позволяет передавать контент или компоненты как вложенный элемент другому компоненту, делая его гибким и пригодным для повторного использования. Он позволяет включать и отображать динамический контент в компоненте, помещая его между открывающим и закрывающим тегами этого компонента.",category:"500"},{_id:a(),question:"Что такое компоненты без сохранения состояния?",adsver:"Если поведение компонента не зависит от его состояния, то он может быть компонентом без состояния. Вы можете использовать либо функцию, либо класс для создания компонентов без состояния. Но если вам не нужно использовать хук жизненного цикла в ваших компонентах, вам следует использовать компоненты-функции.",category:"500"},{_id:a(),question:"Что такое компоненты с отслеживанием состояния?",adsver:"Если поведение компонента зависит от состояния компонента, то его можно назвать stateful-компонентом. Такие stateful-компоненты являются либо функциональными компонентами с хуками, либо классовыми компонентами.",category:"500"},{_id:a(),question:"Каково влияние индексов как ключей?",adsver:"Использование индексов в качестве ключей в React может вызвать проблемы. Когда компоненты визуализируются с использованием индексов в качестве ключей, React может некорректно обновлять или переупорядочивать их при изменении порядка. Это может привести к неправильному визуализированию, потере состояния компонента и снижению производительности. Лучше использовать уникальные и стабильные идентификаторы в качестве ключей, чтобы избежать этих проблем и гарантировать правильное обновление компонентов.",category:"500"},{_id:a(),question:"Как предотвратить рендеринг компонента в React?",adsver:"Чтобы предотвратить рендеринг компонента в React, можно использовать условный рендеринг. Вы можете обернуть код JSX компонента в оператор if или тернарный оператор, где вы указываете условие. Если условие оценивается как истинное, компонент будет отрисован; в противном случае — нет. Это позволяет вам контролировать, когда и при каких обстоятельствах компонент должен отображаться. Динамически настраивая условие, вы можете легко показывать или скрывать компонент на основе определенной логики или взаимодействия с пользователем.",category:"500"},{_id:a(),question:"Что делают эти три точки (...) в React?",adsver:"Три точки (...) в React, называемые оператором распространения, можно использовать для создания копий объектов или массивов. С объектами это позволяет вам создать новый объект, скопировав свойства существующего объекта и добавив или изменив определенные. Для массивов это позволяет вам создать новый массив, объединив элементы из разных массивов. Оператор распространения удобен для манипулирования данными в React и упрощает такие задачи, как обновление состояния компонента или слияние объектов с новыми свойствами.",category:"500"},{_id:a(),question:"Что не так с использованием Context в React?",adsver:"Контекст в React не является изначально плохим, но его следует использовать осторожно. Чрезмерное использование контекста может сделать ваш код более сложным для понимания и поддержки. Это также может привести к ненужному повторному рендерингу и может быть не лучшим выбором для управления глобальным состоянием в сложных приложениях. Поэтому нам следует рассмотреть другие варианты управления состоянием, такие как Redux для более крупных проектов.",category:"500"},{_id:a(),question:"Объясните, почему и когда вы бы использовали useMemo()?",adsver:"Вы бы использовали useMemo()в React, когда хотите оптимизировать производительность, запоминая результат функции или вычисления. Он используется, чтобы избежать ненужных вычислений или дорогостоящих операций, кэшируя вычисленное значение до тех пор, пока не изменятся его зависимости. Используя useMemo(), вы можете гарантировать, что вычисление выполняется только при необходимости, снижая нагрузку на приложение и повышая эффективность.",category:"500"},{_id:a(),question:"Когда следует использовать хук useReducer в ReactJS?",adsver:"Хук useReducer в ReactJS обычно используется, когда у вас сложная логика состояния, включающая несколько связанных значений, или когда переходы состояний более запутанные. Это хороший выбор, когда вы обнаруживаете, что управление состоянием с помощью хука useState становится громоздким и приводит к сложному и вложенному коду.",category:"500"},{_id:a(),question:"что такое стилизованный компонент?",adsver:"Стилизованные компоненты — это способ стилизации компонентов React путем написания CSS непосредственно в JavaScript. Они позволяют создавать повторно используемые стилизованные элементы и легко управлять стилями в компонентах. Это улучшает организацию кода и делает стилизацию более читаемой и поддерживаемой.",category:"500"},{_id:a(),question:"Каковы преимущества стилизованных компонентов?",adsver:"Стилизованные компоненты в React могут быть более сложными и иметь более высокую кривую обучения по сравнению с традиционными таблицами стилей CSS. Определение стилей в JavaScript может потребовать от разработчиков адаптации их рабочего процесса и понимания концепций CSS-in-JS. Кроме того, сгенерированные имена классов для стилизованных компонентов могут быть менее читабельными, что усложняет отладку",category:"500"},{_id:a(),question:"Почему в ReactJS нельзя обновить свойства?",adsver:"Свойства не могут быть обновлены в ReactJS, поскольку основная философия React направлена ​​на то, чтобы сделать свойства неизменяемыми и доступными сверху вниз, поэтому родитель может отправлять любые значения свойств дочернему элементу, но дочерний элемент не может изменять полученные свойства.",category:"500"},{_id:a(),question:"Кто такой диспетчер?",adsver:"Это один из компонентов, необходимых для построения приложений по архитектуре Flux. В этом шаблоне диспетчер является основной точкой, которая управляет обменом данными внутри приложения.",category:"500"},{_id:a(),question:"Что такое реквизиты по умолчанию?",adsver:"В React свойства по умолчанию используются для определения значений по умолчанию для свойств в компоненте. Свойства по умолчанию гарантируют, что если родительский компонент не предоставляет значение для определенного свойства, компонент все равно будет иметь значение по умолчанию для работы.",category:"500"},{_id:a(),question:"Объясните концепцию React Hooks и их преимущества.",adsver:"React Hooks предоставляют способ повторного использования логики с сохранением состояния без написания компонента класса.",category:"500"},{_id:a(),question:"React — это библиотека или фреймворк и почему?",adsver:"React — это библиотека JavaScript для создания пользовательского интерфейса, а не фреймворк. Она фокусируется на слое представления, предлагая эффективные способы создания компонентов пользовательского интерфейса и управления состоянием. В отличие от фреймворков, React не предоставляет полный набор инструментов разработки, но он отлично подходит для создания интерактивных веб-приложений с помощью декларативного подхода и эффективных обновлений пользовательского интерфейса.",category:"500"},{_id:a(),question:"Что такое вложенные компоненты в React?",adsver:"Нет, вложенный дочерний компонент не может напрямую получить доступ к состоянию своего родственного компонента. Если родственным компонентам необходимо общаться или обмениваться данными, рекомендуется поднять общее состояние до их общего родительского компонента и передать его вниз в качестве props обоим родственным компонентам.",category:"500"},{_id:a(),question:"Каковы границы ошибок в React?",adsver:"Границы ошибок в React — это компоненты, которые предотвращают сбой всего приложения при возникновении ошибки в дочерних компонентах. Они действуют как сети безопасности, перехватывая и обрабатывая ошибки, позволяя разработчикам отображать резервный пользовательский интерфейс и поддерживать более плавный пользовательский опыт.",category:"500"},{_id:a(),question:"Что такое инструмент разработки React?",adsver:"React DevTools — это расширение браузера, которое помогает разработчикам отлаживать и проверять приложения React. Оно позволяет вам видеть структуру компонентов, проверять и изменять данные компонентов и анализировать производительность. Это полезный инструмент для понимания того, как работают компоненты React, а также для поиска и устранения проблем в вашем коде.",category:"500"},{_id:a(),question:"Что такое «React Node» в React?",adsver:'В React "React Node" — это термин, используемый для описания любого контента, который может быть отображен в компоненте React. Это могут быть элементы HTML, другие компоненты React, текст, числа или фрагменты.',category:"500"},{_id:a(),question:"Зачем нам нужен React Router?",adsver:"Он поддерживает согласованную структуру и поведение и используется для разработки одностраничных веб-приложений. Позволяет использовать несколько представлений в одном приложении, определяя несколько маршрутов в приложении React.",category:"500"},{_id:a(),question:"Объясните роль редуктора.",adsver:"Редуктор — это чистые функции, которые определяют, как изменяется состояние приложения в ответ на ДЕЙСТВИЕ. Редуктор работает, принимая предыдущее состояние и действие, а затем возвращает новое состояние. Он определяет, какой тип обновления необходимо выполнить на основе типа действия, а затем возвращает новые значения. Он возвращает предыдущее состояние как есть, если не требуется выполнять никакую работу.",category:"500"},{_id:a(),question:"Каково использование React.cloneElement?",adsver:"React.cloneElement — это метод, предоставляемый React, который позволяет клонировать и изменять элемент React. Обычно он используется, когда вы хотите добавить или переопределить свойства элемента React, сохранив его исходный тип и ключ. Это полезно при работе с компонентами, которые принимают и изменяют свои дочерние элементы.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию React «поднятия состояния» и почему она важна?",adsver:"«Подъем состояния вверх» — это концепция в React, в которой вы перемещаете общее состояние нескольких компонентов в их общий родительский компонент. Делая это, вы устанавливаете единый источник истины для общего состояния, что позволяет вам передавать состояние и связанные функции в качестве свойств дочерним компонентам. Это обеспечивает лучший поток данных, управление состоянием и повышает производительность за счет сокращения ненужной повторной отрисовки.",category:"500"},{_id:a(),question:"Что такое ref в React и каково его назначение?",adsver:"Ссылка в React — это способ доступа и взаимодействия с реальными элементами DOM или компонентами React напрямую. Ее цель — предоставить средства чтения или изменения свойств, состояния или поведения компонента вне типичного потока данных React. Проще говоря, ссылки позволяют вам напрямую манипулировать элементами или компонентами, например, получать их значения, фокусироваться на полях ввода или вызывать методы, минуя обычный поток данных React.",category:"500"},{_id:a(),question:"Чем использование ссылок отличается от традиционной манипуляции DOM?",adsver:"Ссылки в React предоставляют удобный и эффективный способ работы с элементами и компонентами, позволяя вам легко получать к ним доступ и изменять их. Это как специальный инструмент, который предоставляет React, упрощая взаимодействие с пользовательским интерфейсом. Традиционная манипуляция DOM, с другой стороны, подразумевает более ручные и громоздкие подходы для достижения тех же результатов.",category:"500"},{_id:a(),question:"В чем основное различие между «строковыми ссылками» и «обратными ссылками» в React?",adsver:"Главное отличие в том, что строковые ссылки полагаются на строковый идентификатор, тогда как обратные ссылки используют функцию для захвата ссылки. Обратные ссылки более гибкие и позволяют лучше контролировать и манипулировать ссылкой, что делает их предпочтительным методом в React, тогда как подход с использованием строковых ссылок считается устаревшим и не рекомендуется в новых версиях React.",category:"500"},{_id:a(),question:"Объясните концепцию «пересылки ссылок» в React.",adsver:"«Пересылка ссылок» в React позволяет родительскому компоненту передавать ссылку своему дочернему компоненту. Таким образом, родитель может получить доступ и управлять элементом DOM или компонентом дочернего компонента. Это похоже на предоставление родительскому компоненту особой силы для взаимодействия с внутренними компонентами его дочернего компонента.",category:"500"},{_id:a(),question:"Как ссылки влияют на жизненный цикл компонента в React?",adsver:"Ссылки в React не влияют напрямую на жизненный цикл компонента. Они предоставляют способ доступа и взаимодействия с элементами или компонентами отдельно от методов жизненного цикла. Ссылки позволяют работать с определенными частями компонента, не влияя на его жизненный цикл или рендеринг.",category:"500"},{_id:a(),question:"Каковы преимущества использования ссылок обратного вызова по сравнению со строковыми ссылками?",adsver:"Преимущества использования ссылок обратного вызова по сравнению со строковыми ссылками в React заключаются в том, что ссылки обратного вызова обеспечивают большую гибкость и контроль при доступе и манипулировании элементами DOM. С помощью ссылок обратного вызова у вас есть прямой доступ к фактическому узлу DOM, что позволяет выполнять более сложные операции. С другой стороны, строковые ссылки ограничены идентификацией элементов с использованием строкового имени, что может быть менее гибким и не обеспечивать такого же уровня контроля.",category:"500"},{_id:a(),question:"Можно ли использовать refs с функциональными компонентами в React? Если да, то как?",adsver:"Да, вы можете использовать ссылки с функциональными компонентами в React. Хук useRefпозволяет вам создать ссылку и использовать ее в функциональном компоненте. Вызывая useRef()и присваивая результат переменной, вы можете получить доступ и управлять текущим значением ссылки, которое может использоваться для ссылки на элементы в JSX компонента.",category:"500"},{_id:a(),question:"Каковы ограничения или предостережения относительно использования ссылок в React?",adsver:"Хотя ссылки могут быть полезны, существуют ограничения и предостережения, которые следует учитывать при их использовании в React. Одним из ограничений является то, что ссылки обходят типичный поток данных в React, что может затруднить отслеживание и понимание изменений в состоянии вашего компонента. Кроме того, чрезмерное использование ссылок может привести к коду, который будет сложнее поддерживать и тестировать, поскольку это может привести к появлению зависимостей между различными частями вашего приложения.",category:"500"},{_id:a(),question:"Как очистить или освободить ресурсы, связанные с ссылкой в ​​React?",adsver:"Чтобы очистить или освободить ресурсы, связанные с ref в React, вы можете использовать хук useEffect. В useEffectхуке вы можете вернуть функцию очистки, которая будет вызвана при размонтировании компонента или при изменении значения ref. Это позволяет вам обрабатывать любые необходимые операции очистки, такие как удаление прослушивателей событий или отмена таймеров, гарантируя, что ресурсы вашего приложения будут управляться должным образом.",category:"500"},{_id:a(),question:"Как получить доступ к узлу DOM с помощью ссылок в React?",adsver:"Доступ к узлу DOM с помощью ссылок в React прост. После создания ссылки с помощью хука useRefили React.createRef()функции вы можете прикрепить ссылку к элементу JSX с помощью refатрибута. После того, как компонент отрисовался, вы можете получить доступ к узлу DOM, обратившись к текущему свойству ссылки.",category:"500"},{_id:a(),question:"Что такое связывание в React и почему оно важно?",adsver:"Связывание в React гарантирует, что функция имеет правильную ссылку на компонент, к которому она принадлежит. Это важно, поскольку позволяет функции получать доступ к данным и методам компонента.",category:"500"},{_id:a(),question:"Что произойдет, если не привязать функцию в React? Объясните потенциальные проблемы, которые могут возникнуть.",adsver:"Если вы не привяжете функцию в React, она может потерять доступ к экземпляру компонента и связанным с ним данным. Это может привести к ошибкам или неожиданному поведению при вызове функции.",category:"500"},{_id:a(),question:"Какой подход рекомендуется для привязки функций в компонентах React?",adsver:"Рекомендуемый подход к связыванию функций в компонентах React — использовать синтаксис стрелочных функций или связывать функции в конструкторе. Синтаксис стрелочных функций упрощает код и устраняет необходимость в явном связывании.",category:"500"},{_id:a(),question:"В чем разница между элементом и компонентом в React?",adsver:"Элемент — это базовый строительный блок или определенная часть системы или интерфейса, например кнопка или поле ввода текста. Компонент, с другой стороны, — это более крупная, самостоятельная сущность, состоящая из одного или нескольких элементов, например, панель навигации или форма входа. Компоненты можно использовать повторно, и они обеспечивают определенную функциональность в системе. По сути, элементы — это более мелкие части, в то время как компоненты — это более крупные, составные сущности.",category:"500"},{_id:a(),question:"Как применить валидацию к свойствам в React?",adsver:"Чтобы применить валидацию к props в React, вы можете использовать библиотеку PropTypes. Установите ее, импортируйте в файл компонента и определите ожидаемые props и их типы с помощью PropTypes. React отобразит предупреждения в консоли, если предоставленные props не соответствуют указанным типам или если какие-либо требуемые props отсутствуют.",category:"500"},{_id:a(),question:"Почему компонент React является декларативным?",adsver:"Компонент React является декларативным, поскольку он сообщает React, как должен выглядеть UI на основе текущих данных. Вместо того, чтобы давать пошаговые инструкции, мы описываем желаемое состояние UI и позволяем React справиться со всем остальным. Он упрощает процесс создания интерфейсов, сосредотачиваясь на том, «что» мы хотим, а не беспокоясь о мелочах «как» этого достичь.",category:"500"},{_id:a(),question:"Что такое пакет ReactDOM?",adsver:"Пакет ReactDOM в React отвечает за рендеринг компонентов React в DOM (Document Object Model) браузера. Он предоставляет методы и функциональные возможности для эффективного обновления и манипулирования DOM на основе изменений в дереве компонентов React. ReactDOM выступает в качестве моста между виртуальным представлением пользовательского интерфейса React и фактическими элементами HTML на веб-странице, гарантируя, что любые изменения в иерархии компонентов будут отражены в рендеринге пользовательского интерфейса.",category:"500"},{_id:a(),question:"Объясните использование модулей CSS в React.",adsver:"Модули CSS в React позволяют локально применять стили CSS к определенным компонентам, предотвращая конфликты имен классов и продвигая более модульный подход к стилизации. Генерируя уникальные имена классов для каждого компонента, модули CSS гарантируют, что стили, определенные в одном компоненте, не будут мешать стилям в другом",category:"500"},{_id:a(),question:"Можете ли вы объяснить, что такое пользовательские хуки в React и чем они отличаются от обычных хуков?",adsver:"Пользовательские хуки в React — это повторно используемые функции JavaScript, которые позволяют извлекать логику и поведение с сохранением состояния из компонентов. В то время как обычные хуки, такие как useState и useEffect, предоставляются React, пользовательские хуки создаются разработчиками для инкапсуляции определенной логики, которая может совместно использоваться несколькими компонентами.",category:"500"},{_id:a(),question:"Каковы преимущества использования пользовательских хуков в React? Можете ли вы привести пример сценария, в котором пользовательский хук был бы полезен?",adsver:"Преимущества использования пользовательских хуков в React — улучшенная организация кода, возможность повторного использования и разделение задач. Они позволяют извлекать сложную логику в повторно используемый хук, уменьшая дублирование и способствуя более чистому, более поддерживаемому коду. Например, пользовательский хук для обработки проверки формы может быть повторно использован в нескольких формах по всему приложению.",category:"500"},{_id:a(),question:"Как создать пользовательский хук в React?",adsver:"Чтобы создать пользовательский хук в React, вы начинаете с определения функции с префиксом «use», например «useCustomHook». Внутри функции вы можете использовать существующие хуки React и дополнительную логику для инкапсуляции желаемого состояния или поведения. Возвращайте любые значения или функции, к которым необходимо получить доступ вне пользовательского хука. После определения вы можете импортировать и использовать пользовательский хук в любом компоненте, обеспечивая повторное использование кода и модульность во всем приложении React.",category:"500"},{_id:a(),question:"Есть ли какие-либо ограничения или соображения при использовании пользовательских хуков в React? Есть ли какие-либо последствия для производительности или потенциальные подводные камни, о которых разработчикам следует знать?",adsver:"Пользовательские хуки в React не имеют встроенных ограничений или проблем с производительностью. Просто следите за любыми зависимостями и побочными эффектами в ваших пользовательских хуках. Также не забывайте следовать правилам хуков, таким как вызов их на верхнем уровне и избегание условного использования. Зная эти соображения, вы сможете эффективно использовать пользовательские хуки в своих приложениях React.",category:"500"},{_id:a(),question:"Что такое Formik и зачем его использовать в приложении React?",adsver:"Formik — это мощная библиотека управления формами в React, которая упрощает процесс обработки форм. Она обеспечивает более простой способ управления состоянием формы, обработки проверки формы и управления отправкой формы. С помощью Formik вы можете оптимизировать разработку форм, сократив шаблонный код и эффективно обрабатывая сложные задачи, связанные с формами.",category:"500"},{_id:a(),question:"Каковы преимущества использования Formik по сравнению с традиционной обработкой форм в React?",adsver:"Formik предлагает несколько преимуществ по сравнению с традиционной обработкой форм в React. Он упрощает процесс управления состоянием формы и снижает необходимость в ручном управлении состоянием. Встроенные возможности проверки Formik упрощают обработку проверки формы без использования дополнительных библиотек. В целом Formik значительно улучшает опыт разработчика при работе с формами в React.",category:"500"},{_id:a(),question:"Что такое Axios и какие проблемы он решает при разработке на JavaScript или React?",adsver:"Axios — это библиотека JavaScript, используемая для создания HTTP-запросов в браузерах или Node.js. Она упрощает процесс отправки и получения данных с серверов, облегчая обработку сетевых запросов в приложениях JavaScript или React.",category:"500"},{_id:a(),question:"Каковы преимущества использования Axios по сравнению со встроенным API fetch в JavaScript?",adsver:"Axios предлагает преимущества по сравнению со встроенным API-интерфейсом Fetch, предоставляя более удобный и последовательный API, лучшую обработку ошибок, поддержку отмены запросов и возможность перехвата запросов и ответов.",category:"500"},{_id:a(),question:"Что такое Material-UI и каково его назначение в разработке React?",adsver:"Material-UI — это библиотека компонентов React, реализующая принципы Material Design от Google. Она предлагает предварительно разработанные и настраиваемые компоненты пользовательского интерфейса, что упрощает создание визуально привлекательных и удобных интерфейсов. С Material-UI разработчики могут сосредоточиться на функциональности, упрощая процесс стилизации и создания адаптивных макетов.",category:"500"},{_id:a(),question:"Что такое Render hijacking в React?",adsver:"Render hijacking — это метод в React, который позволяет вам контролировать то, что компонент выводит из другого компонента. Вы делаете это, обертывая компонент в компонент высшего порядка (HOC). Обертывая компонент, вы можете вводить дополнительные свойства или вносить другие изменения, которые могут привести к тому, что компонент будет отображаться по-другому.",category:"500"},{_id:a(),question:"Что такое ключевые фрагменты?",adsver:"Фрагменты с ключами в React группируют несколько элементов без элемента-обертки, что повышает производительность. Назначая уникальный ключ каждому дочернему элементу, обеспечивается эффективное переупорядочивание и обновление во время рендеринга. Общий вариант использования — отображение коллекции в массив фрагментов",category:"500"},{_id:a(),question:"Что такое компонент Suspense?",adsver:"Если модуль, содержащий динамический импорт, еще не загружен к моменту рендеринга родительского компонента, необходимо отобразить некоторый резервный контент, пока вы ждете его загрузки с помощью индикатора загрузки. Это можно сделать с помощью компонента Suspense.",category:"500"},{_id:a(),question:"Можно ли использовать React без JSX?",adsver:"Да, можно использовать React без JSX. JSX — это расширение синтаксиса для JavaScript, используемое для написания HTML-подобного кода в React. Однако вы по-прежнему можете создавать элементы React с помощью функции, createElementпредоставляемой React, которая принимает тип элемента, свойства и дочерние элементы в качестве аргументов.",category:"500"},{_id:a(),question:"Почему строгий режим рендерится дважды в React?",adsver:"Строгий режим в React дважды отображает компоненты для предоставления дополнительных проверок и полезных предупреждений. Он действует как предохранитель, который отслеживает возможные проблемы в вашем коде. Выполняя двойной рендеринг, React может обнаружить и предупредить вас о таких проблемах, как непреднамеренные побочные эффекты или устаревшие практики. Таким образом, вы можете исправить эти проблемы до того, как они вызовут какие-либо проблемы в вашем приложении, что сделает его более надежным и прочным.",category:"500"},{_id:a(),question:"Что такое ReactFiber?",adsver:"React Fiber — это новый алгоритм согласования, представленный в React 16. Он отвечает за эффективный рендеринг и обновление компонентов в приложениях React. React Fiber разбивает работу по рендерингу на более мелкие блоки, называемые «волокнами», и управляет ими на основе приоритетов.",category:"500"},{_id:a(),question:"Как React Fiber улучшает общую производительность приложений React?",adsver:"React Fiber повышает производительность, предоставляя больше контроля над планированием и рендерингом. Он обеспечивает асинхронный рендеринг, который позволяет избежать блокировки основного потока, что обеспечивает более плавный пользовательский опыт.",category:"500"},{_id:a(),question:"Что такое Babel в React js?",adsver:"Babel — популярный компилятор JavaScript, широко используемый в экосистеме React. Он позволяет разработчикам писать современный код JavaScript (включая новейшие функции ECMAScript) и преобразовывать его в обратно совместимые версии, которые могут работать в старых браузерах и средах, не поддерживающих эти функции (ES6, ES7 в обычный старый ES5).",category:"500"},{_id:a(),question:"Что такое компонент-обертка в React?",adsver:"Компонент-обертка в React похож на родительский контейнер, который оборачивает другие компоненты. Он добавляет дополнительные функции, поведение или стили к оборачиваемым компонентам. Он действует как компонент более высокого уровня, улучшая функциональность содержащихся в нем компонентов.",category:"500"},{_id:a(),question:"Объясните reconciliation DOM?",adsver:"DOM diffing или reconciliation в React — это процесс сравнения предыдущей и новой версий пользовательского интерфейса. Он определяет изменения и обновления, необходимые для фактической веб-страницы. React определяет, что изменилось, добавляет или удаляет элементы и обновляет только необходимые части пользовательского интерфейса. Это ускоряет и повышает эффективность обновлений, избегая ненужной повторной отрисовки и манипуляции веб-страницей.",category:"500"},{_id:a(),question:"Какие зависимости в массиве зависимостей хука useEffect? ​​Как они влияют на поведение хука?",adsver:"Зависимости в массиве зависимостей хука useEffect определяют, когда эффект должен быть выполнен. Если какая-либо из зависимостей изменится, эффект будет запущен снова. Если массив зависимостей пуст, эффект будет запущен только один раз.",category:"500"},{_id:a(),question:"Каковы некоторые распространенные варианты использования хука useEffect?",adsver:"Распространенные варианты использования хука useEffect включают в себя извлечение данных из API, подписку на внешние источники данных, настройку прослушивателей событий, обновление заголовка документа и выполнение любых других побочных эффектов, которые должны происходить при рендеринге или обновлении компонента.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию множественных хуков useEffect в одном компоненте? Как они взаимодействуют друг с другом?",adsver:"Функция очистки, возвращаемая хуком useEffect, важна для очистки любых ресурсов или подписок, созданных эффектом. Чтобы выполнить очистку, вы просто возвращаете функцию очистки из эффекта. Функция очистки полезна для удаления прослушивателей событий, отмены подписок или выполнения других необходимых задач очистки.",category:"500"},{_id:a(),question:"Какие потенциальные подводные камни или распространенные ошибки при использовании хука useEffect? ​​Как их избежать?",adsver:"Некоторые распространенные ошибки с useEffect: забывание зависимостей, приводящее к устаревшим данным или бесконечным циклам; невыполнение очистки должным образом, приводящее к утечкам памяти; и изменение состояния или свойств без надлежащего управления зависимостями, приводящее к неожиданному поведению. Чтобы избежать этого, включайте все зависимости, обновляйте состояние или свойства условно, выполняйте операции очистки и обрабатывайте ошибки соответствующим образом.",category:"500"},{_id:a(),question:"Что такое рендеринг на стороне сервера (SSR) в React.js?",adsver:"Рендеринг на стороне сервера (SSR) в React.js — это процесс рендеринга компонентов React на сервере и отправки предварительно отрендеренного HTML-кода клиенту.",category:"500"},{_id:a(),question:"Почему вы решили использовать рендеринг на стороне сервера вместо рендеринга на стороне клиента в React.js?",adsver:"В React.js предпочтение отдается рендерингу на стороне сервера, а не на стороне клиента, из-за таких преимуществ, как повышение производительности, оптимизация для SEO и улучшенная начальная загрузка страницы.",category:"500"},{_id:a(),question:"Чем рендеринг на стороне сервера отличается от рендеринга на стороне клиента в React.js?",adsver:"Рендеринг на стороне сервера отличается от рендеринга на стороне клиента тем, что процесс рендеринга происходит на сервере до отправки HTML клиенту, тогда как рендеринг на стороне клиента отображает компоненты в браузере.",category:"500"},{_id:a(),question:"Объясните преимущества и недостатки серверного рендеринга в React.js.",adsver:"Преимущества рендеринга на стороне сервера в React.js включают улучшенную SEO, более быструю начальную загрузку страницы и лучшую производительность для устройств начального уровня. Однако это может привести к большей сложности и может не подходить для всех приложений.",category:"500"},{_id:a(),question:"Каковы последствия для производительности серверного рендеринга в React.js?",adsver:"Рендеринг на стороне сервера может повысить производительность за счет сокращения времени, необходимого для первоначального рендеринга, но он также может увеличить нагрузку на сервер и сетевой трафик для последующих или дополнительных запросов.",category:"500"},{_id:a(),question:"Как можно реализовать рендеринг на стороне сервера с помощью React.js без использования фреймворков вроде Next.js?",adsver:"Чтобы выполнить рендеринг на стороне сервера с помощью React.js без таких фреймворков, как Next.js, вам необходимо настроить сервер Node.js, использовать систему сборки, например Webpack или Babel, и реализовать логику рендеринга на стороне сервера с помощью библиотек, например react-dom/server.",category:"500"},{_id:a(),question:"Какие библиотеки или инструменты можно использовать для выполнения рендеринга на стороне сервера с помощью React.js?",adsver:"Для выполнения рендеринга на стороне сервера с помощью React.js можно использовать такие библиотеки, как react-dom/server, ReactDOMServer и express.",category:"500"},{_id:a(),question:"Как можно обрабатывать выборку данных и асинхронные операции во время рендеринга на стороне сервера в React.js?",adsver:"Извлечение данных и асинхронные операции во время рендеринга на стороне сервера можно обрабатывать с помощью методов жизненного цикла, таких как componentDidMount, или с помощью библиотек, таких как react-async.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию разделения кода и ее связь с рендерингом на стороне сервера в React.js?",adsver:"Разделение кода — это процесс разделения пакета JavaScript на более мелкие фрагменты для повышения производительности. Его можно использовать с рендерингом на стороне сервера, чтобы загружать только необходимый код JavaScript для каждого маршрута или компонента.",category:"500"},{_id:a(),question:"Какие распространенные проблемы и подводные камни связаны с рендерингом на стороне сервера в React.js, и как их можно устранить?",adsver:"Распространенные проблемы с рендерингом на стороне сервера включают обработку клиентских взаимодействий, управление состоянием на сервере и клиенте и работу со сторонними библиотеками, которые не являются дружественными к SSR. Эти проблемы можно решить, используя такие методы, как регидратация и аккуратная обработка асинхронных операций.",category:"500"},{_id:a(),question:"Как рендеринг на стороне сервера влияет на процесс разработки и отладки по сравнению с рендерингом на стороне клиента?",adsver:"Рендеринг на стороне сервера влияет на разработку и отладку иначе, чем рендеринг на стороне клиента, поскольку ошибки и проблемы могут возникать как на сервере, так и на клиенте. Необходимы правильные методы обработки ошибок и отладки.",category:"500"},{_id:a(),question:"Можете ли вы объяснить концепцию гидратации в контексте серверного рендеринга в React.js?",adsver:"Гидратация в серверном рендеринге относится к процессу присоединения прослушивателей событий и повторного присоединения компонентов React на стороне клиента после получения исходного HTML, отрендеренного сервером. Она обеспечивает интерактивность и плавный переход к рендерингу на стороне клиента.",category:"500"},{_id:a(),question:"Как вы реализуете аутентификацию и авторизацию в приложениях React?",adsver:"Существует два основных способа обработки аутентификации и авторизации в приложениях React. Один из способов — использование сторонней библиотеки, например Auth0 или Firebase. Эти библиотеки предоставляют ряд функций, которые упрощают реализацию аутентификации и авторизации в вашем приложении, например, управление пользователями, хеширование паролей и управление сеансами.",category:"500"},{_id:a(),question:"Зачем нам нужен Nextjs?",adsver:"Next.js — это фреймворк React, который обеспечивает рендеринг на стороне сервера (SSR), генерацию статического сайта (SSG) и другие функции, такие как маршрутизация и обработка API. Он полезен для создания оптимизированных и производительных приложений React, улучшения SEO и включения функциональности на стороне сервера.",category:"500"},{_id:a(),question:"Что такое TypeScript и чем он отличается от JavaScript?",adsver:"TypeScript — это статически типизированный надмножество JavaScript, которое добавляет необязательную статическую типизацию и другие возможности в JavaScript. Он отличается от JavaScript введением проверки типов во время компиляции, что помогает выявлять ошибки на ранних стадиях и улучшает поддерживаемость кода.",category:"500"},{_id:a(),question:"Каковы преимущества использования TypeScript?",adsver:"Преимущества использования TypeScript включают в себя повышение качества кода за счет статической типизации, повышение производительности труда разработчиков за счет улучшенного инструментария и автодополнения, повышение удобства сопровождения за счет организации и документирования кода, а также упрощение совместной работы в командах.",category:"500"},{_id:a(),question:"Как определить переменные с определенными типами в TypeScript?",adsver:'Переменные с определенными типами в TypeScript могут быть определены с помощью аннотаций типов. Например, вы можете объявить переменную с определенным типом следующим образом: let myVariable: string = "Hello";. Здесь myVariableопределяется как строковый тип.',category:"500"},{_id:a(),question:"Каковы основные типы данных в TypeScript?",adsver:"Основными типами данных в TypeScript являются число, строка, логическое значение, объект, массив, кортеж и перечисление.",category:"500"},{_id:a(),question:"Что такое тип данных кортежа в TypeScript?",adsver:"В TypeScript кортеж — это тип, позволяющий определить массив с фиксированным числом элементов разных типов. Кортежи похожи на массивы, но типы элементов в кортеже фиксированы, а их порядок имеет значение. Кортежи полезны, когда вы хотите работать с определенным набором значений, каждое из которых имеет свой тип, и поддерживать их порядок на протяжении всей программы.",category:"500"},{_id:a(),question:"Какова цель аннотаций типов в TypeScript и как они используются?",adsver:"Цель аннотаций типов в TypeScript — указать типы переменных, параметров функций и возвращаемых значений. Они помогают выявлять ошибки во время разработки и обеспечивают лучшую поддержку инструментария. Аннотации используются путем добавления двоеточия после имени переменной или параметра функции, за которым следует тип.",category:"500"},{_id:a(),question:"Как можно определить пользовательские типы или интерфейсы в TypeScript?",adsver:"В TypeScript пользовательские типы могут быть определены с помощью интерфейсов или псевдонимов типов. Интерфейсы определяют структуру объекта и могут быть реализованы классами, в то время как псевдонимы типов создают новое имя для определенного типа или комбинации типов. Они определяются с помощью ключевых слов interfaceи typeсоответственно.",category:"500"},{_id:a(),question:"Объясните концепцию вывода типов в TypeScript и принцип ее работы.",adsver:"Вывод типа в TypeScript — это способность компилятора автоматически определять тип переменной на основе ее инициализационного значения. TypeScript анализирует назначенное значение и выводит наиболее подходящий тип для переменной, уменьшая необходимость в явных аннотациях типов.",category:"500"},{_id:a(),question:"В чем разница между интерфейсами и псевдонимами типов в TypeScript? Когда следует использовать один из них вместо другого?",adsver:"Интерфейсы в TypeScript определяют, как должен выглядеть объект или что должен реализовывать класс. Они могут быть расширены или реализованы другими интерфейсами и классами. Псевдонимы типов, с другой стороны, дают новые имена существующим типам или объединяют несколько типов вместе. Используйте интерфейсы, когда вы хотите описать структуру объекта или требования класса. Используйте псевдонимы типов, когда вы хотите создать более короткие имена для типов или объединить их осмысленным образом.",category:"500"},{_id:a(),question:"Каким образом TypeScript поддерживает объектно-ориентированное программирование на основе классов?",adsver:"TypeScript поддерживает объектно-ориентированное программирование на основе классов. Он позволяет определять классы, наследование, модификаторы доступа (публичный, закрытый, защищенный), абстрактные классы и интерфейсы для контрактов. Он обеспечивает проверку типов и помогает организовывать сложные иерархии классов и взаимодействия.",category:"500"},{_id:a(),question:"Для чего нужен файл tsconfig.json?",adsver:"Файл tsconfig.json используется в TypeScript для настройки параметров компилятора для проекта. Он позволяет разработчикам указывать такие параметры, как целевая версия, модульная система, выходной каталог и многое другое.",category:"500"},{_id:a(),question:"Объясните концепцию утверждения типа в TypeScript.",adsver:"Утверждение типа в TypeScript — это способ сообщить компилятору конкретный тип значения, когда его нельзя вывести автоматически. Это позволяет вам переопределить предположения компилятора по умолчанию и рассматривать значение как определенный тип. Утверждения типа полезны, когда у вас больше знаний о типе значения, чем то, что компилятор может определить самостоятельно.",category:"500"},{_id:a(),question:"Что такое тип «any» в TypeScript и когда его следует использовать?",adsver:'Тип "any" в TypeScript — это тип, представляющий значение любого типа. По сути, он отключает проверку типа для этого конкретного значения, позволяя назначать его или использовать в любом контексте.',category:"500"},{_id:a(),question:"Как можно обеспечить строгую проверку на null в TypeScript?",adsver:'Чтобы обеспечить строгие проверки null в TypeScript, вы можете включить опцию компилятора "strictNullChecks" в файле tsconfig.json. Если эта опция включена, TypeScript будет проверять значения null и undefined более строго, помогая предотвратить распространенные ошибки, связанные с null и undefined.',category:"500"},{_id:a(),question:"Что такое модификатор «readonly» в TypeScript и как он влияет на свойства и массивы?",adsver:'Модификатор "readonly" в TypeScript используется для того, чтобы сделать свойства или элементы массива доступными только для чтения, то есть их нельзя изменить после инициализации. Он обеспечивает способ обеспечения неизменяемости и предотвращения случайных изменений определенных значений. При применении к свойствам он предотвращает переназначение, а при применении к массивам он запрещает добавлять или удалять элементы после инициализации.',category:"500"},{_id:a(),question:"Можно ли использовать TypeScript для бэкэнда?",adsver:"Да, TypeScript можно использовать для бэкенд-разработки. TypeScript — это надмножество JavaScript, которое добавляет статическую типизацию и другие возможности в JavaScript, делая его более подходящим для больших и сложных приложений. Его можно использовать с популярными бэкенд-фреймворками и платформами, такими как Node.js, для создания серверных приложений.",category:"500"},{_id:a(),question:"Что такое необязательные свойства в интерфейсе в TypeScript?",adsver:"В TypeScript можно определить необязательные свойства в интерфейсе, добавив вопросительный знак (?) к имени свойства. Это указывает на то, что свойство является необязательным и может присутствовать или отсутствовать в объекте, реализующем интерфейс.",category:"500"},{_id:a(),question:"Объясните дженерики в Typescript.",adsver:"Generics в TypeScript позволяют создавать повторно используемый код, который может работать с различными типами данных. Они действуют как заполнители для типов и обеспечивают гибкость, не жертвуя безопасностью типов. Используя угловые скобки (<>), вы можете создавать функции, интерфейсы, классы или псевдонимы типов, которые могут обрабатывать несколько типов.",category:"500"},{_id:a(),question:"Объясните концепцию защиты типов в TypeScript.",adsver:"Защита типа в TypeScript — это проверки, помогающие определить тип переменной. Они помогают TypeScript понять конкретный тип переменной, делая ваш код более безопасным и точным. Защита типа используется в условных блоках для уточнения типа на основе условий, улучшая вывод типа и снижая риск ошибок.",category:"500"},{_id:a(),question:"Какой keyofоператор используется в TypeScript?",adsver:"Оператор keyofв TypeScript используется для получения типа объединения всех ключей (имен свойств) типа объекта. Он позволяет вам получать доступ и использовать ключи типа объекта как строковые литералы в операциях и преобразованиях типов.",category:"500"},{_id:a(),question:"Объясните разницу между «интерфейсом» и «классом» в TypeScript.",adsver:"Интерфейс в TypeScript используется для описания структуры объекта, не предоставляя реализацию. Он определяет свойства и методы, которые должен иметь объект. С другой стороны, класс — это план создания объектов, инкапсулирующий данные и поведение. Он позволяет создавать экземпляры объектов, реализовывать интерфейсы и использовать концепции объектно-ориентированного программирования, такие как наследование и инкапсуляция.",category:"500"},{_id:a(),question:"Что такое enum в TypeScript?",adsver:"Перечисления в TypeScript — это способ определения коллекции связанных констант. Перечисления назначают автоматические числовые значения каждому перечислителю по умолчанию, но вы также можете настроить их. Перечисления полезны, когда у вас есть фиксированный набор значений, на которые вы хотите ссылаться, используя осмысленные имена вместо явных значений в вашем коде.",category:"500"},{_id:a(),question:"Можно ли стереть значения элементов массива в TypeScript?",adsver:"В TypeScript мы не можем напрямую стирать или удалять значения из отдельных элементов массива. После того, как значение назначено элементу массива, оно остается в этой позиции до тех пор, пока мы не заменим его новым значением. Однако мы можем назначить null, undefinedили любое другое специальное значение, чтобы указать пустое или стертое состояние для элемента массива.",category:"500"},{_id:a(),question:"Что такое типы пересечения в TypeScript?",adsver:'Типы пересечения позволяют объединять несколько типов в один тип, который имеет все свойства и методы каждого составного типа. Он обозначается символом "&".',category:"500"},{_id:a(),question:"Что такое типы Union в TypeScript?",adsver:'Типы объединения позволяют определить тип, который может содержать значения нескольких типов. Он обозначается символом "|".',category:"500"},{_id:a(),question:"Какие типы TypeScript являются неизменяемыми?",adsver:"В TypeScript все примитивные типы данных, такие как строки, числа, логические значения и т. д., являются неизменяемыми, что означает, что значение не может быть изменено более одного раза. Кроме того, это означает, что передача их в функции не имеет негативных последствий.",category:"500"},{_id:a(),question:"Что такое пространство имен в TypeScript?",adsver:"В TypeScript пространство имен — это способ организации и группировки связанных элементов кода, таких как классы, интерфейсы, функции и переменные, под одним именем. Пространства имен предоставляют механизм, позволяющий избежать конфликтов имен и создать логическую иерархию в вашей кодовой базе.",category:"500"},{_id:a(),question:"Что такое модули в TypeScript?",adsver:"Модули в TypeScript позволяют вам организовывать и инкапсулировать код в отдельные файлы. Используя exportключевое слово , вы можете сделать определенные элементы кода доступными для других модулей, в то время как importключевое слово позволяет вам использовать эти экспортированные элементы в вашем модуле. Модули упрощают управление зависимостями, повторное использование кода и поддержание модульной структуры в ваших проектах TypeScript.",category:"500"},{_id:a(),question:"Что такое миксины в TypeScript?",adsver:"В TypeScript миксины позволяют расширять класс, комбинируя свойства и методы из других классов. Они предоставляют возможность повторно использовать код в нескольких классах без использования наследования. Применяя миксин к целевому классу, можно добавить дополнительную функциональность к классу модульным и гибким образом.",category:"500"},{_id:a(),question:"Что такое слияние деклараций в TypeScript?",adsver:"Объединение деклараций в TypeScript позволяет объединять несколько деклараций с одинаковым именем в одну. Это позволяет добавлять или расширять свойства, методы или функциональность существующих типов, что упрощает создание и расширение кода в нескольких источниках без дублирования определений.",category:"500"},{_id:a(),question:"Каковы недостатки TypeScript?",adsver:"TypeScript имеет несколько недостатков. Он требует дополнительного времени и усилий для аннотирования типов, что может замедлить разработку. Он также имеет кривую обучения, особенно для разработчиков, впервые столкнувшихся со статической типизацией. Этап компиляции может усложнить рабочий процесс, а интеграция TypeScript с существующими кодовыми базами JavaScript может потребовать дополнительной работы и вызвать проблемы совместимости.",category:"500"},{_id:a(),question:"Что такое декораторы в TypeScript?",adsver:"Декораторы в TypeScript позволяют нам добавлять метаданные или поведение к классам, методам, свойствам или параметрам во время проектирования. Они объявляются с помощью символа @, за которым следует имя декоратора, помещенное непосредственно перед объявлением класса, метода, свойства или параметра.",category:"500"},{_id:a(),question:"Поддерживает ли TypeScript все принципы объектно-ориентированного программирования?",adsver:"Да, TypeScript поддерживает все принципы объектно-ориентированного программирования. Существует 4 основных принципа объектно-ориентированного программирования: инкапсуляция, наследование, абстракция и полиморфизм. TypeScript может реализовать все четыре принципа с помощью своего меньшего и более чистого синтаксиса",category:"500"},{_id:a(),question:"Поддерживает ли TypeScript перегрузку функций?",adsver:"Да, TypeScript поддерживает перегрузку функций, что означает, что вы можете определить несколько версий функции с разными типами параметров или арностью. Это позволяет вам предоставлять разные реализации функции на основе переданных ей аргументов.",category:"500"},{_id:a(),question:"Каковы наилучшие практики использования TypeScript?",adsver:"Чтобы эффективно использовать TypeScript, следуйте этим рекомендациям: используйте статическую типизацию для предотвращения ошибок и ясности кода, включите строгий режим и проверки на null, минимизируйте использование любого типа, следуйте единым соглашениям об именовании, поддерживайте TypeScript и параметры компилятора в актуальном состоянии и т. д.",category:"500"}],Gf="CategoryactiveYLboe",Yf="CategorycategoryIWDvl",Zf="Categorycategory__listLgSck",bf="Categorycategory__itemTMsJm",wr={active:Gf,category:Yf,category__list:Zf,category__item:bf},ep=({category:e,setCategory:t})=>ie.jsx("div",{className:wr.category,children:ie.jsx("ul",{className:wr.category__list,children:Kf.map((n,r)=>ie.jsx("li",{onClick:()=>t(i=>i===n.category_name?"All":n.category_name),className:`${wr.category__item} ${e===n.category_name?wr.active:""}`,children:n.category_name},r))})});var vc={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},eu=qt.createContext&&qt.createContext(vc),tp=["attr","size","title"];function np(e,t){if(e==null)return{};var n=rp(e,t),r,i;if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],!(t.indexOf(r)>=0)&&Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}function rp(e,t){if(e==null)return{};var n={};for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(t.indexOf(r)>=0)continue;n[r]=e[r]}return n}function oi(){return oi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},oi.apply(this,arguments)}function tu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,r)}return n}function ai(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?tu(Object(n),!0).forEach(function(r){ip(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tu(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function ip(e,t,n){return t=op(t),t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function op(e){var t=ap(e,"string");return typeof t=="symbol"?t:t+""}function ap(e,t){if(typeof e!="object"||!e)return e;var n=e[Symbol.toPrimitive];if(n!==void 0){var r=n.call(e,t||"default");if(typeof r!="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(t==="string"?String:Number)(e)}function yc(e){return e&&e.map((t,n)=>qt.createElement(t.tag,ai({key:n},t.attr),yc(t.child)))}function Aa(e){return t=>qt.createElement(lp,oi({attr:ai({},e.attr)},t),yc(e.child))}function lp(e){var t=n=>{var{attr:r,size:i,title:o}=e,l=np(e,tp),u=i||n.size||"1em",s;return n.className&&(s=n.className),e.className&&(s=(s?s+" ":"")+e.className),qt.createElement("svg",oi({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,r,l,{className:s,style:ai(ai({color:e.color||n.color},n.style),e.style),height:u,width:u,xmlns:"http://www.w3.org/2000/svg"}),o&&qt.createElement("title",null,o),e.children)};return eu!==void 0?qt.createElement(eu.Consumer,null,n=>t(n)):t(vc)}function up(e){return Aa({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"circle",attr:{cx:"256",cy:"256",r:"64"},child:[]},{tag:"path",attr:{d:"M490.84 238.6c-26.46-40.92-60.79-75.68-99.27-100.53C349 110.55 302 96 255.66 96c-42.52 0-84.33 12.15-124.27 36.11-40.73 24.43-77.63 60.12-109.68 106.07a31.92 31.92 0 0 0-.64 35.54c26.41 41.33 60.4 76.14 98.28 100.65C162 402 207.9 416 255.66 416c46.71 0 93.81-14.43 136.2-41.72 38.46-24.77 72.72-59.66 99.08-100.92a32.2 32.2 0 0 0-.1-34.76zM256 352a96 96 0 1 1 96-96 96.11 96.11 0 0 1-96 96z"},child:[]}]})(e)}function sp(e){return Aa({tag:"svg",attr:{viewBox:"0 0 512 512"},child:[{tag:"path",attr:{d:"M256.1 144.8c56.2 0 101.9 45.3 101.9 101.1 0 13.1-2.6 25.5-7.3 37l59.5 59c30.8-25.5 55-58.4 69.9-96-35.3-88.7-122.3-151.6-224.2-151.6-28.5 0-55.8 5.1-81.1 14.1l44 43.7c11.6-4.6 24.1-7.3 37.3-7.3zM52.4 89.7l46.5 46.1 9.4 9.3c-33.9 26-60.4 60.8-76.3 100.8 35.2 88.7 122.2 151.6 224.1 151.6 31.6 0 61.7-6.1 89.2-17l8.6 8.5 59.7 59 25.9-25.7L78.2 64 52.4 89.7zM165 201.4l31.6 31.3c-1 4.2-1.6 8.7-1.6 13.1 0 33.5 27.3 60.6 61.1 60.6 4.5 0 9-.6 13.2-1.6l31.6 31.3c-13.6 6.7-28.7 10.7-44.8 10.7-56.2 0-101.9-45.3-101.9-101.1 0-15.8 4.1-30.7 10.8-44.3zm87.8-15.7l64.2 63.7.4-3.2c0-33.5-27.3-60.6-61.1-60.6l-3.5.1z"},child:[]}]})(e)}function cp(e){return Aa({tag:"svg",attr:{viewBox:"0 0 1024 1024"},child:[{tag:"path",attr:{d:"M271.653 1023.192c-8.685 0-17.573-3.432-24.238-10.097-13.33-13.33-13.33-35.144 0-48.474L703.67 508.163 254.08 58.573c-13.33-13.331-13.33-35.145 0-48.475 13.33-13.33 35.143-13.33 48.473 0L776.38 483.925c13.33 13.33 13.33 35.143 0 48.473l-480.492 480.694c-6.665 6.665-15.551 10.099-24.236 10.099z"},child:[]}]})(e)}console.log(Qo);function dp(){const[e,t]=Qt.useState(Qo),[n,r]=Qt.useState(!1),[i,o]=Qt.useState("React"),l=()=>{const u=Qo.filter(s=>i===s.category);if(u.length>0){const s=Math.floor(Math.random()*u.length);t(u[s])}};return ie.jsxs(ie.Fragment,{children:[ie.jsx("h1",{children:"Frontend Questions"}),ie.jsx(ep,{category:i,setCategory:o}),ie.jsx("h2",{children:e.question})," ",n&&ie.jsx("p",{children:e.adsver}),ie.jsxs("div",{className:"card",children:[console.log(`${e.question}`),ie.jsx("button",{onClick:l,children:ie.jsx(cp,{})}),ie.jsx("button",{onClick:()=>r(u=>!u),children:n?ie.jsx(up,{}):ie.jsx(sp,{})})]})]})}bi.createRoot(document.getElementById("root")).render(ie.jsx(dp,{}));
